%% Generated by the Erlang ASN.1 compiler. Version: 5.0.16
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition in module GCC-PROTOCOL.

-ifndef(_GCC_PROTOCOL_HRL_).
-define(_GCC_PROTOCOL_HRL_, true).

-record('NonStandardParameter', {
  key,
  data
}).

-record('UserData_SETOF', {
  key,
  value = asn1_NOVALUE
}).

-record('Password', {
  numeric,
  text = asn1_NOVALUE,
  %% with exensions
  unicodeText = asn1_NOVALUE
}).

-record('ChallengeItem', {
  responseAlgorithm,
  challengeData
  %% with extension mark
}).

-record('ChallengeRequest', {
  challengeTag,
  challengeSet
  %% with extension mark
}).

-record('ChallengeResponse', {
  challengeTag,
  responseAlgorithm,
  responseItem
  %% with extension mark
}).

-record('PasswordChallengeRequestResponse_challengeRequestResponse', {
  challengeRequest = asn1_NOVALUE,
  challengeResponse = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceName', {
  numeric,
  text = asn1_NOVALUE,
  %% with exensions
  unicodeText = asn1_NOVALUE
}).

-record('ConferencePriority', {
  priority,
  scheme
  %% with extension mark
}).

-record('NetworkAddress_SEQOF_aggregatedChannel', {
  transferModes,
  internationalNumber,
  subAddress = asn1_NOVALUE,
  extraDialling = asn1_NOVALUE,
  highLayerCompatibility = asn1_NOVALUE
  %% with extension mark
}).

-record('NetworkAddress_SEQOF_aggregatedChannel_transferModes', {
  speech,
  'voice-band',
  'digital-56k',
  'digital-64k',
  'digital-128k',
  'digital-192k',
  'digital-256k',
  'digital-320k',
  'digital-384k',
  'digital-512k',
  'digital-768k',
  'digital-1152k',
  'digital-1472k',
  'digital-1536k',
  'digital-1920k',
  'packet-mode',
  'frame-mode',
  atm
  %% with extension mark
}).

-record('NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility', {
  telephony3kHz,
  telephony7kHz,
  videotelephony,
  videoconference,
  audiographic,
  audiovisual,
  multimedia
  %% with extension mark
}).

-record('NetworkAddress_SEQOF_transportConnection', {
  nsapAddress,
  transportSelector = asn1_NOVALUE
}).

-record('MediaList', {
  audio,
  video,
  data
  %% with extension mark
}).

-record('Profile_multimediaProfile', {
  profile,
  t120Data
}).

-record('ExtendedE164NetworkAddress', {
  internationalNumber,
  subAddress = asn1_NOVALUE,
  extraDialling = asn1_NOVALUE
  %% with extension mark
}).

-record('TransportAddress', {
  nsapAddress,
  transportSelector = asn1_NOVALUE
}).

-record('GSTNConnection', {
  networkAddress
  %% with extension mark
}).

-record('ISDNConnection', {
  circuitTypes,
  networkAddress,
  highLayerCompatibility = asn1_NOVALUE
  %% with extension mark
}).

-record('ISDNConnection_highLayerCompatibility', {
  telephony3kHz,
  telephony7kHz,
  videotelephony,
  videoconference,
  audiographic,
  audiovisual,
  multimedia
  %% with extension mark
}).

-record('CSDNConnection', {
  circuitTypes,
  networkAddress
  %% with extension mark
}).

-record('PSDNConnection', {
  networkAddress
  %% with extension mark
}).

-record('ATMConnection', {
  networkAddress,
  maxTransferRate = asn1_NOVALUE
  %% with extension mark
}).

-record('NetworkAddressV2_SETOF', {
  networkConnection,
  profiles = asn1_NOVALUE,
  mediaConcerned = asn1_NOVALUE
  %% with extension mark
}).

-record('NetworkAddressV2_SETOF_networkConnection_aggregatedConnections', {
  connectionList,
  aggregationMethods = asn1_NOVALUE
  %% with extension mark
}).

-record('NodeProperties', {
  managementDevice,
  peripheralDevice
  %% with extension mark
}).

-record('ConferenceDescriptor', {
  conferenceName,
  conferenceNameModifier = asn1_NOVALUE,
  conferenceDescription = asn1_NOVALUE,
  lockedConference,
  passwordInTheClearRequired,
  networkAddress = asn1_NOVALUE,
  %% with exensions
  defaultConferenceFlag,
  conferenceMode
}).

-record('NodeRecord', {
  superiorNode = asn1_NOVALUE,
  nodeType,
  nodeProperties,
  nodeName = asn1_NOVALUE,
  participantsList = asn1_NOVALUE,
  siteInformation = asn1_NOVALUE,
  networkAddress = asn1_NOVALUE,
  alternativeNodeID = asn1_NOVALUE,
  userData = asn1_NOVALUE,
  %% with exensions
  nodeCategory = asn1_NOVALUE,
  networkAddressV2 = asn1_NOVALUE
}).

-record('SessionKey', {
  applicationProtocolKey,
  sessionID = asn1_NOVALUE
}).

-record('ApplicationRecord', {
  applicationActive,
  conductingOperationCapable,
  startupChannel = asn1_NOVALUE,
  applicationUserID = asn1_NOVALUE,
  nonCollapsingCapabilities = asn1_NOVALUE
  %% with extension mark
}).

-record('ApplicationRecord_nonCollapsingCapabilities_SETOF', {
  capabilityID,
  applicationData = asn1_NOVALUE
}).

-record('ApplicationInvokeSpecifier', {
  sessionKey,
  expectedCapabilitySet = asn1_NOVALUE,
  startupChannel = asn1_NOVALUE,
  mandatoryFlag
  %% with extension mark
}).

-record('ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF', {
  capabilityID,
  capabilityClass
  %% with extension mark
}).

-record('RegistryKey', {
  sessionKey,
  resourceID
}).

-record('RegistryEntryOwner_owned', {
  nodeID,
  entityID
}).

-record('UserIDIndication', {
  tag
  %% with extension mark
}).

-record('ConferenceCreateRequest', {
  conferenceName,
  convenerPassword = asn1_NOVALUE,
  password = asn1_NOVALUE,
  lockedConference,
  listedConference,
  conductibleConference,
  terminationMethod,
  conductorPrivileges = asn1_NOVALUE,
  conductedPrivileges = asn1_NOVALUE,
  nonConductedPrivileges = asn1_NOVALUE,
  conferenceDescription = asn1_NOVALUE,
  callerIdentifier = asn1_NOVALUE,
  userData = asn1_NOVALUE,
  %% with exensions
  conferencePriority = asn1_NOVALUE,
  conferenceMode = asn1_NOVALUE
}).

-record('ConferenceCreateResponse', {
  nodeID,
  tag,
  result,
  userData = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceQueryRequest', {
  nodeType,
  asymmetryIndicator = asn1_NOVALUE,
  userData = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceQueryResponse', {
  nodeType,
  asymmetryIndicator = asn1_NOVALUE,
  conferenceList,
  result,
  userData = asn1_NOVALUE,
  %% with exensions
  waitForInvitationFlag = asn1_NOVALUE,
  noUnlistedConferenceFlag = asn1_NOVALUE
}).

-record('ConferenceJoinRequest', {
  conferenceName = asn1_NOVALUE,
  conferenceNameModifier = asn1_NOVALUE,
  tag = asn1_NOVALUE,
  password = asn1_NOVALUE,
  convenerPassword = asn1_NOVALUE,
  callerIdentifier = asn1_NOVALUE,
  userData = asn1_NOVALUE,
  %% with exensions
  nodeCategory = asn1_NOVALUE
}).

-record('ConferenceJoinResponse', {
  nodeID = asn1_NOVALUE,
  topNodeID,
  tag,
  conferenceNameAlias = asn1_NOVALUE,
  passwordInTheClearRequired,
  lockedConference,
  listedConference,
  conductibleConference,
  terminationMethod,
  conductorPrivileges = asn1_NOVALUE,
  conductedPrivileges = asn1_NOVALUE,
  nonConductedPrivileges = asn1_NOVALUE,
  conferenceDescription = asn1_NOVALUE,
  password = asn1_NOVALUE,
  result,
  userData = asn1_NOVALUE,
  %% with exensions
  nodeCategory = asn1_NOVALUE,
  conferenceMode = asn1_NOVALUE
}).

-record('ConferenceInviteRequest', {
  conferenceName,
  nodeID,
  topNodeID,
  tag,
  passwordInTheClearRequired,
  lockedConference,
  listedConference,
  conductibleConference,
  terminationMethod,
  conductorPrivileges = asn1_NOVALUE,
  conductedPrivileges = asn1_NOVALUE,
  nonConductedPrivileges = asn1_NOVALUE,
  conferenceDescription = asn1_NOVALUE,
  callerIdentifier = asn1_NOVALUE,
  userData = asn1_NOVALUE,
  %% with exensions
  conferencePriority = asn1_NOVALUE,
  nodeCategory = asn1_NOVALUE,
  conferenceMode = asn1_NOVALUE
}).

-record('ConferenceInviteResponse', {
  result,
  userData = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceAddRequest', {
  networkAddress,
  requestingNode,
  tag,
  addingMCU = asn1_NOVALUE,
  userData = asn1_NOVALUE,
  %% with exensions
  nodeCategory = asn1_NOVALUE,
  networkAddressV2
}).

-record('ConferenceAddResponse', {
  tag,
  result,
  userData = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceLockRequest', {
  %% with extension mark
}).

-record('ConferenceLockResponse', {
  result
  %% with extension mark
}).

-record('ConferenceLockIndication', {
  %% with extension mark
}).

-record('ConferenceUnlockRequest', {
  %% with extension mark
}).

-record('ConferenceUnlockResponse', {
  result
  %% with extension mark
}).

-record('ConferenceUnlockIndication', {
  %% with extension mark
}).

-record('ConferenceTerminateRequest', {
  reason
  %% with extension mark
}).

-record('ConferenceTerminateResponse', {
  result
  %% with extension mark
}).

-record('ConferenceTerminateIndication', {
  reason
  %% with extension mark
}).

-record('ConferenceEjectUserRequest', {
  nodeToEject,
  reason
  %% with extension mark
}).

-record('ConferenceEjectUserResponse', {
  nodeToEject,
  result
  %% with extension mark
}).

-record('ConferenceEjectUserIndication', {
  nodeToEject,
  reason
  %% with extension mark
}).

-record('ConferenceTransferRequest', {
  conferenceName,
  conferenceNameModifier = asn1_NOVALUE,
  networkAddress = asn1_NOVALUE,
  transferringNodes = asn1_NOVALUE,
  password = asn1_NOVALUE,
  %% with exensions
  networkAddressV2 = asn1_NOVALUE
}).

-record('ConferenceTransferResponse', {
  conferenceName,
  conferenceNameModifier = asn1_NOVALUE,
  transferringNodes = asn1_NOVALUE,
  result
  %% with extension mark
}).

-record('ConferenceTransferIndication', {
  conferenceName,
  conferenceNameModifier = asn1_NOVALUE,
  networkAddress = asn1_NOVALUE,
  transferringNodes = asn1_NOVALUE,
  password = asn1_NOVALUE,
  %% with exensions
  networkAddressV2 = asn1_NOVALUE
}).

-record('RosterUpdateIndication', {
  fullRefresh,
  nodeInformation,
  applicationInformation
  %% with extension mark
}).

-record('RosterUpdateIndication_nodeInformation', {
  nodeRecordList,
  rosterInstanceNumber,
  nodesAdded,
  nodesRemoved
  %% with extension mark
}).

-record('RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF', {
  nodeID,
  nodeRecord
}).

-record('RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF', {
  nodeID,
  nodeUpdate
}).

-record('RosterUpdateIndication_applicationInformation_SETOF', {
  sessionKey,
  applicationRecordList,
  applicationCapabilitiesList,
  rosterInstanceNumber,
  peerEntitiesAdded,
  peerEntitiesRemoved
  %% with extension mark
}).

-record('RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF', {
  nodeID,
  entityID,
  applicationRecord
}).

-record('RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF', {
  nodeID,
  entityID,
  applicationUpdate
}).

-record('RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF', {
  capabilityID,
  capabilityClass,
  numberOfEntities
  %% with extension mark
}).

-record('ApplicationInvokeIndication', {
  applicationProtocolEntiyList,
  destinationNodes = asn1_NOVALUE
  %% with extension mark
}).

-record('RegistryRegisterChannelRequest', {
  entityID,
  key,
  channelID
  %% with extension mark
}).

-record('RegistryAssignTokenRequest', {
  entityID,
  key
  %% with extension mark
}).

-record('RegistrySetParameterRequest', {
  entityID,
  key,
  parameter,
  modificationRights = asn1_NOVALUE
  %% with extension mark
}).

-record('RegistryRetrieveEntryRequest', {
  entityID,
  key
  %% with extension mark
}).

-record('RegistryDeleteEntryRequest', {
  entityID,
  key
  %% with extension mark
}).

-record('RegistryMonitorEntryRequest', {
  entityID,
  key
  %% with extension mark
}).

-record('RegistryMonitorEntryIndication', {
  key,
  item,
  owner,
  modificationRights = asn1_NOVALUE
  %% with extension mark
}).

-record('RegistryAllocateHandleRequest', {
  entityID,
  numberOfHandles
  %% with extension mark
}).

-record('RegistryAllocateHandleResponse', {
  entityID,
  numberOfHandles,
  firstHandle,
  result
  %% with extension mark
}).

-record('RegistryResponse', {
  entityID,
  primitiveType,
  key,
  item,
  owner,
  modificationRights = asn1_NOVALUE,
  result
  %% with extension mark
}).

-record('ConductorAssignIndication', {
  conductingNode
  %% with extension mark
}).

-record('ConductorReleaseIndication', {
  %% with extension mark
}).

-record('ConductorPermissionAskIndication', {
  grantFlag
  %% with extension mark
}).

-record('ConductorPermissionGrantIndication', {
  permissionList,
  waitingList = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceTimeRemainingIndication', {
  timeRemaining,
  nodeID = asn1_NOVALUE
  %% with extension mark
}).

-record('ConferenceTimeInquireIndication', {
  nodeSpecificTimeFlag
  %% with extension mark
}).

-record('ConferenceTimeExtendIndication', {
  timeToExtend,
  nodeSpecificTimeFlag
  %% with extension mark
}).

-record('ConferenceAssistanceIndication', {
  userData = asn1_NOVALUE
  %% with extension mark
}).

-record('TextMessageIndication', {
  message
  %% with extension mark
}).

-record('RosterRefreshRequest', {
  nodeID,
  nodeCategory,
  fullRefresh,
  sendConferenceRoster = asn1_NOVALUE,
  applicationList = asn1_NOVALUE,
  sessionList = asn1_NOVALUE,
  nonStandardParameter = asn1_NOVALUE
  %% with extension mark
}).

-record('RosterRefreshRequest_applicationList', {
  applicationKeyList,
  nonStandardParameter = asn1_NOVALUE
  %% with extension mark
}).

-record('RosterRefreshRequest_applicationList_applicationKeyList_SETOF', {
  applicationProtocolKey,
  nonStandardParameter = asn1_NOVALUE
  %% with extension mark
}).

-record('RosterRefreshRequest_sessionList', {
  sessionKeyList,
  nonStandardParameter = asn1_NOVALUE
  %% with extension mark
}).

-record('RosterRefreshRequest_sessionList_sessionKeyList_SETOF', {
  sessionKey,
  nonStandardParameter = asn1_NOVALUE
  %% with extension mark
}).

-record('FunctionNotSupportedResponse', {
  request
}).

-record('NonStandardPDU', {
  data
  %% with extension mark
}).

-record('ConnectData', {
  t124Identifier,
  connectPDU
}).

-endif. %% _GCC_PROTOCOL_HRL_
