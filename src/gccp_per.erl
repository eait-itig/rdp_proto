%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.16
%% Purpose: Encoding and decoding of the types in GCC-PROTOCOL.

-module('gccp_per').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("gccp.hrl").
-asn1_info([{vsn,'5.0.16'},
            {module,'GCC-PROTOCOL'},
            {options,[warnings,ber,errors,
 {cwd,"/home/alex/dev/rdp_proto"},
 {outdir,"/home/alex/dev/rdp_proto"},
 verbose,undec_rest,per,
 {i,"."},
 {i,"/home/alex/dev/rdp_proto"}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_ChannelID/2,
enc_StaticChannelID/2,
enc_DynamicChannelID/2,
enc_UserID/2,
enc_TokenID/2,
enc_StaticTokenID/2,
enc_DynamicTokenID/2,
enc_Time/2,
enc_Handle/2,
enc_H221NonStandardIdentifier/2,
enc_Key/2,
enc_NonStandardParameter/2,
enc_TextString/2,
enc_SimpleTextString/2,
enc_SimpleNumericString/2,
enc_DiallingString/2,
enc_SubAddressString/2,
enc_ExtraDiallingString/2,
enc_UserData/2,
enc_Password/2,
enc_PasswordSelector/2,
enc_ChallengeResponseItem/2,
enc_ChallengeResponseAlgorithm/2,
enc_ChallengeItem/2,
enc_ChallengeRequest/2,
enc_ChallengeResponse/2,
enc_PasswordChallengeRequestResponse/2,
enc_ConferenceName/2,
enc_ConferenceNameSelector/2,
enc_ConferenceNameModifier/2,
enc_Privilege/2,
enc_TerminationMethod/2,
enc_ConferencePriorityScheme/2,
enc_ConferencePriority/2,
enc_NodeCategory/2,
enc_ConferenceMode/2,
enc_NetworkAddress/2,
enc_MediaList/2,
enc_ChannelAggregationMethod/2,
enc_Profile/2,
enc_ExtendedE164NetworkAddress/2,
enc_TransportAddress/2,
enc_GSTNConnection/2,
enc_ISDNConnection/2,
enc_CSDNConnection/2,
enc_PSDNConnection/2,
enc_ATMConnection/2,
enc_NetworkConnection/2,
enc_NetworkAddressV2/2,
enc_NodeType/2,
enc_NodeProperties/2,
enc_AsymmetryIndicator/2,
enc_AlternativeNodeID/2,
enc_ConferenceDescriptor/2,
enc_NodeRecord/2,
enc_SessionKey/2,
enc_ChannelType/2,
enc_ApplicationRecord/2,
enc_CapabilityID/2,
enc_CapabilityClass/2,
enc_EntityID/2,
enc_ApplicationInvokeSpecifier/2,
enc_RegistryKey/2,
enc_RegistryItem/2,
enc_RegistryEntryOwner/2,
enc_RegistryModificationRights/2,
enc_UserIDIndication/2,
enc_ConferenceCreateRequest/2,
enc_ConferenceCreateResponse/2,
enc_ConferenceQueryRequest/2,
enc_ConferenceQueryResponse/2,
enc_ConferenceJoinRequest/2,
enc_ConferenceJoinResponse/2,
enc_ConferenceInviteRequest/2,
enc_ConferenceInviteResponse/2,
enc_ConferenceAddRequest/2,
enc_ConferenceAddResponse/2,
enc_ConferenceLockRequest/2,
enc_ConferenceLockResponse/2,
enc_ConferenceLockIndication/2,
enc_ConferenceUnlockRequest/2,
enc_ConferenceUnlockResponse/2,
enc_ConferenceUnlockIndication/2,
enc_ConferenceTerminateRequest/2,
enc_ConferenceTerminateResponse/2,
enc_ConferenceTerminateIndication/2,
enc_ConferenceEjectUserRequest/2,
enc_ConferenceEjectUserResponse/2,
enc_ConferenceEjectUserIndication/2,
enc_ConferenceTransferRequest/2,
enc_ConferenceTransferResponse/2,
enc_ConferenceTransferIndication/2,
enc_RosterUpdateIndication/2,
enc_ApplicationInvokeIndication/2,
enc_RegistryRegisterChannelRequest/2,
enc_RegistryAssignTokenRequest/2,
enc_RegistrySetParameterRequest/2,
enc_RegistryRetrieveEntryRequest/2,
enc_RegistryDeleteEntryRequest/2,
enc_RegistryMonitorEntryRequest/2,
enc_RegistryMonitorEntryIndication/2,
enc_RegistryAllocateHandleRequest/2,
enc_RegistryAllocateHandleResponse/2,
enc_RegistryResponse/2,
enc_ConductorAssignIndication/2,
enc_ConductorReleaseIndication/2,
enc_ConductorPermissionAskIndication/2,
enc_ConductorPermissionGrantIndication/2,
enc_ConferenceTimeRemainingIndication/2,
enc_ConferenceTimeInquireIndication/2,
enc_ConferenceTimeExtendIndication/2,
enc_ConferenceAssistanceIndication/2,
enc_TextMessageIndication/2,
enc_RosterRefreshRequest/2,
enc_FunctionNotSupportedResponse/2,
enc_NonStandardPDU/2,
enc_ConnectData/2,
enc_ConnectGCCPDU/2,
enc_GCCPDU/2,
enc_RequestPDU/2,
enc_ResponsePDU/2,
enc_IndicationPDU/2
]).

-export([
dec_ChannelID/2,
dec_StaticChannelID/2,
dec_DynamicChannelID/2,
dec_UserID/2,
dec_TokenID/2,
dec_StaticTokenID/2,
dec_DynamicTokenID/2,
dec_Time/2,
dec_Handle/2,
dec_H221NonStandardIdentifier/2,
dec_Key/2,
dec_NonStandardParameter/2,
dec_TextString/2,
dec_SimpleTextString/2,
dec_SimpleNumericString/2,
dec_DiallingString/2,
dec_SubAddressString/2,
dec_ExtraDiallingString/2,
dec_UserData/2,
dec_Password/2,
dec_PasswordSelector/2,
dec_ChallengeResponseItem/2,
dec_ChallengeResponseAlgorithm/2,
dec_ChallengeItem/2,
dec_ChallengeRequest/2,
dec_ChallengeResponse/2,
dec_PasswordChallengeRequestResponse/2,
dec_ConferenceName/2,
dec_ConferenceNameSelector/2,
dec_ConferenceNameModifier/2,
dec_Privilege/2,
dec_TerminationMethod/2,
dec_ConferencePriorityScheme/2,
dec_ConferencePriority/2,
dec_NodeCategory/2,
dec_ConferenceMode/2,
dec_NetworkAddress/2,
dec_MediaList/2,
dec_ChannelAggregationMethod/2,
dec_Profile/2,
dec_ExtendedE164NetworkAddress/2,
dec_TransportAddress/2,
dec_GSTNConnection/2,
dec_ISDNConnection/2,
dec_CSDNConnection/2,
dec_PSDNConnection/2,
dec_ATMConnection/2,
dec_NetworkConnection/2,
dec_NetworkAddressV2/2,
dec_NodeType/2,
dec_NodeProperties/2,
dec_AsymmetryIndicator/2,
dec_AlternativeNodeID/2,
dec_ConferenceDescriptor/2,
dec_NodeRecord/2,
dec_SessionKey/2,
dec_ChannelType/2,
dec_ApplicationRecord/2,
dec_CapabilityID/2,
dec_CapabilityClass/2,
dec_EntityID/2,
dec_ApplicationInvokeSpecifier/2,
dec_RegistryKey/2,
dec_RegistryItem/2,
dec_RegistryEntryOwner/2,
dec_RegistryModificationRights/2,
dec_UserIDIndication/2,
dec_ConferenceCreateRequest/2,
dec_ConferenceCreateResponse/2,
dec_ConferenceQueryRequest/2,
dec_ConferenceQueryResponse/2,
dec_ConferenceJoinRequest/2,
dec_ConferenceJoinResponse/2,
dec_ConferenceInviteRequest/2,
dec_ConferenceInviteResponse/2,
dec_ConferenceAddRequest/2,
dec_ConferenceAddResponse/2,
dec_ConferenceLockRequest/2,
dec_ConferenceLockResponse/2,
dec_ConferenceLockIndication/2,
dec_ConferenceUnlockRequest/2,
dec_ConferenceUnlockResponse/2,
dec_ConferenceUnlockIndication/2,
dec_ConferenceTerminateRequest/2,
dec_ConferenceTerminateResponse/2,
dec_ConferenceTerminateIndication/2,
dec_ConferenceEjectUserRequest/2,
dec_ConferenceEjectUserResponse/2,
dec_ConferenceEjectUserIndication/2,
dec_ConferenceTransferRequest/2,
dec_ConferenceTransferResponse/2,
dec_ConferenceTransferIndication/2,
dec_RosterUpdateIndication/2,
dec_ApplicationInvokeIndication/2,
dec_RegistryRegisterChannelRequest/2,
dec_RegistryAssignTokenRequest/2,
dec_RegistrySetParameterRequest/2,
dec_RegistryRetrieveEntryRequest/2,
dec_RegistryDeleteEntryRequest/2,
dec_RegistryMonitorEntryRequest/2,
dec_RegistryMonitorEntryIndication/2,
dec_RegistryAllocateHandleRequest/2,
dec_RegistryAllocateHandleResponse/2,
dec_RegistryResponse/2,
dec_ConductorAssignIndication/2,
dec_ConductorReleaseIndication/2,
dec_ConductorPermissionAskIndication/2,
dec_ConductorPermissionGrantIndication/2,
dec_ConferenceTimeRemainingIndication/2,
dec_ConferenceTimeInquireIndication/2,
dec_ConferenceTimeExtendIndication/2,
dec_ConferenceAssistanceIndication/2,
dec_TextMessageIndication/2,
dec_RosterRefreshRequest/2,
dec_FunctionNotSupportedResponse/2,
dec_NonStandardPDU/2,
dec_ConnectData/2,
dec_ConnectGCCPDU/2,
dec_GCCPDU/2,
dec_RequestPDU/2,
dec_ResponsePDU/2,
dec_IndicationPDU/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data0) ->
try
   {Data,Rest} = ber_decode_nif(Data0),
   Result = decode_disp(Type, Data),
   {ok,Result,Rest}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ChannelID', Data) -> enc_ChannelID(Data);
encode_disp('StaticChannelID', Data) -> enc_StaticChannelID(Data);
encode_disp('DynamicChannelID', Data) -> enc_DynamicChannelID(Data);
encode_disp('UserID', Data) -> enc_UserID(Data);
encode_disp('TokenID', Data) -> enc_TokenID(Data);
encode_disp('StaticTokenID', Data) -> enc_StaticTokenID(Data);
encode_disp('DynamicTokenID', Data) -> enc_DynamicTokenID(Data);
encode_disp('Time', Data) -> enc_Time(Data);
encode_disp('Handle', Data) -> enc_Handle(Data);
encode_disp('H221NonStandardIdentifier', Data) -> enc_H221NonStandardIdentifier(Data);
encode_disp('Key', Data) -> enc_Key(Data);
encode_disp('NonStandardParameter', Data) -> enc_NonStandardParameter(Data);
encode_disp('TextString', Data) -> enc_TextString(Data);
encode_disp('SimpleTextString', Data) -> enc_SimpleTextString(Data);
encode_disp('SimpleNumericString', Data) -> enc_SimpleNumericString(Data);
encode_disp('DiallingString', Data) -> enc_DiallingString(Data);
encode_disp('SubAddressString', Data) -> enc_SubAddressString(Data);
encode_disp('ExtraDiallingString', Data) -> enc_ExtraDiallingString(Data);
encode_disp('UserData', Data) -> enc_UserData(Data);
encode_disp('Password', Data) -> enc_Password(Data);
encode_disp('PasswordSelector', Data) -> enc_PasswordSelector(Data);
encode_disp('ChallengeResponseItem', Data) -> enc_ChallengeResponseItem(Data);
encode_disp('ChallengeResponseAlgorithm', Data) -> enc_ChallengeResponseAlgorithm(Data);
encode_disp('ChallengeItem', Data) -> enc_ChallengeItem(Data);
encode_disp('ChallengeRequest', Data) -> enc_ChallengeRequest(Data);
encode_disp('ChallengeResponse', Data) -> enc_ChallengeResponse(Data);
encode_disp('PasswordChallengeRequestResponse', Data) -> enc_PasswordChallengeRequestResponse(Data);
encode_disp('ConferenceName', Data) -> enc_ConferenceName(Data);
encode_disp('ConferenceNameSelector', Data) -> enc_ConferenceNameSelector(Data);
encode_disp('ConferenceNameModifier', Data) -> enc_ConferenceNameModifier(Data);
encode_disp('Privilege', Data) -> enc_Privilege(Data);
encode_disp('TerminationMethod', Data) -> enc_TerminationMethod(Data);
encode_disp('ConferencePriorityScheme', Data) -> enc_ConferencePriorityScheme(Data);
encode_disp('ConferencePriority', Data) -> enc_ConferencePriority(Data);
encode_disp('NodeCategory', Data) -> enc_NodeCategory(Data);
encode_disp('ConferenceMode', Data) -> enc_ConferenceMode(Data);
encode_disp('NetworkAddress', Data) -> enc_NetworkAddress(Data);
encode_disp('MediaList', Data) -> enc_MediaList(Data);
encode_disp('ChannelAggregationMethod', Data) -> enc_ChannelAggregationMethod(Data);
encode_disp('Profile', Data) -> enc_Profile(Data);
encode_disp('ExtendedE164NetworkAddress', Data) -> enc_ExtendedE164NetworkAddress(Data);
encode_disp('TransportAddress', Data) -> enc_TransportAddress(Data);
encode_disp('GSTNConnection', Data) -> enc_GSTNConnection(Data);
encode_disp('ISDNConnection', Data) -> enc_ISDNConnection(Data);
encode_disp('CSDNConnection', Data) -> enc_CSDNConnection(Data);
encode_disp('PSDNConnection', Data) -> enc_PSDNConnection(Data);
encode_disp('ATMConnection', Data) -> enc_ATMConnection(Data);
encode_disp('NetworkConnection', Data) -> enc_NetworkConnection(Data);
encode_disp('NetworkAddressV2', Data) -> enc_NetworkAddressV2(Data);
encode_disp('NodeType', Data) -> enc_NodeType(Data);
encode_disp('NodeProperties', Data) -> enc_NodeProperties(Data);
encode_disp('AsymmetryIndicator', Data) -> enc_AsymmetryIndicator(Data);
encode_disp('AlternativeNodeID', Data) -> enc_AlternativeNodeID(Data);
encode_disp('ConferenceDescriptor', Data) -> enc_ConferenceDescriptor(Data);
encode_disp('NodeRecord', Data) -> enc_NodeRecord(Data);
encode_disp('SessionKey', Data) -> enc_SessionKey(Data);
encode_disp('ChannelType', Data) -> enc_ChannelType(Data);
encode_disp('ApplicationRecord', Data) -> enc_ApplicationRecord(Data);
encode_disp('CapabilityID', Data) -> enc_CapabilityID(Data);
encode_disp('CapabilityClass', Data) -> enc_CapabilityClass(Data);
encode_disp('EntityID', Data) -> enc_EntityID(Data);
encode_disp('ApplicationInvokeSpecifier', Data) -> enc_ApplicationInvokeSpecifier(Data);
encode_disp('RegistryKey', Data) -> enc_RegistryKey(Data);
encode_disp('RegistryItem', Data) -> enc_RegistryItem(Data);
encode_disp('RegistryEntryOwner', Data) -> enc_RegistryEntryOwner(Data);
encode_disp('RegistryModificationRights', Data) -> enc_RegistryModificationRights(Data);
encode_disp('UserIDIndication', Data) -> enc_UserIDIndication(Data);
encode_disp('ConferenceCreateRequest', Data) -> enc_ConferenceCreateRequest(Data);
encode_disp('ConferenceCreateResponse', Data) -> enc_ConferenceCreateResponse(Data);
encode_disp('ConferenceQueryRequest', Data) -> enc_ConferenceQueryRequest(Data);
encode_disp('ConferenceQueryResponse', Data) -> enc_ConferenceQueryResponse(Data);
encode_disp('ConferenceJoinRequest', Data) -> enc_ConferenceJoinRequest(Data);
encode_disp('ConferenceJoinResponse', Data) -> enc_ConferenceJoinResponse(Data);
encode_disp('ConferenceInviteRequest', Data) -> enc_ConferenceInviteRequest(Data);
encode_disp('ConferenceInviteResponse', Data) -> enc_ConferenceInviteResponse(Data);
encode_disp('ConferenceAddRequest', Data) -> enc_ConferenceAddRequest(Data);
encode_disp('ConferenceAddResponse', Data) -> enc_ConferenceAddResponse(Data);
encode_disp('ConferenceLockRequest', Data) -> enc_ConferenceLockRequest(Data);
encode_disp('ConferenceLockResponse', Data) -> enc_ConferenceLockResponse(Data);
encode_disp('ConferenceLockIndication', Data) -> enc_ConferenceLockIndication(Data);
encode_disp('ConferenceUnlockRequest', Data) -> enc_ConferenceUnlockRequest(Data);
encode_disp('ConferenceUnlockResponse', Data) -> enc_ConferenceUnlockResponse(Data);
encode_disp('ConferenceUnlockIndication', Data) -> enc_ConferenceUnlockIndication(Data);
encode_disp('ConferenceTerminateRequest', Data) -> enc_ConferenceTerminateRequest(Data);
encode_disp('ConferenceTerminateResponse', Data) -> enc_ConferenceTerminateResponse(Data);
encode_disp('ConferenceTerminateIndication', Data) -> enc_ConferenceTerminateIndication(Data);
encode_disp('ConferenceEjectUserRequest', Data) -> enc_ConferenceEjectUserRequest(Data);
encode_disp('ConferenceEjectUserResponse', Data) -> enc_ConferenceEjectUserResponse(Data);
encode_disp('ConferenceEjectUserIndication', Data) -> enc_ConferenceEjectUserIndication(Data);
encode_disp('ConferenceTransferRequest', Data) -> enc_ConferenceTransferRequest(Data);
encode_disp('ConferenceTransferResponse', Data) -> enc_ConferenceTransferResponse(Data);
encode_disp('ConferenceTransferIndication', Data) -> enc_ConferenceTransferIndication(Data);
encode_disp('RosterUpdateIndication', Data) -> enc_RosterUpdateIndication(Data);
encode_disp('ApplicationInvokeIndication', Data) -> enc_ApplicationInvokeIndication(Data);
encode_disp('RegistryRegisterChannelRequest', Data) -> enc_RegistryRegisterChannelRequest(Data);
encode_disp('RegistryAssignTokenRequest', Data) -> enc_RegistryAssignTokenRequest(Data);
encode_disp('RegistrySetParameterRequest', Data) -> enc_RegistrySetParameterRequest(Data);
encode_disp('RegistryRetrieveEntryRequest', Data) -> enc_RegistryRetrieveEntryRequest(Data);
encode_disp('RegistryDeleteEntryRequest', Data) -> enc_RegistryDeleteEntryRequest(Data);
encode_disp('RegistryMonitorEntryRequest', Data) -> enc_RegistryMonitorEntryRequest(Data);
encode_disp('RegistryMonitorEntryIndication', Data) -> enc_RegistryMonitorEntryIndication(Data);
encode_disp('RegistryAllocateHandleRequest', Data) -> enc_RegistryAllocateHandleRequest(Data);
encode_disp('RegistryAllocateHandleResponse', Data) -> enc_RegistryAllocateHandleResponse(Data);
encode_disp('RegistryResponse', Data) -> enc_RegistryResponse(Data);
encode_disp('ConductorAssignIndication', Data) -> enc_ConductorAssignIndication(Data);
encode_disp('ConductorReleaseIndication', Data) -> enc_ConductorReleaseIndication(Data);
encode_disp('ConductorPermissionAskIndication', Data) -> enc_ConductorPermissionAskIndication(Data);
encode_disp('ConductorPermissionGrantIndication', Data) -> enc_ConductorPermissionGrantIndication(Data);
encode_disp('ConferenceTimeRemainingIndication', Data) -> enc_ConferenceTimeRemainingIndication(Data);
encode_disp('ConferenceTimeInquireIndication', Data) -> enc_ConferenceTimeInquireIndication(Data);
encode_disp('ConferenceTimeExtendIndication', Data) -> enc_ConferenceTimeExtendIndication(Data);
encode_disp('ConferenceAssistanceIndication', Data) -> enc_ConferenceAssistanceIndication(Data);
encode_disp('TextMessageIndication', Data) -> enc_TextMessageIndication(Data);
encode_disp('RosterRefreshRequest', Data) -> enc_RosterRefreshRequest(Data);
encode_disp('FunctionNotSupportedResponse', Data) -> enc_FunctionNotSupportedResponse(Data);
encode_disp('NonStandardPDU', Data) -> enc_NonStandardPDU(Data);
encode_disp('ConnectData', Data) -> enc_ConnectData(Data);
encode_disp('ConnectGCCPDU', Data) -> enc_ConnectGCCPDU(Data);
encode_disp('GCCPDU', Data) -> enc_GCCPDU(Data);
encode_disp('RequestPDU', Data) -> enc_RequestPDU(Data);
encode_disp('ResponsePDU', Data) -> enc_ResponsePDU(Data);
encode_disp('IndicationPDU', Data) -> enc_IndicationPDU(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ChannelID', Data) -> dec_ChannelID(Data);
decode_disp('StaticChannelID', Data) -> dec_StaticChannelID(Data);
decode_disp('DynamicChannelID', Data) -> dec_DynamicChannelID(Data);
decode_disp('UserID', Data) -> dec_UserID(Data);
decode_disp('TokenID', Data) -> dec_TokenID(Data);
decode_disp('StaticTokenID', Data) -> dec_StaticTokenID(Data);
decode_disp('DynamicTokenID', Data) -> dec_DynamicTokenID(Data);
decode_disp('Time', Data) -> dec_Time(Data);
decode_disp('Handle', Data) -> dec_Handle(Data);
decode_disp('H221NonStandardIdentifier', Data) -> dec_H221NonStandardIdentifier(Data);
decode_disp('Key', Data) -> dec_Key(Data);
decode_disp('NonStandardParameter', Data) -> dec_NonStandardParameter(Data);
decode_disp('TextString', Data) -> dec_TextString(Data);
decode_disp('SimpleTextString', Data) -> dec_SimpleTextString(Data);
decode_disp('SimpleNumericString', Data) -> dec_SimpleNumericString(Data);
decode_disp('DiallingString', Data) -> dec_DiallingString(Data);
decode_disp('SubAddressString', Data) -> dec_SubAddressString(Data);
decode_disp('ExtraDiallingString', Data) -> dec_ExtraDiallingString(Data);
decode_disp('UserData', Data) -> dec_UserData(Data);
decode_disp('Password', Data) -> dec_Password(Data);
decode_disp('PasswordSelector', Data) -> dec_PasswordSelector(Data);
decode_disp('ChallengeResponseItem', Data) -> dec_ChallengeResponseItem(Data);
decode_disp('ChallengeResponseAlgorithm', Data) -> dec_ChallengeResponseAlgorithm(Data);
decode_disp('ChallengeItem', Data) -> dec_ChallengeItem(Data);
decode_disp('ChallengeRequest', Data) -> dec_ChallengeRequest(Data);
decode_disp('ChallengeResponse', Data) -> dec_ChallengeResponse(Data);
decode_disp('PasswordChallengeRequestResponse', Data) -> dec_PasswordChallengeRequestResponse(Data);
decode_disp('ConferenceName', Data) -> dec_ConferenceName(Data);
decode_disp('ConferenceNameSelector', Data) -> dec_ConferenceNameSelector(Data);
decode_disp('ConferenceNameModifier', Data) -> dec_ConferenceNameModifier(Data);
decode_disp('Privilege', Data) -> dec_Privilege(Data);
decode_disp('TerminationMethod', Data) -> dec_TerminationMethod(Data);
decode_disp('ConferencePriorityScheme', Data) -> dec_ConferencePriorityScheme(Data);
decode_disp('ConferencePriority', Data) -> dec_ConferencePriority(Data);
decode_disp('NodeCategory', Data) -> dec_NodeCategory(Data);
decode_disp('ConferenceMode', Data) -> dec_ConferenceMode(Data);
decode_disp('NetworkAddress', Data) -> dec_NetworkAddress(Data);
decode_disp('MediaList', Data) -> dec_MediaList(Data);
decode_disp('ChannelAggregationMethod', Data) -> dec_ChannelAggregationMethod(Data);
decode_disp('Profile', Data) -> dec_Profile(Data);
decode_disp('ExtendedE164NetworkAddress', Data) -> dec_ExtendedE164NetworkAddress(Data);
decode_disp('TransportAddress', Data) -> dec_TransportAddress(Data);
decode_disp('GSTNConnection', Data) -> dec_GSTNConnection(Data);
decode_disp('ISDNConnection', Data) -> dec_ISDNConnection(Data);
decode_disp('CSDNConnection', Data) -> dec_CSDNConnection(Data);
decode_disp('PSDNConnection', Data) -> dec_PSDNConnection(Data);
decode_disp('ATMConnection', Data) -> dec_ATMConnection(Data);
decode_disp('NetworkConnection', Data) -> dec_NetworkConnection(Data);
decode_disp('NetworkAddressV2', Data) -> dec_NetworkAddressV2(Data);
decode_disp('NodeType', Data) -> dec_NodeType(Data);
decode_disp('NodeProperties', Data) -> dec_NodeProperties(Data);
decode_disp('AsymmetryIndicator', Data) -> dec_AsymmetryIndicator(Data);
decode_disp('AlternativeNodeID', Data) -> dec_AlternativeNodeID(Data);
decode_disp('ConferenceDescriptor', Data) -> dec_ConferenceDescriptor(Data);
decode_disp('NodeRecord', Data) -> dec_NodeRecord(Data);
decode_disp('SessionKey', Data) -> dec_SessionKey(Data);
decode_disp('ChannelType', Data) -> dec_ChannelType(Data);
decode_disp('ApplicationRecord', Data) -> dec_ApplicationRecord(Data);
decode_disp('CapabilityID', Data) -> dec_CapabilityID(Data);
decode_disp('CapabilityClass', Data) -> dec_CapabilityClass(Data);
decode_disp('EntityID', Data) -> dec_EntityID(Data);
decode_disp('ApplicationInvokeSpecifier', Data) -> dec_ApplicationInvokeSpecifier(Data);
decode_disp('RegistryKey', Data) -> dec_RegistryKey(Data);
decode_disp('RegistryItem', Data) -> dec_RegistryItem(Data);
decode_disp('RegistryEntryOwner', Data) -> dec_RegistryEntryOwner(Data);
decode_disp('RegistryModificationRights', Data) -> dec_RegistryModificationRights(Data);
decode_disp('UserIDIndication', Data) -> dec_UserIDIndication(Data);
decode_disp('ConferenceCreateRequest', Data) -> dec_ConferenceCreateRequest(Data);
decode_disp('ConferenceCreateResponse', Data) -> dec_ConferenceCreateResponse(Data);
decode_disp('ConferenceQueryRequest', Data) -> dec_ConferenceQueryRequest(Data);
decode_disp('ConferenceQueryResponse', Data) -> dec_ConferenceQueryResponse(Data);
decode_disp('ConferenceJoinRequest', Data) -> dec_ConferenceJoinRequest(Data);
decode_disp('ConferenceJoinResponse', Data) -> dec_ConferenceJoinResponse(Data);
decode_disp('ConferenceInviteRequest', Data) -> dec_ConferenceInviteRequest(Data);
decode_disp('ConferenceInviteResponse', Data) -> dec_ConferenceInviteResponse(Data);
decode_disp('ConferenceAddRequest', Data) -> dec_ConferenceAddRequest(Data);
decode_disp('ConferenceAddResponse', Data) -> dec_ConferenceAddResponse(Data);
decode_disp('ConferenceLockRequest', Data) -> dec_ConferenceLockRequest(Data);
decode_disp('ConferenceLockResponse', Data) -> dec_ConferenceLockResponse(Data);
decode_disp('ConferenceLockIndication', Data) -> dec_ConferenceLockIndication(Data);
decode_disp('ConferenceUnlockRequest', Data) -> dec_ConferenceUnlockRequest(Data);
decode_disp('ConferenceUnlockResponse', Data) -> dec_ConferenceUnlockResponse(Data);
decode_disp('ConferenceUnlockIndication', Data) -> dec_ConferenceUnlockIndication(Data);
decode_disp('ConferenceTerminateRequest', Data) -> dec_ConferenceTerminateRequest(Data);
decode_disp('ConferenceTerminateResponse', Data) -> dec_ConferenceTerminateResponse(Data);
decode_disp('ConferenceTerminateIndication', Data) -> dec_ConferenceTerminateIndication(Data);
decode_disp('ConferenceEjectUserRequest', Data) -> dec_ConferenceEjectUserRequest(Data);
decode_disp('ConferenceEjectUserResponse', Data) -> dec_ConferenceEjectUserResponse(Data);
decode_disp('ConferenceEjectUserIndication', Data) -> dec_ConferenceEjectUserIndication(Data);
decode_disp('ConferenceTransferRequest', Data) -> dec_ConferenceTransferRequest(Data);
decode_disp('ConferenceTransferResponse', Data) -> dec_ConferenceTransferResponse(Data);
decode_disp('ConferenceTransferIndication', Data) -> dec_ConferenceTransferIndication(Data);
decode_disp('RosterUpdateIndication', Data) -> dec_RosterUpdateIndication(Data);
decode_disp('ApplicationInvokeIndication', Data) -> dec_ApplicationInvokeIndication(Data);
decode_disp('RegistryRegisterChannelRequest', Data) -> dec_RegistryRegisterChannelRequest(Data);
decode_disp('RegistryAssignTokenRequest', Data) -> dec_RegistryAssignTokenRequest(Data);
decode_disp('RegistrySetParameterRequest', Data) -> dec_RegistrySetParameterRequest(Data);
decode_disp('RegistryRetrieveEntryRequest', Data) -> dec_RegistryRetrieveEntryRequest(Data);
decode_disp('RegistryDeleteEntryRequest', Data) -> dec_RegistryDeleteEntryRequest(Data);
decode_disp('RegistryMonitorEntryRequest', Data) -> dec_RegistryMonitorEntryRequest(Data);
decode_disp('RegistryMonitorEntryIndication', Data) -> dec_RegistryMonitorEntryIndication(Data);
decode_disp('RegistryAllocateHandleRequest', Data) -> dec_RegistryAllocateHandleRequest(Data);
decode_disp('RegistryAllocateHandleResponse', Data) -> dec_RegistryAllocateHandleResponse(Data);
decode_disp('RegistryResponse', Data) -> dec_RegistryResponse(Data);
decode_disp('ConductorAssignIndication', Data) -> dec_ConductorAssignIndication(Data);
decode_disp('ConductorReleaseIndication', Data) -> dec_ConductorReleaseIndication(Data);
decode_disp('ConductorPermissionAskIndication', Data) -> dec_ConductorPermissionAskIndication(Data);
decode_disp('ConductorPermissionGrantIndication', Data) -> dec_ConductorPermissionGrantIndication(Data);
decode_disp('ConferenceTimeRemainingIndication', Data) -> dec_ConferenceTimeRemainingIndication(Data);
decode_disp('ConferenceTimeInquireIndication', Data) -> dec_ConferenceTimeInquireIndication(Data);
decode_disp('ConferenceTimeExtendIndication', Data) -> dec_ConferenceTimeExtendIndication(Data);
decode_disp('ConferenceAssistanceIndication', Data) -> dec_ConferenceAssistanceIndication(Data);
decode_disp('TextMessageIndication', Data) -> dec_TextMessageIndication(Data);
decode_disp('RosterRefreshRequest', Data) -> dec_RosterRefreshRequest(Data);
decode_disp('FunctionNotSupportedResponse', Data) -> dec_FunctionNotSupportedResponse(Data);
decode_disp('NonStandardPDU', Data) -> dec_NonStandardPDU(Data);
decode_disp('ConnectData', Data) -> dec_ConnectData(Data);
decode_disp('ConnectGCCPDU', Data) -> dec_ConnectGCCPDU(Data);
decode_disp('GCCPDU', Data) -> dec_GCCPDU(Data);
decode_disp('RequestPDU', Data) -> dec_RequestPDU(Data);
decode_disp('ResponsePDU', Data) -> dec_ResponsePDU(Data);
decode_disp('IndicationPDU', Data) -> dec_IndicationPDU(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  ChannelID
%%================================
enc_ChannelID(Val) ->
    enc_ChannelID(Val, [<<2>>]).

enc_ChannelID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_ChannelID(Tlv) ->
   dec_ChannelID(Tlv, [2]).

dec_ChannelID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  StaticChannelID
%%================================
enc_StaticChannelID(Val) ->
    enc_StaticChannelID(Val, [<<2>>]).

enc_StaticChannelID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_StaticChannelID(Tlv) ->
   dec_StaticChannelID(Tlv, [2]).

dec_StaticChannelID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 1000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DynamicChannelID
%%================================
enc_DynamicChannelID(Val) ->
    enc_DynamicChannelID(Val, [<<2>>]).

enc_DynamicChannelID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_DynamicChannelID(Tlv) ->
   dec_DynamicChannelID(Tlv, [2]).

dec_DynamicChannelID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UserID
%%================================
enc_UserID(Val) ->
    enc_UserID(Val, [<<2>>]).

enc_UserID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_UserID(Tlv) ->
   dec_UserID(Tlv, [2]).

dec_UserID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TokenID
%%================================
enc_TokenID(Val) ->
    enc_TokenID(Val, [<<2>>]).

enc_TokenID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_TokenID(Tlv) ->
   dec_TokenID(Tlv, [2]).

dec_TokenID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  StaticTokenID
%%================================
enc_StaticTokenID(Val) ->
    enc_StaticTokenID(Val, [<<2>>]).

enc_StaticTokenID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_StaticTokenID(Tlv) ->
   dec_StaticTokenID(Tlv, [2]).

dec_StaticTokenID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DynamicTokenID
%%================================
enc_DynamicTokenID(Val) ->
    enc_DynamicTokenID(Val, [<<2>>]).

enc_DynamicTokenID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_DynamicTokenID(Tlv) ->
   dec_DynamicTokenID(Tlv, [2]).

dec_DynamicTokenID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 16384 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Time
%%================================
enc_Time(Val) ->
    enc_Time(Val, [<<2>>]).

enc_Time(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Time(Tlv) ->
   dec_Time(Tlv, [2]).

dec_Time(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Handle
%%================================
enc_Handle(Val) ->
    enc_Handle(Val, [<<2>>]).

enc_Handle(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Handle(Tlv) ->
   dec_Handle(Tlv, [2]).

dec_Handle(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  H221NonStandardIdentifier
%%================================
enc_H221NonStandardIdentifier(Val) ->
    enc_H221NonStandardIdentifier(Val, [<<4>>]).

enc_H221NonStandardIdentifier(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_H221NonStandardIdentifier(Tlv) ->
   dec_H221NonStandardIdentifier(Tlv, [4]).

dec_H221NonStandardIdentifier(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 4 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Key
%%================================
enc_Key(Val) ->
    enc_Key(Val, []).

enc_Key(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      object ->
         encode_object_identifier(element(2,Val), [<<128>>]);
      h221NonStandard ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Key(Tlv) ->
   dec_Key(Tlv, []).

dec_Key(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'object'
    {131072, V1} -> 
        {object, decode_object_identifier(V1, [])};


%% 'h221NonStandard'
    {131073, V1} -> 
        {h221NonStandard, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 4 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  NonStandardParameter
%%================================
enc_NonStandardParameter(Val) ->
    enc_NonStandardParameter(Val, [<<48>>]).

enc_NonStandardParameter(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute data(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_NonStandardParameter(Tlv) ->
   dec_NonStandardParameter(Tlv, [16]).

dec_NonStandardParameter(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute data(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'NonStandardParameter',Term1,Term2},
Res1.


%%================================
%%  TextString
%%================================
enc_TextString(Val) ->
    enc_TextString(Val, [<<30>>]).

enc_TextString(Val, TagIn) ->
encode_BMP_string(Val, TagIn).


dec_TextString(Tlv) ->
   dec_TextString(Tlv, [30]).

dec_TextString(Tlv, TagIn) ->
begin
Val1 = decode_BMP_string(Tlv, TagIn),
C1 = length(Val1),
if 0 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SimpleTextString
%%================================
enc_SimpleTextString(Val) ->
    enc_SimpleTextString(Val, [<<30>>]).

enc_SimpleTextString(Val, TagIn) ->
encode_BMP_string(Val, TagIn).


dec_SimpleTextString(Tlv) ->
   dec_SimpleTextString(Tlv, [30]).

dec_SimpleTextString(Tlv, TagIn) ->
begin
Val1 = decode_BMP_string(Tlv, TagIn),
C1 = length(Val1),
if 0 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SimpleNumericString
%%================================
enc_SimpleNumericString(Val) ->
    enc_SimpleNumericString(Val, [<<18>>]).

enc_SimpleNumericString(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_SimpleNumericString(Tlv) ->
   dec_SimpleNumericString(Tlv, [18]).

dec_SimpleNumericString(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DiallingString
%%================================
enc_DiallingString(Val) ->
    enc_DiallingString(Val, [<<18>>]).

enc_DiallingString(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_DiallingString(Tlv) ->
   dec_DiallingString(Tlv, [18]).

dec_DiallingString(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 16 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SubAddressString
%%================================
enc_SubAddressString(Val) ->
    enc_SubAddressString(Val, [<<18>>]).

enc_SubAddressString(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_SubAddressString(Tlv) ->
   dec_SubAddressString(Tlv, [18]).

dec_SubAddressString(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 40 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ExtraDiallingString
%%================================
enc_ExtraDiallingString(Val) ->
    enc_ExtraDiallingString(Val, [<<30>>]).

enc_ExtraDiallingString(Val, TagIn) ->
encode_BMP_string(Val, TagIn).


dec_ExtraDiallingString(Tlv) ->
   dec_ExtraDiallingString(Tlv, [30]).

dec_ExtraDiallingString(Tlv, TagIn) ->
begin
Val1 = decode_BMP_string(Tlv, TagIn),
C1 = length(Val1),
if 1 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UserData
%%================================
enc_UserData(Val) ->
    enc_UserData(Val, [<<49>>]).

enc_UserData(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UserData_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UserData_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UserData_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UserData_SETOF'(H, [<<48>>]),
   'enc_UserData_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UserData_SETOF
%%================================
enc_UserData_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute value(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_UserData(Tlv) ->
   dec_UserData(Tlv, [17]).

dec_UserData(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UserData_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_UserData_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute value(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'UserData_SETOF',Term1,Term2},
Res1.


%%================================
%%  Password
%%================================
enc_Password(Val) ->
    enc_Password(Val, [<<48>>]).

enc_Password(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute numeric(1) with type NumericString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute text(2) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute unicodeText(3) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_Password(Tlv) ->
   dec_Password(Tlv, [16]).

dec_Password(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numeric(1) with type NumericString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute text(2) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_BMP_string(V2, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute unicodeText(3) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_BMP_string(V3, []),
C3 = length(Val3),
if 0 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'Password',Term1,Term2,Term3},
Res1.


%%================================
%%  PasswordSelector
%%================================
enc_PasswordSelector(Val) ->
    enc_PasswordSelector(Val, []).

enc_PasswordSelector(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      numeric ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      text ->
         encode_BMP_string(element(2,Val), [<<129>>]);
      unicodeText ->
         encode_BMP_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_PasswordSelector(Tlv) ->
   dec_PasswordSelector(Tlv, []).

dec_PasswordSelector(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'numeric'
    {131072, V1} -> 
        {numeric, begin
Val1 = decode_restricted_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'text'
    {131073, V1} -> 
        {text, begin
Val2 = decode_BMP_string(V1, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'unicodeText'
    {131074, V1} -> 
        {unicodeText, begin
Val3 = decode_BMP_string(V1, []),
C3 = length(Val3),
if 0 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ChallengeResponseItem
%%================================
enc_ChallengeResponseItem(Val) ->
    enc_ChallengeResponseItem(Val, []).

enc_ChallengeResponseItem(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      passwordString ->
         'enc_PasswordSelector'(element(2,Val), [<<160>>]);
      responseData ->
         'enc_UserData'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ChallengeResponseItem(Tlv) ->
   dec_ChallengeResponseItem(Tlv, []).

dec_ChallengeResponseItem(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'passwordString'
    {131072, V1} -> 
        {passwordString, 'dec_PasswordSelector'(V1, [])};


%% 'responseData'
    {131073, V1} -> 
        {responseData, 'dec_UserData'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ChallengeResponseAlgorithm
%%================================
enc_ChallengeResponseAlgorithm(Val) ->
    enc_ChallengeResponseAlgorithm(Val, []).

enc_ChallengeResponseAlgorithm(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      passwordInTheClear ->
         encode_null(element(2,Val), [<<128>>]);
      nonStandardAlgorithm ->
         'enc_NonStandardParameter'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ChallengeResponseAlgorithm(Tlv) ->
   dec_ChallengeResponseAlgorithm(Tlv, []).

dec_ChallengeResponseAlgorithm(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'passwordInTheClear'
    {131072, V1} -> 
        {passwordInTheClear, decode_null(V1, [])};


%% 'nonStandardAlgorithm'
    {131073, V1} -> 
        {nonStandardAlgorithm, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ChallengeItem
%%================================
enc_ChallengeItem(Val) ->
    enc_ChallengeItem(Val, [<<48>>]).

enc_ChallengeItem(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute responseAlgorithm(1)   External GCC-PROTOCOL:ChallengeResponseAlgorithm
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ChallengeResponseAlgorithm'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute challengeData(2)   External GCC-PROTOCOL:UserData
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UserData'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChallengeItem(Tlv) ->
   dec_ChallengeItem(Tlv, [16]).

dec_ChallengeItem(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute responseAlgorithm(1)   External GCC-PROTOCOL:ChallengeResponseAlgorithm
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ChallengeResponseAlgorithm'(V1, [131072]),

%%-------------------------------------------------
%% attribute challengeData(2)   External GCC-PROTOCOL:UserData
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UserData'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ChallengeItem',Term1,Term2},
Res1.


%%================================
%%  ChallengeRequest
%%================================
enc_ChallengeRequest(Val) ->
    enc_ChallengeRequest(Val, [<<48>>]).

enc_ChallengeRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute challengeTag(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute challengeSet(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ChallengeRequest_challengeSet'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChallengeRequest_challengeSet
%%================================
enc_ChallengeRequest_challengeSet(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChallengeRequest_challengeSet_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChallengeRequest_challengeSet_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChallengeRequest_challengeSet_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChallengeItem'(H, [<<48>>]),
   'enc_ChallengeRequest_challengeSet_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChallengeRequest(Tlv) ->
   dec_ChallengeRequest(Tlv, [16]).

dec_ChallengeRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute challengeTag(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute challengeSet(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ChallengeRequest_challengeSet'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ChallengeRequest',Term1,Term2},
Res1.
'dec_ChallengeRequest_challengeSet'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ChallengeItem'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ChallengeResponse
%%================================
enc_ChallengeResponse(Val) ->
    enc_ChallengeResponse(Val, [<<48>>]).

enc_ChallengeResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute challengeTag(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute responseAlgorithm(2)   External GCC-PROTOCOL:ChallengeResponseAlgorithm
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ChallengeResponseAlgorithm'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute responseItem(3)   External GCC-PROTOCOL:ChallengeResponseItem
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChallengeResponseItem'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChallengeResponse(Tlv) ->
   dec_ChallengeResponse(Tlv, [16]).

dec_ChallengeResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute challengeTag(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute responseAlgorithm(2)   External GCC-PROTOCOL:ChallengeResponseAlgorithm
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ChallengeResponseAlgorithm'(V2, [131073]),

%%-------------------------------------------------
%% attribute responseItem(3)   External GCC-PROTOCOL:ChallengeResponseItem
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ChallengeResponseItem'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ChallengeResponse',Term1,Term2,Term3},
Res1.


%%================================
%%  PasswordChallengeRequestResponse
%%================================
enc_PasswordChallengeRequestResponse(Val) ->
    enc_PasswordChallengeRequestResponse(Val, []).

enc_PasswordChallengeRequestResponse(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      passwordInTheClear ->
         'enc_PasswordSelector'(element(2,Val), [<<160>>]);
      challengeRequestResponse ->
         'enc_PasswordChallengeRequestResponse_challengeRequestResponse'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  PasswordChallengeRequestResponse_challengeRequestResponse
%%================================
enc_PasswordChallengeRequestResponse_challengeRequestResponse(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute challengeRequest(1)   External GCC-PROTOCOL:ChallengeRequest OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ChallengeRequest'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute challengeResponse(2)   External GCC-PROTOCOL:ChallengeResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ChallengeResponse'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_PasswordChallengeRequestResponse(Tlv) ->
   dec_PasswordChallengeRequestResponse(Tlv, []).

dec_PasswordChallengeRequestResponse(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'passwordInTheClear'
    {131072, V1} -> 
        {passwordInTheClear, 'dec_PasswordSelector'(V1, [])};


%% 'challengeRequestResponse'
    {131073, V1} -> 
        {challengeRequestResponse, 'dec_PasswordChallengeRequestResponse_challengeRequestResponse'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_PasswordChallengeRequestResponse_challengeRequestResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute challengeRequest(1)   External GCC-PROTOCOL:ChallengeRequest OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_ChallengeRequest'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute challengeResponse(2)   External GCC-PROTOCOL:ChallengeResponse OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ChallengeResponse'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'PasswordChallengeRequestResponse_challengeRequestResponse',Term1,Term2},
Res1.


%%================================
%%  ConferenceName
%%================================
enc_ConferenceName(Val) ->
    enc_ConferenceName(Val, [<<48>>]).

enc_ConferenceName(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute numeric(1) with type NumericString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute text(2) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute unicodeText(3) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceName(Tlv) ->
   dec_ConferenceName(Tlv, [16]).

dec_ConferenceName(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numeric(1) with type NumericString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute text(2) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_BMP_string(V2, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute unicodeText(3) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_BMP_string(V3, []),
C3 = length(Val3),
if 0 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceName',Term1,Term2,Term3},
Res1.


%%================================
%%  ConferenceNameSelector
%%================================
enc_ConferenceNameSelector(Val) ->
    enc_ConferenceNameSelector(Val, []).

enc_ConferenceNameSelector(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      numeric ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      text ->
         encode_BMP_string(element(2,Val), [<<129>>]);
      unicodeText ->
         encode_BMP_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConferenceNameSelector(Tlv) ->
   dec_ConferenceNameSelector(Tlv, []).

dec_ConferenceNameSelector(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'numeric'
    {131072, V1} -> 
        {numeric, begin
Val1 = decode_restricted_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'text'
    {131073, V1} -> 
        {text, begin
Val2 = decode_BMP_string(V1, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'unicodeText'
    {131074, V1} -> 
        {unicodeText, begin
Val3 = decode_BMP_string(V1, []),
C3 = length(Val3),
if 0 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ConferenceNameModifier
%%================================
enc_ConferenceNameModifier(Val) ->
    enc_ConferenceNameModifier(Val, [<<18>>]).

enc_ConferenceNameModifier(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_ConferenceNameModifier(Tlv) ->
   dec_ConferenceNameModifier(Tlv, [18]).

dec_ConferenceNameModifier(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Privilege
%%================================
enc_Privilege(Val) ->
    enc_Privilege(Val, [<<10>>]).

enc_Privilege(Val, TagIn) ->
case Val of
terminate -> encode_tags(TagIn, [0], 1);
ejectUser -> encode_tags(TagIn, [1], 1);
add -> encode_tags(TagIn, [2], 1);
lockUnlock -> encode_tags(TagIn, [3], 1);
transfer -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_Privilege(Tlv) ->
   dec_Privilege(Tlv, [10]).

dec_Privilege(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TerminationMethod
%%================================
enc_TerminationMethod(Val) ->
    enc_TerminationMethod(Val, [<<10>>]).

enc_TerminationMethod(Val, TagIn) ->
case Val of
automatic -> encode_tags(TagIn, [0], 1);
manual -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_TerminationMethod(Tlv) ->
   dec_TerminationMethod(Tlv, [10]).

dec_TerminationMethod(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> automatic;
1 -> manual;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ConferencePriorityScheme
%%================================
enc_ConferencePriorityScheme(Val) ->
    enc_ConferencePriorityScheme(Val, []).

enc_ConferencePriorityScheme(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      nonStandardScheme ->
         'enc_NonStandardParameter'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConferencePriorityScheme(Tlv) ->
   dec_ConferencePriorityScheme(Tlv, []).

dec_ConferencePriorityScheme(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'nonStandardScheme'
    {131072, V1} -> 
        {nonStandardScheme, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ConferencePriority
%%================================
enc_ConferencePriority(Val) ->
    enc_ConferencePriority(Val, [<<48>>]).

enc_ConferencePriority(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute priority(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute scheme(2)   External GCC-PROTOCOL:ConferencePriorityScheme
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ConferencePriorityScheme'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferencePriority(Tlv) ->
   dec_ConferencePriority(Tlv, [16]).

dec_ConferencePriority(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute priority(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute scheme(2)   External GCC-PROTOCOL:ConferencePriorityScheme
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ConferencePriorityScheme'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferencePriority',Term1,Term2},
Res1.


%%================================
%%  NodeCategory
%%================================
enc_NodeCategory(Val) ->
    enc_NodeCategory(Val, []).

enc_NodeCategory(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      conventional ->
         encode_null(element(2,Val), [<<128>>]);
      counted ->
         encode_null(element(2,Val), [<<129>>]);
      anonymous ->
         encode_null(element(2,Val), [<<130>>]);
      nonStandardCategory ->
         'enc_NonStandardParameter'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_NodeCategory(Tlv) ->
   dec_NodeCategory(Tlv, []).

dec_NodeCategory(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'conventional'
    {131072, V1} -> 
        {conventional, decode_null(V1, [])};


%% 'counted'
    {131073, V1} -> 
        {counted, decode_null(V1, [])};


%% 'anonymous'
    {131074, V1} -> 
        {anonymous, decode_null(V1, [])};


%% 'nonStandardCategory'
    {131075, V1} -> 
        {nonStandardCategory, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ConferenceMode
%%================================
enc_ConferenceMode(Val) ->
    enc_ConferenceMode(Val, []).

enc_ConferenceMode(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'conventional-only' ->
         encode_null(element(2,Val), [<<128>>]);
      'counted-only' ->
         encode_null(element(2,Val), [<<129>>]);
      'anonymous-only' ->
         encode_null(element(2,Val), [<<130>>]);
      'conventional-control' ->
         encode_null(element(2,Val), [<<131>>]);
      'unrestricted-mode' ->
         encode_null(element(2,Val), [<<132>>]);
      'non-standard-mode' ->
         'enc_NonStandardParameter'(element(2,Val), [<<165>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConferenceMode(Tlv) ->
   dec_ConferenceMode(Tlv, []).

dec_ConferenceMode(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'conventional-only'
    {131072, V1} -> 
        {'conventional-only', decode_null(V1, [])};


%% 'counted-only'
    {131073, V1} -> 
        {'counted-only', decode_null(V1, [])};


%% 'anonymous-only'
    {131074, V1} -> 
        {'anonymous-only', decode_null(V1, [])};


%% 'conventional-control'
    {131075, V1} -> 
        {'conventional-control', decode_null(V1, [])};


%% 'unrestricted-mode'
    {131076, V1} -> 
        {'unrestricted-mode', decode_null(V1, [])};


%% 'non-standard-mode'
    {131077, V1} -> 
        {'non-standard-mode', 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  NetworkAddress
%%================================
enc_NetworkAddress(Val) ->
    enc_NetworkAddress(Val, [<<48>>]).

enc_NetworkAddress(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NetworkAddress_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NetworkAddress_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NetworkAddress_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NetworkAddress_SEQOF'(H, []),
   'enc_NetworkAddress_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NetworkAddress_SEQOF
%%================================
enc_NetworkAddress_SEQOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      aggregatedChannel ->
         'enc_NetworkAddress_SEQOF_aggregatedChannel'(element(2,Val), [<<160>>]);
      transportConnection ->
         'enc_NetworkAddress_SEQOF_transportConnection'(element(2,Val), [<<161>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  NetworkAddress_SEQOF_aggregatedChannel
%%================================
enc_NetworkAddress_SEQOF_aggregatedChannel(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute transferModes(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute internationalNumber(2) with type NumericString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute subAddress(3) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extraDialling(4) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute highLayerCompatibility(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NetworkAddress_SEQOF_aggregatedChannel_transferModes
%%================================
enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11,Cindex12,Cindex13,Cindex14,Cindex15,Cindex16,Cindex17,Cindex18} = Val,

%%-------------------------------------------------
%% attribute speech(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute voice-band(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute digital-56k(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute digital-64k(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute digital-128k(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute digital-192k(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute digital-256k(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute digital-320k(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute digital-384k(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

%%-------------------------------------------------
%% attribute digital-512k(10) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes10,EncLen10} = encode_boolean(Cindex10, [<<137>>]),

%%-------------------------------------------------
%% attribute digital-768k(11) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes11,EncLen11} = encode_boolean(Cindex11, [<<138>>]),

%%-------------------------------------------------
%% attribute digital-1152k(12) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes12,EncLen12} = encode_boolean(Cindex12, [<<139>>]),

%%-------------------------------------------------
%% attribute digital-1472k(13) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes13,EncLen13} = encode_boolean(Cindex13, [<<140>>]),

%%-------------------------------------------------
%% attribute digital-1536k(14) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes14,EncLen14} = encode_boolean(Cindex14, [<<141>>]),

%%-------------------------------------------------
%% attribute digital-1920k(15) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes15,EncLen15} = encode_boolean(Cindex15, [<<142>>]),

%%-------------------------------------------------
%% attribute packet-mode(16) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes16,EncLen16} = encode_boolean(Cindex16, [<<143>>]),

%%-------------------------------------------------
%% attribute frame-mode(17) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes17,EncLen17} = encode_boolean(Cindex17, [<<144>>]),

%%-------------------------------------------------
%% attribute atm(18) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes18,EncLen18} = encode_boolean(Cindex18, [<<145>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility
%%================================
enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute telephony3kHz(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute telephony7kHz(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute videotelephony(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute videoconference(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute audiographic(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute audiovisual(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute multimedia(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NetworkAddress_SEQOF_transportConnection
%%================================
enc_NetworkAddress_SEQOF_transportConnection(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nsapAddress(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportSelector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_NetworkAddress(Tlv) ->
   dec_NetworkAddress(Tlv, [16]).

dec_NetworkAddress(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NetworkAddress_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_NetworkAddress_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'aggregatedChannel'
    {131072, V1} -> 
        {aggregatedChannel, 'dec_NetworkAddress_SEQOF_aggregatedChannel'(V1, [])};


%% 'transportConnection'
    {131073, V1} -> 
        {transportConnection, 'dec_NetworkAddress_SEQOF_transportConnection'(V1, [])};


%% 'nonStandard'
    {131074, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_NetworkAddress_SEQOF_aggregatedChannel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute transferModes(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(V1, [131072]),

%%-------------------------------------------------
%% attribute internationalNumber(2) with type NumericString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_restricted_string(V2, [131073]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 16 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute subAddress(3) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_restricted_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 40 ->
binary_to_list(Val2);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extraDialling(4) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_BMP_string(V4, []),
C3 = length(Val3),
if 1 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute highLayerCompatibility(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NetworkAddress_SEQOF_aggregatedChannel',Term1,Term2,Term3,Term4,Term5},
Res1.
'dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute speech(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute voice-band(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute digital-56k(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute digital-64k(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute digital-128k(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute digital-192k(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute digital-256k(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute digital-320k(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute digital-384k(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

%%-------------------------------------------------
%% attribute digital-512k(10) with type BOOLEAN
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = decode_boolean(V10, [131081]),

%%-------------------------------------------------
%% attribute digital-768k(11) with type BOOLEAN
%%-------------------------------------------------
[V11|Tlv12] = Tlv11, 
Term11 = decode_boolean(V11, [131082]),

%%-------------------------------------------------
%% attribute digital-1152k(12) with type BOOLEAN
%%-------------------------------------------------
[V12|Tlv13] = Tlv12, 
Term12 = decode_boolean(V12, [131083]),

%%-------------------------------------------------
%% attribute digital-1472k(13) with type BOOLEAN
%%-------------------------------------------------
[V13|Tlv14] = Tlv13, 
Term13 = decode_boolean(V13, [131084]),

%%-------------------------------------------------
%% attribute digital-1536k(14) with type BOOLEAN
%%-------------------------------------------------
[V14|Tlv15] = Tlv14, 
Term14 = decode_boolean(V14, [131085]),

%%-------------------------------------------------
%% attribute digital-1920k(15) with type BOOLEAN
%%-------------------------------------------------
[V15|Tlv16] = Tlv15, 
Term15 = decode_boolean(V15, [131086]),

%%-------------------------------------------------
%% attribute packet-mode(16) with type BOOLEAN
%%-------------------------------------------------
[V16|Tlv17] = Tlv16, 
Term16 = decode_boolean(V16, [131087]),

%%-------------------------------------------------
%% attribute frame-mode(17) with type BOOLEAN
%%-------------------------------------------------
[V17|Tlv18] = Tlv17, 
Term17 = decode_boolean(V17, [131088]),

%%-------------------------------------------------
%% attribute atm(18) with type BOOLEAN
%%-------------------------------------------------
[V18|Tlv19] = Tlv18, 
Term18 = decode_boolean(V18, [131089]),

case Tlv19 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NetworkAddress_SEQOF_aggregatedChannel_transferModes',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},
Res1.
'dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute telephony3kHz(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute telephony7kHz(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute videotelephony(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute videoconference(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute audiographic(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute audiovisual(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute multimedia(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.
'dec_NetworkAddress_SEQOF_transportConnection'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nsapAddress(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 20 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute transportSelector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'NetworkAddress_SEQOF_transportConnection',Term1,Term2},
Res1.


%%================================
%%  MediaList
%%================================
enc_MediaList(Val) ->
    enc_MediaList(Val, [<<48>>]).

enc_MediaList(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute audio(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute video(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute data(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_MediaList(Tlv) ->
   dec_MediaList(Tlv, [16]).

dec_MediaList(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute audio(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute video(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute data(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'MediaList',Term1,Term2,Term3},
Res1.


%%================================
%%  ChannelAggregationMethod
%%================================
enc_ChannelAggregationMethod(Val) ->
    enc_ChannelAggregationMethod(Val, []).

enc_ChannelAggregationMethod(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      h221 ->
         encode_null(element(2,Val), [<<128>>]);
      h244 ->
         encode_null(element(2,Val), [<<129>>]);
      'iso-iec-13871' ->
         encode_null(element(2,Val), [<<130>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ChannelAggregationMethod(Tlv) ->
   dec_ChannelAggregationMethod(Tlv, []).

dec_ChannelAggregationMethod(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'h221'
    {131072, V1} -> 
        {h221, decode_null(V1, [])};


%% 'h244'
    {131073, V1} -> 
        {h244, decode_null(V1, [])};


%% 'iso-iec-13871'
    {131074, V1} -> 
        {'iso-iec-13871', decode_null(V1, [])};


%% 'nonStandard'
    {131075, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Profile
%%================================
enc_Profile(Val) ->
    enc_Profile(Val, []).

enc_Profile(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      simpleProfile ->
         'enc_Profile_simpleProfile'(element(2,Val), [<<160>>]);
      multimediaProfile ->
         'enc_Profile_multimediaProfile'(element(2,Val), [<<161>>]);
      dsmccDownloadProfile ->
         encode_null(element(2,Val), [<<130>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  Profile_simpleProfile
%%================================
enc_Profile_simpleProfile(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      speech ->
         encode_null(element(2,Val), [<<128>>]);
      'telephony-3kHz' ->
         encode_null(element(2,Val), [<<129>>]);
      'telephony-7kHz' ->
         encode_null(element(2,Val), [<<130>>]);
      'voice-band' ->
         encode_null(element(2,Val), [<<131>>]);
      frameRelay ->
         encode_null(element(2,Val), [<<132>>]);
      't123-pstn-basic' ->
         encode_null(element(2,Val), [<<133>>]);
      't123-psdn-basic' ->
         encode_null(element(2,Val), [<<134>>]);
      't123-b-isdn-basic' ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  Profile_multimediaProfile
%%================================
enc_Profile_multimediaProfile(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute profile(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Profile_multimediaProfile_profile'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute t120Data(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Profile_multimediaProfile_profile
%%================================
enc_Profile_multimediaProfile_profile(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      h310 ->
         encode_null(element(2,Val), [<<128>>]);
      h320 ->
         encode_null(element(2,Val), [<<129>>]);
      h321 ->
         encode_null(element(2,Val), [<<130>>]);
      h322 ->
         encode_null(element(2,Val), [<<131>>]);
      h323 ->
         encode_null(element(2,Val), [<<132>>]);
      h324 ->
         encode_null(element(2,Val), [<<133>>]);
      h324m ->
         encode_null(element(2,Val), [<<134>>]);
      asvd ->
         encode_null(element(2,Val), [<<135>>]);
      dsvd ->
         encode_null(element(2,Val), [<<136>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Profile(Tlv) ->
   dec_Profile(Tlv, []).

dec_Profile(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'simpleProfile'
    {131072, V1} -> 
        {simpleProfile, 'dec_Profile_simpleProfile'(V1, [])};


%% 'multimediaProfile'
    {131073, V1} -> 
        {multimediaProfile, 'dec_Profile_multimediaProfile'(V1, [])};


%% 'dsmccDownloadProfile'
    {131074, V1} -> 
        {dsmccDownloadProfile, decode_null(V1, [])};


%% 'nonStandard'
    {131075, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_Profile_simpleProfile'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'speech'
    {131072, V1} -> 
        {speech, decode_null(V1, [])};


%% 'telephony-3kHz'
    {131073, V1} -> 
        {'telephony-3kHz', decode_null(V1, [])};


%% 'telephony-7kHz'
    {131074, V1} -> 
        {'telephony-7kHz', decode_null(V1, [])};


%% 'voice-band'
    {131075, V1} -> 
        {'voice-band', decode_null(V1, [])};


%% 'frameRelay'
    {131076, V1} -> 
        {frameRelay, decode_null(V1, [])};


%% 't123-pstn-basic'
    {131077, V1} -> 
        {'t123-pstn-basic', decode_null(V1, [])};


%% 't123-psdn-basic'
    {131078, V1} -> 
        {'t123-psdn-basic', decode_null(V1, [])};


%% 't123-b-isdn-basic'
    {131079, V1} -> 
        {'t123-b-isdn-basic', decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_Profile_multimediaProfile'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute profile(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Profile_multimediaProfile_profile'(V1, [131072]),

%%-------------------------------------------------
%% attribute t120Data(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'Profile_multimediaProfile',Term1,Term2},
Res1.
'dec_Profile_multimediaProfile_profile'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'h310'
    {131072, V1} -> 
        {h310, decode_null(V1, [])};


%% 'h320'
    {131073, V1} -> 
        {h320, decode_null(V1, [])};


%% 'h321'
    {131074, V1} -> 
        {h321, decode_null(V1, [])};


%% 'h322'
    {131075, V1} -> 
        {h322, decode_null(V1, [])};


%% 'h323'
    {131076, V1} -> 
        {h323, decode_null(V1, [])};


%% 'h324'
    {131077, V1} -> 
        {h324, decode_null(V1, [])};


%% 'h324m'
    {131078, V1} -> 
        {h324m, decode_null(V1, [])};


%% 'asvd'
    {131079, V1} -> 
        {asvd, decode_null(V1, [])};


%% 'dsvd'
    {131080, V1} -> 
        {dsvd, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ExtendedE164NetworkAddress
%%================================
enc_ExtendedE164NetworkAddress(Val) ->
    enc_ExtendedE164NetworkAddress(Val, [<<48>>]).

enc_ExtendedE164NetworkAddress(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute internationalNumber(1) with type NumericString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute subAddress(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extraDialling(3) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ExtendedE164NetworkAddress(Tlv) ->
   dec_ExtendedE164NetworkAddress(Tlv, [16]).

dec_ExtendedE164NetworkAddress(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute internationalNumber(1) with type NumericString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 16 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute subAddress(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_restricted_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 40 ->
binary_to_list(Val2);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extraDialling(3) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_BMP_string(V3, []),
C3 = length(Val3),
if 1 =< C3, C3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ExtendedE164NetworkAddress',Term1,Term2,Term3},
Res1.


%%================================
%%  TransportAddress
%%================================
enc_TransportAddress(Val) ->
    enc_TransportAddress(Val, [<<48>>]).

enc_TransportAddress(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nsapAddress(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportSelector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TransportAddress(Tlv) ->
   dec_TransportAddress(Tlv, [16]).

dec_TransportAddress(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nsapAddress(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 20 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute transportSelector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TransportAddress',Term1,Term2},
Res1.


%%================================
%%  GSTNConnection
%%================================
enc_GSTNConnection(Val) ->
    enc_GSTNConnection(Val, [<<48>>]).

enc_GSTNConnection(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute networkAddress(1)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ExtendedE164NetworkAddress'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_GSTNConnection(Tlv) ->
   dec_GSTNConnection(Tlv, [16]).

dec_GSTNConnection(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkAddress(1)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ExtendedE164NetworkAddress'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'GSTNConnection',Term1},
Res1.


%%================================
%%  ISDNConnection
%%================================
enc_ISDNConnection(Val) ->
    enc_ISDNConnection(Val, [<<48>>]).

enc_ISDNConnection(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute circuitTypes(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ISDNConnection_circuitTypes'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute networkAddress(2)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ExtendedE164NetworkAddress'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute highLayerCompatibility(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ISDNConnection_highLayerCompatibility'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ISDNConnection_circuitTypes
%%================================
enc_ISDNConnection_circuitTypes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ISDNConnection_circuitTypes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ISDNConnection_circuitTypes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ISDNConnection_circuitTypes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ISDNConnection_circuitTypes_SETOF'(H, []),
   'enc_ISDNConnection_circuitTypes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ISDNConnection_circuitTypes_SETOF
%%================================
enc_ISDNConnection_circuitTypes_SETOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'digital-64k' ->
         encode_null(element(2,Val), [<<128>>]);
      'digital-2x64k' ->
         encode_null(element(2,Val), [<<129>>]);
      'digital-384k' ->
         encode_null(element(2,Val), [<<130>>]);
      'digital-1536' ->
         encode_null(element(2,Val), [<<131>>]);
      'digital-1920k' ->
         encode_null(element(2,Val), [<<132>>]);
      'multirate-base-64k' ->
         encode_integer(element(2,Val), [<<133>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ISDNConnection_highLayerCompatibility
%%================================
enc_ISDNConnection_highLayerCompatibility(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute telephony3kHz(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute telephony7kHz(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute videotelephony(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute videoconference(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute audiographic(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute audiovisual(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute multimedia(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ISDNConnection(Tlv) ->
   dec_ISDNConnection(Tlv, [16]).

dec_ISDNConnection(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute circuitTypes(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ISDNConnection_circuitTypes'(V1, [131072]),

%%-------------------------------------------------
%% attribute networkAddress(2)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ExtendedE164NetworkAddress'(V2, [131073]),

%%-------------------------------------------------
%% attribute highLayerCompatibility(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ISDNConnection_highLayerCompatibility'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ISDNConnection',Term1,Term2,Term3},
Res1.
'dec_ISDNConnection_circuitTypes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ISDNConnection_circuitTypes_SETOF'(V1, []) || V1 <- Tlv1].


'dec_ISDNConnection_circuitTypes_SETOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'digital-64k'
    {131072, V1} -> 
        {'digital-64k', decode_null(V1, [])};


%% 'digital-2x64k'
    {131073, V1} -> 
        {'digital-2x64k', decode_null(V1, [])};


%% 'digital-384k'
    {131074, V1} -> 
        {'digital-384k', decode_null(V1, [])};


%% 'digital-1536'
    {131075, V1} -> 
        {'digital-1536', decode_null(V1, [])};


%% 'digital-1920k'
    {131076, V1} -> 
        {'digital-1920k', decode_null(V1, [])};


%% 'multirate-base-64k'
    {131077, V1} -> 
        {'multirate-base-64k', begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 30 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ISDNConnection_highLayerCompatibility'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute telephony3kHz(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute telephony7kHz(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute videotelephony(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute videoconference(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute audiographic(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute audiovisual(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute multimedia(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ISDNConnection_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.


%%================================
%%  CSDNConnection
%%================================
enc_CSDNConnection(Val) ->
    enc_CSDNConnection(Val, [<<48>>]).

enc_CSDNConnection(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute circuitTypes(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CSDNConnection_circuitTypes'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute networkAddress(2)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ExtendedE164NetworkAddress'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSDNConnection_circuitTypes
%%================================
enc_CSDNConnection_circuitTypes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CSDNConnection_circuitTypes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CSDNConnection_circuitTypes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CSDNConnection_circuitTypes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CSDNConnection_circuitTypes_SETOF'(H, []),
   'enc_CSDNConnection_circuitTypes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CSDNConnection_circuitTypes_SETOF
%%================================
enc_CSDNConnection_circuitTypes_SETOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'digital-56k' ->
         encode_null(element(2,Val), [<<128>>]);
      'digital-64k' ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_CSDNConnection(Tlv) ->
   dec_CSDNConnection(Tlv, [16]).

dec_CSDNConnection(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute circuitTypes(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CSDNConnection_circuitTypes'(V1, [131072]),

%%-------------------------------------------------
%% attribute networkAddress(2)   External GCC-PROTOCOL:ExtendedE164NetworkAddress
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ExtendedE164NetworkAddress'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'CSDNConnection',Term1,Term2},
Res1.
'dec_CSDNConnection_circuitTypes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CSDNConnection_circuitTypes_SETOF'(V1, []) || V1 <- Tlv1].


'dec_CSDNConnection_circuitTypes_SETOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'digital-56k'
    {131072, V1} -> 
        {'digital-56k', decode_null(V1, [])};


%% 'digital-64k'
    {131073, V1} -> 
        {'digital-64k', decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PSDNConnection
%%================================
enc_PSDNConnection(Val) ->
    enc_PSDNConnection(Val, [<<48>>]).

enc_PSDNConnection(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute networkAddress(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PSDNConnection_networkAddress'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PSDNConnection_networkAddress
%%================================
enc_PSDNConnection_networkAddress(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      extendedE164NetworkAddress ->
         'enc_ExtendedE164NetworkAddress'(element(2,Val), [<<160>>]);
      transportAddress ->
         'enc_TransportAddress'(element(2,Val), [<<161>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_PSDNConnection(Tlv) ->
   dec_PSDNConnection(Tlv, [16]).

dec_PSDNConnection(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkAddress(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PSDNConnection_networkAddress'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'PSDNConnection',Term1},
Res1.
'dec_PSDNConnection_networkAddress'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'extendedE164NetworkAddress'
    {131072, V1} -> 
        {extendedE164NetworkAddress, 'dec_ExtendedE164NetworkAddress'(V1, [])};


%% 'transportAddress'
    {131073, V1} -> 
        {transportAddress, 'dec_TransportAddress'(V1, [])};


%% 'nonStandard'
    {131074, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ATMConnection
%%================================
enc_ATMConnection(Val) ->
    enc_ATMConnection(Val, [<<48>>]).

enc_ATMConnection(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute networkAddress(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ATMConnection_networkAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute maxTransferRate(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ATMConnection_networkAddress
%%================================
enc_ATMConnection_networkAddress(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      extendedE164 ->
         'enc_ExtendedE164NetworkAddress'(element(2,Val), [<<160>>]);
      nsapAddress ->
         'enc_TransportAddress'(element(2,Val), [<<161>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ATMConnection(Tlv) ->
   dec_ATMConnection(Tlv, [16]).

dec_ATMConnection(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkAddress(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ATMConnection_networkAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute maxTransferRate(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ATMConnection',Term1,Term2},
Res1.
'dec_ATMConnection_networkAddress'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'extendedE164'
    {131072, V1} -> 
        {extendedE164, 'dec_ExtendedE164NetworkAddress'(V1, [])};


%% 'nsapAddress'
    {131073, V1} -> 
        {nsapAddress, 'dec_TransportAddress'(V1, [])};


%% 'nonStandard'
    {131074, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  NetworkConnection
%%================================
enc_NetworkConnection(Val) ->
    enc_NetworkConnection(Val, []).

enc_NetworkConnection(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      gstnConnection ->
         'enc_GSTNConnection'(element(2,Val), [<<160>>]);
      isdnConnection ->
         'enc_ISDNConnection'(element(2,Val), [<<161>>]);
      csdnConnection ->
         'enc_CSDNConnection'(element(2,Val), [<<162>>]);
      psdnConnection ->
         'enc_PSDNConnection'(element(2,Val), [<<163>>]);
      atmConnection ->
         'enc_ATMConnection'(element(2,Val), [<<164>>]);
      extendedE164NetworkAddress ->
         'enc_ExtendedE164NetworkAddress'(element(2,Val), [<<165>>]);
      transportAddress ->
         'enc_TransportAddress'(element(2,Val), [<<166>>]);
      nonStandard ->
         'enc_NonStandardParameter'(element(2,Val), [<<167>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_NetworkConnection(Tlv) ->
   dec_NetworkConnection(Tlv, []).

dec_NetworkConnection(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'gstnConnection'
    {131072, V1} -> 
        {gstnConnection, 'dec_GSTNConnection'(V1, [])};


%% 'isdnConnection'
    {131073, V1} -> 
        {isdnConnection, 'dec_ISDNConnection'(V1, [])};


%% 'csdnConnection'
    {131074, V1} -> 
        {csdnConnection, 'dec_CSDNConnection'(V1, [])};


%% 'psdnConnection'
    {131075, V1} -> 
        {psdnConnection, 'dec_PSDNConnection'(V1, [])};


%% 'atmConnection'
    {131076, V1} -> 
        {atmConnection, 'dec_ATMConnection'(V1, [])};


%% 'extendedE164NetworkAddress'
    {131077, V1} -> 
        {extendedE164NetworkAddress, 'dec_ExtendedE164NetworkAddress'(V1, [])};


%% 'transportAddress'
    {131078, V1} -> 
        {transportAddress, 'dec_TransportAddress'(V1, [])};


%% 'nonStandard'
    {131079, V1} -> 
        {nonStandard, 'dec_NonStandardParameter'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  NetworkAddressV2
%%================================
enc_NetworkAddressV2(Val) ->
    enc_NetworkAddressV2(Val, [<<49>>]).

enc_NetworkAddressV2(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NetworkAddressV2_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NetworkAddressV2_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NetworkAddressV2_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NetworkAddressV2_SETOF'(H, [<<48>>]),
   'enc_NetworkAddressV2_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NetworkAddressV2_SETOF
%%================================
enc_NetworkAddressV2_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute networkConnection(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NetworkAddressV2_SETOF_networkConnection'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute profiles(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddressV2_SETOF_profiles'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute mediaConcerned(3)   External GCC-PROTOCOL:MediaList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MediaList'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NetworkAddressV2_SETOF_networkConnection
%%================================
enc_NetworkAddressV2_SETOF_networkConnection(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      singleConnection ->
         'enc_NetworkConnection'(element(2,Val), [<<160>>]);
      aggregatedConnections ->
         'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  NetworkAddressV2_SETOF_networkConnection_aggregatedConnections
%%================================
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute connectionList(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute aggregationMethods(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList
%%================================
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(H, []),
   'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF
%%================================
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      isdnConnection ->
         'enc_ISDNConnection'(element(2,Val), [<<160>>]);
      csdnConnection ->
         'enc_CSDNConnection'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods
%%================================
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChannelAggregationMethod'(H, []),
   'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NetworkAddressV2_SETOF_profiles
%%================================
enc_NetworkAddressV2_SETOF_profiles(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NetworkAddressV2_SETOF_profiles_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NetworkAddressV2_SETOF_profiles_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NetworkAddressV2_SETOF_profiles_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Profile'(H, []),
   'enc_NetworkAddressV2_SETOF_profiles_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_NetworkAddressV2(Tlv) ->
   dec_NetworkAddressV2(Tlv, [17]).

dec_NetworkAddressV2(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NetworkAddressV2_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_NetworkAddressV2_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkConnection(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NetworkAddressV2_SETOF_networkConnection'(V1, [131072]),

%%-------------------------------------------------
%% attribute profiles(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NetworkAddressV2_SETOF_profiles'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute mediaConcerned(3)   External GCC-PROTOCOL:MediaList OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_MediaList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NetworkAddressV2_SETOF',Term1,Term2,Term3},
Res1.
'dec_NetworkAddressV2_SETOF_networkConnection'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'singleConnection'
    {131072, V1} -> 
        {singleConnection, 'dec_NetworkConnection'(V1, [])};


%% 'aggregatedConnections'
    {131073, V1} -> 
        {aggregatedConnections, 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute connectionList(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(V1, [131072]),

%%-------------------------------------------------
%% attribute aggregationMethods(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections',Term1,Term2},
Res1.
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(V1, []) || V1 <- Tlv1].


'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'isdnConnection'
    {131072, V1} -> 
        {isdnConnection, 'dec_ISDNConnection'(V1, [])};


%% 'csdnConnection'
    {131073, V1} -> 
        {csdnConnection, 'dec_CSDNConnection'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ChannelAggregationMethod'(V1, []) || V1 <- Tlv1].


'dec_NetworkAddressV2_SETOF_profiles'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Profile'(V1, []) || V1 <- Tlv1].




%%================================
%%  NodeType
%%================================
enc_NodeType(Val) ->
    enc_NodeType(Val, [<<10>>]).

enc_NodeType(Val, TagIn) ->
case Val of
terminal -> encode_tags(TagIn, [0], 1);
multiportTerminal -> encode_tags(TagIn, [1], 1);
mcu -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_NodeType(Tlv) ->
   dec_NodeType(Tlv, [10]).

dec_NodeType(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  NodeProperties
%%================================
enc_NodeProperties(Val) ->
    enc_NodeProperties(Val, [<<48>>]).

enc_NodeProperties(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute managementDevice(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute peripheralDevice(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_NodeProperties(Tlv) ->
   dec_NodeProperties(Tlv, [16]).

dec_NodeProperties(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute managementDevice(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute peripheralDevice(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NodeProperties',Term1,Term2},
Res1.


%%================================
%%  AsymmetryIndicator
%%================================
enc_AsymmetryIndicator(Val) ->
    enc_AsymmetryIndicator(Val, []).

enc_AsymmetryIndicator(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      callingNode ->
         encode_null(element(2,Val), [<<128>>]);
      calledNode ->
         encode_null(element(2,Val), [<<129>>]);
      unknown ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_AsymmetryIndicator(Tlv) ->
   dec_AsymmetryIndicator(Tlv, []).

dec_AsymmetryIndicator(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'callingNode'
    {131072, V1} -> 
        {callingNode, decode_null(V1, [])};


%% 'calledNode'
    {131073, V1} -> 
        {calledNode, decode_null(V1, [])};


%% 'unknown'
    {131074, V1} -> 
        {unknown, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AlternativeNodeID
%%================================
enc_AlternativeNodeID(Val) ->
    enc_AlternativeNodeID(Val, []).

enc_AlternativeNodeID(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      h243NodeID ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_AlternativeNodeID(Tlv) ->
   dec_AlternativeNodeID(Tlv, []).

dec_AlternativeNodeID(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'h243NodeID'
    {131072, V1} -> 
        {h243NodeID, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ConferenceDescriptor
%%================================
enc_ConferenceDescriptor(Val) ->
    enc_ConferenceDescriptor(Val, [<<48>>]).

enc_ConferenceDescriptor(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceName'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute conferenceDescription(3) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute lockedConference(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute networkAddress(6)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddress'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute defaultConferenceFlag(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute conferenceMode(8)   External GCC-PROTOCOL:ConferenceMode
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_ConferenceMode'(Cindex8, [<<167>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceDescriptor(Tlv) ->
   dec_ConferenceDescriptor(Tlv, [16]).

dec_ConferenceDescriptor(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceName'(V1, [131072]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_restricted_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute conferenceDescription(3) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_BMP_string(V3, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute lockedConference(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute networkAddress(6)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_NetworkAddress'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute defaultConferenceFlag(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute conferenceMode(8)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_ConferenceMode'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceDescriptor',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
Res1.


%%================================
%%  NodeRecord
%%================================
enc_NodeRecord(Val) ->
    enc_NodeRecord(Val, [<<48>>]).

enc_NodeRecord(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11} = Val,

%%-------------------------------------------------
%% attribute superiorNode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute nodeType(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
terminal -> encode_tags([<<129>>], [0], 1);
multiportTerminal -> encode_tags([<<129>>], [1], 1);
mcu -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute nodeProperties(3)   External GCC-PROTOCOL:NodeProperties
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_NodeProperties'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute nodeName(4) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute participantsList(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeRecord_participantsList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute siteInformation(6) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute networkAddress(7)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddress'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute alternativeNodeID(8)   External GCC-PROTOCOL:AlternativeNodeID OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AlternativeNodeID'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute userData(9)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute nodeCategory(10)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeCategory'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute networkAddressV2(11)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddressV2'(Cindex11, [<<170>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NodeRecord_participantsList
%%================================
enc_NodeRecord_participantsList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NodeRecord_participantsList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NodeRecord_participantsList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NodeRecord_participantsList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_BMP_string(H, [<<30>>]),
   'enc_NodeRecord_participantsList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_NodeRecord(Tlv) ->
   dec_NodeRecord(Tlv, [16]).

dec_NodeRecord(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute superiorNode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute nodeType(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute nodeProperties(3)   External GCC-PROTOCOL:NodeProperties
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_NodeProperties'(V3, [131074]),

%%-------------------------------------------------
%% attribute nodeName(4) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_BMP_string(V4, []),
C1 = length(Val2),
if 0 =< C1, C1 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute participantsList(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_NodeRecord_participantsList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute siteInformation(6) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_BMP_string(V6, []),
C2 = length(Val3),
if 0 =< C2, C2 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute networkAddress(7)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_NetworkAddress'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute alternativeNodeID(8)   External GCC-PROTOCOL:AlternativeNodeID OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_AlternativeNodeID'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute userData(9)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_UserData'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute nodeCategory(10)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_NodeCategory'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute networkAddressV2(11)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_NetworkAddressV2'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NodeRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},
Res1.
'dec_NodeRecord_participantsList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_BMP_string(V1, [30]),
C1 = length(Val1),
if 0 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  SessionKey
%%================================
enc_SessionKey(Val) ->
    enc_SessionKey(Val, [<<48>>]).

enc_SessionKey(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute applicationProtocolKey(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute sessionID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_SessionKey(Tlv) ->
   dec_SessionKey(Tlv, [16]).

dec_SessionKey(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute applicationProtocolKey(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute sessionID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'SessionKey',Term1,Term2},
Res1.


%%================================
%%  ChannelType
%%================================
enc_ChannelType(Val) ->
    enc_ChannelType(Val, [<<10>>]).

enc_ChannelType(Val, TagIn) ->
case Val of
static -> encode_tags(TagIn, [0], 1);
dynamicMulticast -> encode_tags(TagIn, [1], 1);
dynamicPrivate -> encode_tags(TagIn, [2], 1);
dynamicUserId -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_ChannelType(Tlv) ->
   dec_ChannelType(Tlv, [10]).

dec_ChannelType(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ApplicationRecord
%%================================
enc_ApplicationRecord(Val) ->
    enc_ApplicationRecord(Val, [<<48>>]).

enc_ApplicationRecord(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute applicationActive(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute conductingOperationCapable(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute startupChannel(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
static -> encode_tags([<<130>>], [0], 1);
dynamicMulticast -> encode_tags([<<130>>], [1], 1);
dynamicPrivate -> encode_tags([<<130>>], [2], 1);
dynamicUserId -> encode_tags([<<130>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute applicationUserID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute nonCollapsingCapabilities(5) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ApplicationRecord_nonCollapsingCapabilities'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ApplicationRecord_nonCollapsingCapabilities
%%================================
enc_ApplicationRecord_nonCollapsingCapabilities(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ApplicationRecord_nonCollapsingCapabilities_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ApplicationRecord_nonCollapsingCapabilities_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ApplicationRecord_nonCollapsingCapabilities_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ApplicationRecord_nonCollapsingCapabilities_SETOF'(H, [<<48>>]),
   'enc_ApplicationRecord_nonCollapsingCapabilities_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ApplicationRecord_nonCollapsingCapabilities_SETOF
%%================================
enc_ApplicationRecord_nonCollapsingCapabilities_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CapabilityID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute applicationData(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ApplicationRecord(Tlv) ->
   dec_ApplicationRecord(Tlv, [16]).

dec_ApplicationRecord(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute applicationActive(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute conductingOperationCapable(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute startupChannel(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute applicationUserID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute nonCollapsingCapabilities(5) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_ApplicationRecord_nonCollapsingCapabilities'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ApplicationRecord',Term1,Term2,Term3,Term4,Term5},
Res1.
'dec_ApplicationRecord_nonCollapsingCapabilities'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ApplicationRecord_nonCollapsingCapabilities_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CapabilityID'(V1, [131072]),

%%-------------------------------------------------
%% attribute applicationData(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ApplicationRecord_nonCollapsingCapabilities_SETOF',Term1,Term2},
Res1.


%%================================
%%  CapabilityID
%%================================
enc_CapabilityID(Val) ->
    enc_CapabilityID(Val, []).

enc_CapabilityID(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      standard ->
         encode_integer(element(2,Val), [<<128>>]);
      nonStandard ->
         'enc_Key'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_CapabilityID(Tlv) ->
   dec_CapabilityID(Tlv, []).

dec_CapabilityID(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'standard'
    {131072, V1} -> 
        {standard, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'nonStandard'
    {131073, V1} -> 
        {nonStandard, 'dec_Key'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CapabilityClass
%%================================
enc_CapabilityClass(Val) ->
    enc_CapabilityClass(Val, []).

enc_CapabilityClass(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      logical ->
         encode_null(element(2,Val), [<<128>>]);
      unsignedMin ->
         encode_integer(element(2,Val), [<<129>>]);
      unsignedMax ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_CapabilityClass(Tlv) ->
   dec_CapabilityClass(Tlv, []).

dec_CapabilityClass(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'logical'
    {131072, V1} -> 
        {logical, decode_null(V1, [])};


%% 'unsignedMin'
    {131073, V1} -> 
        {unsignedMin, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'unsignedMax'
    {131074, V1} -> 
        {unsignedMax, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 'MAX' ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  EntityID
%%================================
enc_EntityID(Val) ->
    enc_EntityID(Val, [<<2>>]).

enc_EntityID(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_EntityID(Tlv) ->
   dec_EntityID(Tlv, [2]).

dec_EntityID(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ApplicationInvokeSpecifier
%%================================
enc_ApplicationInvokeSpecifier(Val) ->
    enc_ApplicationInvokeSpecifier(Val, [<<48>>]).

enc_ApplicationInvokeSpecifier(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SessionKey'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute expectedCapabilitySet(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute startupChannel(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
static -> encode_tags([<<130>>], [0], 1);
dynamicMulticast -> encode_tags([<<130>>], [1], 1);
dynamicPrivate -> encode_tags([<<130>>], [2], 1);
dynamicUserId -> encode_tags([<<130>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute mandatoryFlag(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ApplicationInvokeSpecifier_expectedCapabilitySet
%%================================
enc_ApplicationInvokeSpecifier_expectedCapabilitySet(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(H, [<<48>>]),
   'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF
%%================================
enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CapabilityID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute capabilityClass(2)   External GCC-PROTOCOL:CapabilityClass
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CapabilityClass'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ApplicationInvokeSpecifier(Tlv) ->
   dec_ApplicationInvokeSpecifier(Tlv, [16]).

dec_ApplicationInvokeSpecifier(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SessionKey'(V1, [131072]),

%%-------------------------------------------------
%% attribute expectedCapabilitySet(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ApplicationInvokeSpecifier_expectedCapabilitySet'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute startupChannel(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute mandatoryFlag(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ApplicationInvokeSpecifier',Term1,Term2,Term3,Term4},
Res1.
'dec_ApplicationInvokeSpecifier_expectedCapabilitySet'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CapabilityID'(V1, [131072]),

%%-------------------------------------------------
%% attribute capabilityClass(2)   External GCC-PROTOCOL:CapabilityClass
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CapabilityClass'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF',Term1,Term2},
Res1.


%%================================
%%  RegistryKey
%%================================
enc_RegistryKey(Val) ->
    enc_RegistryKey(Val, [<<48>>]).

enc_RegistryKey(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SessionKey'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute resourceID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryKey(Tlv) ->
   dec_RegistryKey(Tlv, [16]).

dec_RegistryKey(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SessionKey'(V1, [131072]),

%%-------------------------------------------------
%% attribute resourceID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if 0 =< C1, C1 =< 64 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RegistryKey',Term1,Term2},
Res1.


%%================================
%%  RegistryItem
%%================================
enc_RegistryItem(Val) ->
    enc_RegistryItem(Val, []).

enc_RegistryItem(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      channelID ->
         encode_integer(element(2,Val), [<<128>>]);
      tokenID ->
         encode_integer(element(2,Val), [<<129>>]);
      parameter ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      vacant ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_RegistryItem(Tlv) ->
   dec_RegistryItem(Tlv, []).

dec_RegistryItem(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'channelID'
    {131072, V1} -> 
        {channelID, begin
Val1 = decode_integer(V1, []),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'tokenID'
    {131073, V1} -> 
        {tokenID, begin
Val2 = decode_integer(V1, []),
if 16384 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'parameter'
    {131074, V1} -> 
        {parameter, begin
Val3 = decode_octet_string(V1, []),
C1 = byte_size(Val3),
if 0 =< C1, C1 =< 64 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'vacant'
    {131075, V1} -> 
        {vacant, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  RegistryEntryOwner
%%================================
enc_RegistryEntryOwner(Val) ->
    enc_RegistryEntryOwner(Val, []).

enc_RegistryEntryOwner(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      owned ->
         'enc_RegistryEntryOwner_owned'(element(2,Val), [<<160>>]);
      notOwned ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RegistryEntryOwner_owned
%%================================
enc_RegistryEntryOwner_owned(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryEntryOwner(Tlv) ->
   dec_RegistryEntryOwner(Tlv, []).

dec_RegistryEntryOwner(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'owned'
    {131072, V1} -> 
        {owned, 'dec_RegistryEntryOwner_owned'(V1, [])};


%% 'notOwned'
    {131073, V1} -> 
        {notOwned, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_RegistryEntryOwner_owned'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RegistryEntryOwner_owned',Term1,Term2},
Res1.


%%================================
%%  RegistryModificationRights
%%================================
enc_RegistryModificationRights(Val) ->
    enc_RegistryModificationRights(Val, [<<10>>]).

enc_RegistryModificationRights(Val, TagIn) ->
case Val of
owner -> encode_tags(TagIn, [0], 1);
session -> encode_tags(TagIn, [1], 1);
public -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_RegistryModificationRights(Tlv) ->
   dec_RegistryModificationRights(Tlv, [10]).

dec_RegistryModificationRights(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> owner;
1 -> session;
2 -> public;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  UserIDIndication
%%================================
enc_UserIDIndication(Val) ->
    enc_UserIDIndication(Val, [<<48>>]).

enc_UserIDIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tag(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_UserIDIndication(Tlv) ->
   dec_UserIDIndication(Tlv, [16]).

dec_UserIDIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tag(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'UserIDIndication',Term1},
Res1.


%%================================
%%  ConferenceCreateRequest
%%================================
enc_ConferenceCreateRequest(Val) ->
    enc_ConferenceCreateRequest(Val, [<<48>>]).

enc_ConferenceCreateRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11,Cindex12,Cindex13,Cindex14,Cindex15} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceName'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute convenerPassword(2)   External GCC-PROTOCOL:Password OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Password'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute password(3)   External GCC-PROTOCOL:Password OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Password'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute lockedConference(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute listedConference(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute conductibleConference(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute terminationMethod(7) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case Cindex7 of
automatic -> encode_tags([<<134>>], [0], 1);
manual -> encode_tags([<<134>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(8) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceCreateRequest_conductorPrivileges'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute conductedPrivileges(9) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceCreateRequest_conductedPrivileges'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceCreateRequest_nonConductedPrivileges'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute conferenceDescription(11) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute callerIdentifier(12) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute userData(13)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute conferencePriority(14)   External GCC-PROTOCOL:ConferencePriority OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferencePriority'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute conferenceMode(15)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceMode'(Cindex15, [<<174>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceCreateRequest_conductorPrivileges
%%================================
enc_ConferenceCreateRequest_conductorPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceCreateRequest_conductorPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceCreateRequest_conductorPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceCreateRequest_conductorPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceCreateRequest_conductorPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceCreateRequest_conductedPrivileges
%%================================
enc_ConferenceCreateRequest_conductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceCreateRequest_conductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceCreateRequest_conductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceCreateRequest_conductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceCreateRequest_conductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceCreateRequest_nonConductedPrivileges
%%================================
enc_ConferenceCreateRequest_nonConductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceCreateRequest_nonConductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceCreateRequest_nonConductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceCreateRequest_nonConductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceCreateRequest_nonConductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceCreateRequest(Tlv) ->
   dec_ConferenceCreateRequest(Tlv, [16]).

dec_ConferenceCreateRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceName'(V1, [131072]),

%%-------------------------------------------------
%% attribute convenerPassword(2)   External GCC-PROTOCOL:Password OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Password'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute password(3)   External GCC-PROTOCOL:Password OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Password'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute lockedConference(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute listedConference(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute conductibleConference(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute terminationMethod(7) with type ENUMERATED
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = case decode_integer(V7, [131078]) of
0 -> automatic;
1 -> manual;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(8) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_ConferenceCreateRequest_conductorPrivileges'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute conductedPrivileges(9) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_ConferenceCreateRequest_conductedPrivileges'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_ConferenceCreateRequest_nonConductedPrivileges'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute conferenceDescription(11) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val1 = decode_BMP_string(V11, []),
C1 = length(Val1),
if 0 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute callerIdentifier(12) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val2 = decode_BMP_string(V12, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute userData(13)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'dec_UserData'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute conferencePriority(14)   External GCC-PROTOCOL:ConferencePriority OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'dec_ConferencePriority'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute conferenceMode(15)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {'dec_ConferenceMode'(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

case Tlv16 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceCreateRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},
Res1.
'dec_ConferenceCreateRequest_conductorPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceCreateRequest_conductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceCreateRequest_nonConductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  ConferenceCreateResponse
%%================================
enc_ConferenceCreateResponse(Val) ->
    enc_ConferenceCreateResponse(Val, [<<48>>]).

enc_ConferenceCreateResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute tag(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute result(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
success -> encode_tags([<<130>>], [0], 1);
userRejected -> encode_tags([<<130>>], [1], 1);
resourcesNotAvailable -> encode_tags([<<130>>], [2], 1);
rejectedForSymmetryBreaking -> encode_tags([<<130>>], [3], 1);
lockedConferenceNotSupported -> encode_tags([<<130>>], [4], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute userData(4)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceCreateResponse(Tlv) ->
   dec_ConferenceCreateResponse(Tlv, [16]).

dec_ConferenceCreateResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tag(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute result(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> success;
1 -> userRejected;
2 -> resourcesNotAvailable;
3 -> rejectedForSymmetryBreaking;
4 -> lockedConferenceNotSupported;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute userData(4)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_UserData'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceCreateResponse',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  ConferenceQueryRequest
%%================================
enc_ConferenceQueryRequest(Val) ->
    enc_ConferenceQueryRequest(Val, [<<48>>]).

enc_ConferenceQueryRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute nodeType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
terminal -> encode_tags([<<128>>], [0], 1);
multiportTerminal -> encode_tags([<<128>>], [1], 1);
mcu -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute asymmetryIndicator(2)   External GCC-PROTOCOL:AsymmetryIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AsymmetryIndicator'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute userData(3)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceQueryRequest(Tlv) ->
   dec_ConferenceQueryRequest(Tlv, [16]).

dec_ConferenceQueryRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute asymmetryIndicator(2)   External GCC-PROTOCOL:AsymmetryIndicator OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AsymmetryIndicator'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute userData(3)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UserData'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceQueryRequest',Term1,Term2,Term3},
Res1.


%%================================
%%  ConferenceQueryResponse
%%================================
enc_ConferenceQueryResponse(Val) ->
    enc_ConferenceQueryResponse(Val, [<<48>>]).

enc_ConferenceQueryResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute nodeType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
terminal -> encode_tags([<<128>>], [0], 1);
multiportTerminal -> encode_tags([<<128>>], [1], 1);
mcu -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute asymmetryIndicator(2)   External GCC-PROTOCOL:AsymmetryIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AsymmetryIndicator'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute conferenceList(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ConferenceQueryResponse_conferenceList'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
success -> encode_tags([<<131>>], [0], 1);
userRejected -> encode_tags([<<131>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute userData(5)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute waitForInvitationFlag(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute noUnlistedConferenceFlag(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceQueryResponse_conferenceList
%%================================
enc_ConferenceQueryResponse_conferenceList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceQueryResponse_conferenceList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceQueryResponse_conferenceList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceQueryResponse_conferenceList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ConferenceDescriptor'(H, [<<48>>]),
   'enc_ConferenceQueryResponse_conferenceList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceQueryResponse(Tlv) ->
   dec_ConferenceQueryResponse(Tlv, [16]).

dec_ConferenceQueryResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute asymmetryIndicator(2)   External GCC-PROTOCOL:AsymmetryIndicator OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AsymmetryIndicator'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute conferenceList(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ConferenceQueryResponse_conferenceList'(V3, [131074]),

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> success;
1 -> userRejected;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute userData(5)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_UserData'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute waitForInvitationFlag(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_boolean(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute noUnlistedConferenceFlag(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceQueryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.
'dec_ConferenceQueryResponse_conferenceList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ConferenceDescriptor'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ConferenceJoinRequest
%%================================
enc_ConferenceJoinRequest(Val) ->
    enc_ConferenceJoinRequest(Val, [<<48>>]).

enc_ConferenceJoinRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceNameSelector'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute password(4)   External GCC-PROTOCOL:PasswordChallengeRequestResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PasswordChallengeRequestResponse'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute convenerPassword(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PasswordSelector'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callerIdentifier(6) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute userData(7)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute nodeCategory(8)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeCategory'(Cindex8, [<<167>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceJoinRequest(Tlv) ->
   dec_ConferenceJoinRequest(Tlv, [16]).

dec_ConferenceJoinRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_ConferenceNameSelector'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_restricted_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute password(4)   External GCC-PROTOCOL:PasswordChallengeRequestResponse OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_PasswordChallengeRequestResponse'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute convenerPassword(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_PasswordSelector'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callerIdentifier(6) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_BMP_string(V6, []),
C2 = length(Val2),
if 0 =< C2, C2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute userData(7)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_UserData'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute nodeCategory(8)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_NodeCategory'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceJoinRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
Res1.


%%================================
%%  ConferenceJoinResponse
%%================================
enc_ConferenceJoinResponse(Val) ->
    enc_ConferenceJoinResponse(Val, [<<48>>]).

enc_ConferenceJoinResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11,Cindex12,Cindex13,Cindex14,Cindex15,Cindex16,Cindex17,Cindex18} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute topNodeID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute conferenceNameAlias(4)   External GCC-PROTOCOL:ConferenceNameSelector OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceNameSelector'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute lockedConference(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute listedConference(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute conductibleConference(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute terminationMethod(9) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes9,EncLen9} = case Cindex9 of
automatic -> encode_tags([<<136>>], [0], 1);
manual -> encode_tags([<<136>>], [1], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceJoinResponse_conductorPrivileges'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute conductedPrivileges(11) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceJoinResponse_conductedPrivileges'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(12) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceJoinResponse_nonConductedPrivileges'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute conferenceDescription(13) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute password(14)   External GCC-PROTOCOL:PasswordChallengeRequestResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PasswordChallengeRequestResponse'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute result(15) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes15,EncLen15} = case Cindex15 of
success -> encode_tags([<<142>>], [0], 1);
userRejected -> encode_tags([<<142>>], [1], 1);
invalidConference -> encode_tags([<<142>>], [2], 1);
invalidPassword -> encode_tags([<<142>>], [3], 1);
invalidConvenerPassword -> encode_tags([<<142>>], [4], 1);
challengeResponseRequired -> encode_tags([<<142>>], [5], 1);
invalidChallengeResponse -> encode_tags([<<142>>], [6], 1);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

%%-------------------------------------------------
%% attribute userData(16)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute nodeCategory(17)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeCategory'(Cindex17, [<<176>>])
       end,

%%-------------------------------------------------
%% attribute conferenceMode(18)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceMode'(Cindex18, [<<177>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceJoinResponse_conductorPrivileges
%%================================
enc_ConferenceJoinResponse_conductorPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceJoinResponse_conductorPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceJoinResponse_conductorPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceJoinResponse_conductorPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceJoinResponse_conductorPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceJoinResponse_conductedPrivileges
%%================================
enc_ConferenceJoinResponse_conductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceJoinResponse_conductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceJoinResponse_conductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceJoinResponse_conductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceJoinResponse_conductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceJoinResponse_nonConductedPrivileges
%%================================
enc_ConferenceJoinResponse_nonConductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceJoinResponse_nonConductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceJoinResponse_nonConductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceJoinResponse_nonConductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceJoinResponse_nonConductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceJoinResponse(Tlv) ->
   dec_ConferenceJoinResponse(Tlv, [16]).

dec_ConferenceJoinResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute topNodeID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1001 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

%%-------------------------------------------------
%% attribute conferenceNameAlias(4)   External GCC-PROTOCOL:ConferenceNameSelector OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ConferenceNameSelector'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute lockedConference(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute listedConference(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute conductibleConference(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute terminationMethod(9) with type ENUMERATED
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = case decode_integer(V9, [131080]) of
0 -> automatic;
1 -> manual;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_ConferenceJoinResponse_conductorPrivileges'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute conductedPrivileges(11) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_ConferenceJoinResponse_conductedPrivileges'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(12) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_ConferenceJoinResponse_nonConductedPrivileges'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute conferenceDescription(13) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val3 = decode_BMP_string(V13, []),
C1 = length(Val3),
if 0 =< C1, C1 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute password(14)   External GCC-PROTOCOL:PasswordChallengeRequestResponse OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'dec_PasswordChallengeRequestResponse'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute result(15) with type ENUMERATED
%%-------------------------------------------------
[V15|Tlv16] = Tlv15, 
Term15 = case decode_integer(V15, [131086]) of
0 -> success;
1 -> userRejected;
2 -> invalidConference;
3 -> invalidPassword;
4 -> invalidConvenerPassword;
5 -> challengeResponseRequired;
6 -> invalidChallengeResponse;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute userData(16)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'dec_UserData'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute nodeCategory(17)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_NodeCategory'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute conferenceMode(18)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {'dec_ConferenceMode'(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

case Tlv19 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceJoinResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},
Res1.
'dec_ConferenceJoinResponse_conductorPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceJoinResponse_conductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceJoinResponse_nonConductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  ConferenceInviteRequest
%%================================
enc_ConferenceInviteRequest(Val) ->
    enc_ConferenceInviteRequest(Val, [<<48>>]).

enc_ConferenceInviteRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11,Cindex12,Cindex13,Cindex14,Cindex15,Cindex16,Cindex17,Cindex18} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceName'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nodeID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute topNodeID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute tag(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute lockedConference(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute listedConference(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute conductibleConference(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute terminationMethod(9) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes9,EncLen9} = case Cindex9 of
automatic -> encode_tags([<<136>>], [0], 1);
manual -> encode_tags([<<136>>], [1], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceInviteRequest_conductorPrivileges'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute conductedPrivileges(11) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceInviteRequest_conductedPrivileges'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(12) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceInviteRequest_nonConductedPrivileges'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute conferenceDescription(13) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute callerIdentifier(14) with type BMPString OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_BMP_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute userData(15)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex15, [<<174>>])
       end,

%%-------------------------------------------------
%% attribute conferencePriority(16)   External GCC-PROTOCOL:ConferencePriority OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferencePriority'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute nodeCategory(17)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeCategory'(Cindex17, [<<176>>])
       end,

%%-------------------------------------------------
%% attribute conferenceMode(18)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceMode'(Cindex18, [<<177>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceInviteRequest_conductorPrivileges
%%================================
enc_ConferenceInviteRequest_conductorPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceInviteRequest_conductorPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceInviteRequest_conductorPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceInviteRequest_conductorPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceInviteRequest_conductorPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceInviteRequest_conductedPrivileges
%%================================
enc_ConferenceInviteRequest_conductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceInviteRequest_conductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceInviteRequest_conductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceInviteRequest_conductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceInviteRequest_conductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConferenceInviteRequest_nonConductedPrivileges
%%================================
enc_ConferenceInviteRequest_nonConductedPrivileges(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceInviteRequest_nonConductedPrivileges_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceInviteRequest_nonConductedPrivileges_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceInviteRequest_nonConductedPrivileges_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
terminate -> encode_tags([<<10>>], [0], 1);
ejectUser -> encode_tags([<<10>>], [1], 1);
add -> encode_tags([<<10>>], [2], 1);
lockUnlock -> encode_tags([<<10>>], [3], 1);
transfer -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_ConferenceInviteRequest_nonConductedPrivileges_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceInviteRequest(Tlv) ->
   dec_ConferenceInviteRequest(Tlv, [16]).

dec_ConferenceInviteRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceName
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceName'(V1, [131072]),

%%-------------------------------------------------
%% attribute nodeID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute topNodeID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 1001 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tag(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4, [131075]),

%%-------------------------------------------------
%% attribute passwordInTheClearRequired(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute lockedConference(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute listedConference(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute conductibleConference(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute terminationMethod(9) with type ENUMERATED
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = case decode_integer(V9, [131080]) of
0 -> automatic;
1 -> manual;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute conductorPrivileges(10) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_ConferenceInviteRequest_conductorPrivileges'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute conductedPrivileges(11) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_ConferenceInviteRequest_conductedPrivileges'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute nonConductedPrivileges(12) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_ConferenceInviteRequest_nonConductedPrivileges'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute conferenceDescription(13) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val3 = decode_BMP_string(V13, []),
C1 = length(Val3),
if 0 =< C1, C1 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute callerIdentifier(14) with type BMPString OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val4 = decode_BMP_string(V14, []),
C2 = length(Val4),
if 0 =< C2, C2 =< 255 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute userData(15)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {'dec_UserData'(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute conferencePriority(16)   External GCC-PROTOCOL:ConferencePriority OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'dec_ConferencePriority'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute nodeCategory(17)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_NodeCategory'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute conferenceMode(18)   External GCC-PROTOCOL:ConferenceMode OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {'dec_ConferenceMode'(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

case Tlv19 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceInviteRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},
Res1.
'dec_ConferenceInviteRequest_conductorPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceInviteRequest_conductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].


'dec_ConferenceInviteRequest_nonConductedPrivileges'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  ConferenceInviteResponse
%%================================
enc_ConferenceInviteResponse(Val) ->
    enc_ConferenceInviteResponse(Val, [<<48>>]).

enc_ConferenceInviteResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
success -> encode_tags([<<128>>], [0], 1);
userRejected -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute userData(2)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceInviteResponse(Tlv) ->
   dec_ConferenceInviteResponse(Tlv, [16]).

dec_ConferenceInviteResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> success;
1 -> userRejected;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute userData(2)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_UserData'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceInviteResponse',Term1,Term2},
Res1.


%%================================
%%  ConferenceAddRequest
%%================================
enc_ConferenceAddRequest(Val) ->
    enc_ConferenceAddRequest(Val, [<<48>>]).

enc_ConferenceAddRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute networkAddress(1)   External GCC-PROTOCOL:NetworkAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NetworkAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute requestingNode(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute addingMCU(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute userData(5)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute nodeCategory(6)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NodeCategory'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute networkAddressV2(7)   External GCC-PROTOCOL:NetworkAddressV2
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_NetworkAddressV2'(Cindex7, [<<166>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceAddRequest(Tlv) ->
   dec_ConferenceAddRequest(Tlv, [16]).

dec_ConferenceAddRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkAddress(1)   External GCC-PROTOCOL:NetworkAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NetworkAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute requestingNode(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tag(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

%%-------------------------------------------------
%% attribute addingMCU(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if 1001 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute userData(5)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_UserData'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute nodeCategory(6)   External GCC-PROTOCOL:NodeCategory OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_NodeCategory'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute networkAddressV2(7)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_NetworkAddressV2'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceAddRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.


%%================================
%%  ConferenceAddResponse
%%================================
enc_ConferenceAddResponse(Val) ->
    enc_ConferenceAddResponse(Val, [<<48>>]).

enc_ConferenceAddResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute tag(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute result(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
success -> encode_tags([<<129>>], [0], 1);
invalidRequester -> encode_tags([<<129>>], [1], 1);
invalidNetworkType -> encode_tags([<<129>>], [2], 1);
invalidNetworkAddress -> encode_tags([<<129>>], [3], 1);
addedNodeBusy -> encode_tags([<<129>>], [4], 1);
networkBusy -> encode_tags([<<129>>], [5], 1);
noPortsAvailable -> encode_tags([<<129>>], [6], 1);
connectionUnsuccessful -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute userData(3)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceAddResponse(Tlv) ->
   dec_ConferenceAddResponse(Tlv, [16]).

dec_ConferenceAddResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tag(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute result(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> success;
1 -> invalidRequester;
2 -> invalidNetworkType;
3 -> invalidNetworkAddress;
4 -> addedNodeBusy;
5 -> networkBusy;
6 -> noPortsAvailable;
7 -> connectionUnsuccessful;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute userData(3)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UserData'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceAddResponse',Term1,Term2,Term3},
Res1.


%%================================
%%  ConferenceLockRequest
%%================================
enc_ConferenceLockRequest(Val) ->
    enc_ConferenceLockRequest(Val, [<<48>>]).

enc_ConferenceLockRequest(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceLockRequest(Tlv) ->
   dec_ConferenceLockRequest(Tlv, [16]).

dec_ConferenceLockRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ConferenceLockRequest'}.



%%================================
%%  ConferenceLockResponse
%%================================
enc_ConferenceLockResponse(Val) ->
    enc_ConferenceLockResponse(Val, [<<48>>]).

enc_ConferenceLockResponse(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
success -> encode_tags([<<128>>], [0], 1);
invalidRequester -> encode_tags([<<128>>], [1], 1);
alreadyLocked -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceLockResponse(Tlv) ->
   dec_ConferenceLockResponse(Tlv, [16]).

dec_ConferenceLockResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> success;
1 -> invalidRequester;
2 -> alreadyLocked;
Default1 -> {asn1_enum,Default1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceLockResponse',Term1},
Res1.


%%================================
%%  ConferenceLockIndication
%%================================
enc_ConferenceLockIndication(Val) ->
    enc_ConferenceLockIndication(Val, [<<48>>]).

enc_ConferenceLockIndication(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceLockIndication(Tlv) ->
   dec_ConferenceLockIndication(Tlv, [16]).

dec_ConferenceLockIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ConferenceLockIndication'}.



%%================================
%%  ConferenceUnlockRequest
%%================================
enc_ConferenceUnlockRequest(Val) ->
    enc_ConferenceUnlockRequest(Val, [<<48>>]).

enc_ConferenceUnlockRequest(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceUnlockRequest(Tlv) ->
   dec_ConferenceUnlockRequest(Tlv, [16]).

dec_ConferenceUnlockRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ConferenceUnlockRequest'}.



%%================================
%%  ConferenceUnlockResponse
%%================================
enc_ConferenceUnlockResponse(Val) ->
    enc_ConferenceUnlockResponse(Val, [<<48>>]).

enc_ConferenceUnlockResponse(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
success -> encode_tags([<<128>>], [0], 1);
invalidRequester -> encode_tags([<<128>>], [1], 1);
alreadyUnlocked -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceUnlockResponse(Tlv) ->
   dec_ConferenceUnlockResponse(Tlv, [16]).

dec_ConferenceUnlockResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> success;
1 -> invalidRequester;
2 -> alreadyUnlocked;
Default1 -> {asn1_enum,Default1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceUnlockResponse',Term1},
Res1.


%%================================
%%  ConferenceUnlockIndication
%%================================
enc_ConferenceUnlockIndication(Val) ->
    enc_ConferenceUnlockIndication(Val, [<<48>>]).

enc_ConferenceUnlockIndication(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceUnlockIndication(Tlv) ->
   dec_ConferenceUnlockIndication(Tlv, [16]).

dec_ConferenceUnlockIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ConferenceUnlockIndication'}.



%%================================
%%  ConferenceTerminateRequest
%%================================
enc_ConferenceTerminateRequest(Val) ->
    enc_ConferenceTerminateRequest(Val, [<<48>>]).

enc_ConferenceTerminateRequest(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
userInitiated -> encode_tags([<<128>>], [0], 1);
timedConferenceTermination -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTerminateRequest(Tlv) ->
   dec_ConferenceTerminateRequest(Tlv, [16]).

dec_ConferenceTerminateRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> userInitiated;
1 -> timedConferenceTermination;
Default1 -> {asn1_enum,Default1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTerminateRequest',Term1},
Res1.


%%================================
%%  ConferenceTerminateResponse
%%================================
enc_ConferenceTerminateResponse(Val) ->
    enc_ConferenceTerminateResponse(Val, [<<48>>]).

enc_ConferenceTerminateResponse(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
success -> encode_tags([<<128>>], [0], 1);
invalidRequester -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTerminateResponse(Tlv) ->
   dec_ConferenceTerminateResponse(Tlv, [16]).

dec_ConferenceTerminateResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> success;
1 -> invalidRequester;
Default1 -> {asn1_enum,Default1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTerminateResponse',Term1},
Res1.


%%================================
%%  ConferenceTerminateIndication
%%================================
enc_ConferenceTerminateIndication(Val) ->
    enc_ConferenceTerminateIndication(Val, [<<48>>]).

enc_ConferenceTerminateIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
userInitiated -> encode_tags([<<128>>], [0], 1);
timedConferenceTermination -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTerminateIndication(Tlv) ->
   dec_ConferenceTerminateIndication(Tlv, [16]).

dec_ConferenceTerminateIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> userInitiated;
1 -> timedConferenceTermination;
Default1 -> {asn1_enum,Default1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTerminateIndication',Term1},
Res1.


%%================================
%%  ConferenceEjectUserRequest
%%================================
enc_ConferenceEjectUserRequest(Val) ->
    enc_ConferenceEjectUserRequest(Val, [<<48>>]).

enc_ConferenceEjectUserRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute reason(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
userInitiated -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceEjectUserRequest(Tlv) ->
   dec_ConferenceEjectUserRequest(Tlv, [16]).

dec_ConferenceEjectUserRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reason(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> userInitiated;
Default1 -> {asn1_enum,Default1}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceEjectUserRequest',Term1,Term2},
Res1.


%%================================
%%  ConferenceEjectUserResponse
%%================================
enc_ConferenceEjectUserResponse(Val) ->
    enc_ConferenceEjectUserResponse(Val, [<<48>>]).

enc_ConferenceEjectUserResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute result(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
success -> encode_tags([<<129>>], [0], 1);
invalidRequester -> encode_tags([<<129>>], [1], 1);
invalidNode -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceEjectUserResponse(Tlv) ->
   dec_ConferenceEjectUserResponse(Tlv, [16]).

dec_ConferenceEjectUserResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute result(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> success;
1 -> invalidRequester;
2 -> invalidNode;
Default1 -> {asn1_enum,Default1}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceEjectUserResponse',Term1,Term2},
Res1.


%%================================
%%  ConferenceEjectUserIndication
%%================================
enc_ConferenceEjectUserIndication(Val) ->
    enc_ConferenceEjectUserIndication(Val, [<<48>>]).

enc_ConferenceEjectUserIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute reason(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
userInitiated -> encode_tags([<<129>>], [0], 1);
higherNodeDisconnected -> encode_tags([<<129>>], [1], 1);
higherNodeEjected -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceEjectUserIndication(Tlv) ->
   dec_ConferenceEjectUserIndication(Tlv, [16]).

dec_ConferenceEjectUserIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeToEject(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reason(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> userInitiated;
1 -> higherNodeDisconnected;
2 -> higherNodeEjected;
Default1 -> {asn1_enum,Default1}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceEjectUserIndication',Term1,Term2},
Res1.


%%================================
%%  ConferenceTransferRequest
%%================================
enc_ConferenceTransferRequest(Val) ->
    enc_ConferenceTransferRequest(Val, [<<48>>]).

enc_ConferenceTransferRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceNameSelector'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute networkAddress(3)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddress'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute transferringNodes(4) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceTransferRequest_transferringNodes'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute password(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PasswordSelector'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute networkAddressV2(6)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddressV2'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceTransferRequest_transferringNodes
%%================================
enc_ConferenceTransferRequest_transferringNodes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceTransferRequest_transferringNodes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceTransferRequest_transferringNodes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceTransferRequest_transferringNodes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ConferenceTransferRequest_transferringNodes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceTransferRequest(Tlv) ->
   dec_ConferenceTransferRequest(Tlv, [16]).

dec_ConferenceTransferRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceNameSelector'(V1, [131072]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_restricted_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute networkAddress(3)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_NetworkAddress'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute transferringNodes(4) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ConferenceTransferRequest_transferringNodes'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute password(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_PasswordSelector'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute networkAddressV2(6)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_NetworkAddressV2'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTransferRequest',Term1,Term2,Term3,Term4,Term5,Term6},
Res1.
'dec_ConferenceTransferRequest_transferringNodes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ConferenceTransferResponse
%%================================
enc_ConferenceTransferResponse(Val) ->
    enc_ConferenceTransferResponse(Val, [<<48>>]).

enc_ConferenceTransferResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceNameSelector'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute transferringNodes(3) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceTransferResponse_transferringNodes'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
success -> encode_tags([<<131>>], [0], 1);
invalidRequester -> encode_tags([<<131>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceTransferResponse_transferringNodes
%%================================
enc_ConferenceTransferResponse_transferringNodes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceTransferResponse_transferringNodes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceTransferResponse_transferringNodes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceTransferResponse_transferringNodes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ConferenceTransferResponse_transferringNodes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceTransferResponse(Tlv) ->
   dec_ConferenceTransferResponse(Tlv, [16]).

dec_ConferenceTransferResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceNameSelector'(V1, [131072]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_restricted_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute transferringNodes(3) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ConferenceTransferResponse_transferringNodes'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> success;
1 -> invalidRequester;
Default1 -> {asn1_enum,Default1}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTransferResponse',Term1,Term2,Term3,Term4},
Res1.
'dec_ConferenceTransferResponse_transferringNodes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ConferenceTransferIndication
%%================================
enc_ConferenceTransferIndication(Val) ->
    enc_ConferenceTransferIndication(Val, [<<48>>]).

enc_ConferenceTransferIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6} = Val,

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConferenceNameSelector'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute networkAddress(3)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddress'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute transferringNodes(4) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConferenceTransferIndication_transferringNodes'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute password(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PasswordSelector'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute networkAddressV2(6)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NetworkAddressV2'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConferenceTransferIndication_transferringNodes
%%================================
enc_ConferenceTransferIndication_transferringNodes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConferenceTransferIndication_transferringNodes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConferenceTransferIndication_transferringNodes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConferenceTransferIndication_transferringNodes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ConferenceTransferIndication_transferringNodes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConferenceTransferIndication(Tlv) ->
   dec_ConferenceTransferIndication(Tlv, [16]).

dec_ConferenceTransferIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceName(1)   External GCC-PROTOCOL:ConferenceNameSelector
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConferenceNameSelector'(V1, [131072]),

%%-------------------------------------------------
%% attribute conferenceNameModifier(2) with type NumericString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_restricted_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute networkAddress(3)   External GCC-PROTOCOL:NetworkAddress OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_NetworkAddress'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute transferringNodes(4) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ConferenceTransferIndication_transferringNodes'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute password(5)   External GCC-PROTOCOL:PasswordSelector OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_PasswordSelector'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute networkAddressV2(6)   External GCC-PROTOCOL:NetworkAddressV2 OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_NetworkAddressV2'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTransferIndication',Term1,Term2,Term3,Term4,Term5,Term6},
Res1.
'dec_ConferenceTransferIndication_transferringNodes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  RosterUpdateIndication
%%================================
enc_RosterUpdateIndication(Val) ->
    enc_RosterUpdateIndication(Val, [<<48>>]).

enc_RosterUpdateIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute fullRefresh(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeInformation(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RosterUpdateIndication_nodeInformation'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute applicationInformation(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RosterUpdateIndication_applicationInformation'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_nodeInformation
%%================================
enc_RosterUpdateIndication_nodeInformation(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute nodeRecordList(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute rosterInstanceNumber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nodesAdded(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute nodesRemoved(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      noChange ->
         encode_null(element(2,Val), [<<128>>]);
      refresh ->
         'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(element(2,Val), [<<161>>]);
      update ->
         'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList_refresh
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeRecord(2)   External GCC-PROTOCOL:NodeRecord
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NodeRecord'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList_update
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeUpdate(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate
%%================================
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      addRecord ->
         'enc_NodeRecord'(element(2,Val), [<<160>>]);
      replaceRecord ->
         'enc_NodeRecord'(element(2,Val), [<<161>>]);
      removeRecord ->
         encode_null(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RosterUpdateIndication_applicationInformation
%%================================
enc_RosterUpdateIndication_applicationInformation(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_applicationInformation_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_applicationInformation_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_applicationInformation_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6} = Val,

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SessionKey'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute applicationRecordList(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute applicationCapabilitiesList(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute rosterInstanceNumber(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute peerEntitiesAdded(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute peerEntitiesRemoved(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      noChange ->
         encode_null(element(2,Val), [<<128>>]);
      refresh ->
         'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(element(2,Val), [<<161>>]);
      update ->
         'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute applicationRecord(3)   External GCC-PROTOCOL:ApplicationRecord
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ApplicationRecord'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute applicationUpdate(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      addRecord ->
         'enc_ApplicationRecord'(element(2,Val), [<<160>>]);
      replaceRecord ->
         'enc_ApplicationRecord'(element(2,Val), [<<161>>]);
      removeRecord ->
         encode_null(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      noChange ->
         encode_null(element(2,Val), [<<128>>]);
      refresh ->
         'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(H, [<<48>>]),
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF
%%================================
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CapabilityID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute capabilityClass(2)   External GCC-PROTOCOL:CapabilityClass
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CapabilityClass'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute numberOfEntities(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RosterUpdateIndication(Tlv) ->
   dec_RosterUpdateIndication(Tlv, [16]).

dec_RosterUpdateIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute fullRefresh(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute nodeInformation(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RosterUpdateIndication_nodeInformation'(V2, [131073]),

%%-------------------------------------------------
%% attribute applicationInformation(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RosterUpdateIndication_applicationInformation'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterUpdateIndication',Term1,Term2,Term3},
Res1.
'dec_RosterUpdateIndication_nodeInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeRecordList(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList'(V1, [131072]),

%%-------------------------------------------------
%% attribute rosterInstanceNumber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodesAdded(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute nodesRemoved(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterUpdateIndication_nodeInformation',Term1,Term2,Term3,Term4},
Res1.
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'noChange'
    {131072, V1} -> 
        {noChange, decode_null(V1, [])};


%% 'refresh'
    {131073, V1} -> 
        {refresh, 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(V1, [])};


%% 'update'
    {131074, V1} -> 
        {update, 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodeRecord(2)   External GCC-PROTOCOL:NodeRecord
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_NodeRecord'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF',Term1,Term2},
Res1.
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodeUpdate(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF',Term1,Term2},
Res1.
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'addRecord'
    {131072, V1} -> 
        {addRecord, 'dec_NodeRecord'(V1, [])};


%% 'replaceRecord'
    {131073, V1} -> 
        {replaceRecord, 'dec_NodeRecord'(V1, [])};


%% 'removeRecord'
    {131074, V1} -> 
        {removeRecord, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_RosterUpdateIndication_applicationInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_applicationInformation_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_applicationInformation_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SessionKey'(V1, [131072]),

%%-------------------------------------------------
%% attribute applicationRecordList(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(V2, [131073]),

%%-------------------------------------------------
%% attribute applicationCapabilitiesList(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(V3, [131074]),

%%-------------------------------------------------
%% attribute rosterInstanceNumber(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_integer(V4, [131075]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute peerEntitiesAdded(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute peerEntitiesRemoved(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterUpdateIndication_applicationInformation_SETOF',Term1,Term2,Term3,Term4,Term5,Term6},
Res1.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'noChange'
    {131072, V1} -> 
        {noChange, decode_null(V1, [])};


%% 'refresh'
    {131073, V1} -> 
        {refresh, 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(V1, [])};


%% 'update'
    {131074, V1} -> 
        {update, 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute applicationRecord(3)   External GCC-PROTOCOL:ApplicationRecord
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ApplicationRecord'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF',Term1,Term2,Term3},
Res1.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute entityID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute applicationUpdate(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF',Term1,Term2,Term3},
Res1.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'addRecord'
    {131072, V1} -> 
        {addRecord, 'dec_ApplicationRecord'(V1, [])};


%% 'replaceRecord'
    {131073, V1} -> 
        {replaceRecord, 'dec_ApplicationRecord'(V1, [])};


%% 'removeRecord'
    {131074, V1} -> 
        {removeRecord, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'noChange'
    {131072, V1} -> 
        {noChange, decode_null(V1, [])};


%% 'refresh'
    {131073, V1} -> 
        {refresh, 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute capabilityID(1)   External GCC-PROTOCOL:CapabilityID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CapabilityID'(V1, [131072]),

%%-------------------------------------------------
%% attribute capabilityClass(2)   External GCC-PROTOCOL:CapabilityClass
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CapabilityClass'(V2, [131073]),

%%-------------------------------------------------
%% attribute numberOfEntities(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 1 =< Val1, Val1 =< 65536 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF',Term1,Term2,Term3},
Res1.


%%================================
%%  ApplicationInvokeIndication
%%================================
enc_ApplicationInvokeIndication(Val) ->
    enc_ApplicationInvokeIndication(Val, [<<48>>]).

enc_ApplicationInvokeIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute applicationProtocolEntiyList(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute destinationNodes(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ApplicationInvokeIndication_destinationNodes'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ApplicationInvokeIndication_applicationProtocolEntiyList
%%================================
enc_ApplicationInvokeIndication_applicationProtocolEntiyList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ApplicationInvokeSpecifier'(H, [<<48>>]),
   'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ApplicationInvokeIndication_destinationNodes
%%================================
enc_ApplicationInvokeIndication_destinationNodes(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ApplicationInvokeIndication_destinationNodes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ApplicationInvokeIndication_destinationNodes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ApplicationInvokeIndication_destinationNodes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ApplicationInvokeIndication_destinationNodes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ApplicationInvokeIndication(Tlv) ->
   dec_ApplicationInvokeIndication(Tlv, [16]).

dec_ApplicationInvokeIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute applicationProtocolEntiyList(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ApplicationInvokeIndication_applicationProtocolEntiyList'(V1, [131072]),

%%-------------------------------------------------
%% attribute destinationNodes(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ApplicationInvokeIndication_destinationNodes'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ApplicationInvokeIndication',Term1,Term2},
Res1.
'dec_ApplicationInvokeIndication_applicationProtocolEntiyList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ApplicationInvokeSpecifier'(V1, [16]) || V1 <- Tlv1].


'dec_ApplicationInvokeIndication_destinationNodes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  RegistryRegisterChannelRequest
%%================================
enc_RegistryRegisterChannelRequest(Val) ->
    enc_RegistryRegisterChannelRequest(Val, [<<48>>]).

enc_RegistryRegisterChannelRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute channelID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryRegisterChannelRequest(Tlv) ->
   dec_RegistryRegisterChannelRequest(Tlv, [16]).

dec_RegistryRegisterChannelRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

%%-------------------------------------------------
%% attribute channelID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 1001 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryRegisterChannelRequest',Term1,Term2,Term3},
Res1.


%%================================
%%  RegistryAssignTokenRequest
%%================================
enc_RegistryAssignTokenRequest(Val) ->
    enc_RegistryAssignTokenRequest(Val, [<<48>>]).

enc_RegistryAssignTokenRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryAssignTokenRequest(Tlv) ->
   dec_RegistryAssignTokenRequest(Tlv, [16]).

dec_RegistryAssignTokenRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryAssignTokenRequest',Term1,Term2},
Res1.


%%================================
%%  RegistrySetParameterRequest
%%================================
enc_RegistrySetParameterRequest(Val) ->
    enc_RegistrySetParameterRequest(Val, [<<48>>]).

enc_RegistrySetParameterRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute parameter(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute modificationRights(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
owner -> encode_tags([<<131>>], [0], 1);
session -> encode_tags([<<131>>], [1], 1);
public -> encode_tags([<<131>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistrySetParameterRequest(Tlv) ->
   dec_RegistrySetParameterRequest(Tlv, [16]).

dec_RegistrySetParameterRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

%%-------------------------------------------------
%% attribute parameter(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val2),
if 0 =< C1, C1 =< 64 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute modificationRights(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> owner;
1 -> session;
2 -> public;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistrySetParameterRequest',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  RegistryRetrieveEntryRequest
%%================================
enc_RegistryRetrieveEntryRequest(Val) ->
    enc_RegistryRetrieveEntryRequest(Val, [<<48>>]).

enc_RegistryRetrieveEntryRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryRetrieveEntryRequest(Tlv) ->
   dec_RegistryRetrieveEntryRequest(Tlv, [16]).

dec_RegistryRetrieveEntryRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryRetrieveEntryRequest',Term1,Term2},
Res1.


%%================================
%%  RegistryDeleteEntryRequest
%%================================
enc_RegistryDeleteEntryRequest(Val) ->
    enc_RegistryDeleteEntryRequest(Val, [<<48>>]).

enc_RegistryDeleteEntryRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryDeleteEntryRequest(Tlv) ->
   dec_RegistryDeleteEntryRequest(Tlv, [16]).

dec_RegistryDeleteEntryRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryDeleteEntryRequest',Term1,Term2},
Res1.


%%================================
%%  RegistryMonitorEntryRequest
%%================================
enc_RegistryMonitorEntryRequest(Val) ->
    enc_RegistryMonitorEntryRequest(Val, [<<48>>]).

enc_RegistryMonitorEntryRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryKey'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryMonitorEntryRequest(Tlv) ->
   dec_RegistryMonitorEntryRequest(Tlv, [16]).

dec_RegistryMonitorEntryRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryKey'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryMonitorEntryRequest',Term1,Term2},
Res1.


%%================================
%%  RegistryMonitorEntryIndication
%%================================
enc_RegistryMonitorEntryIndication(Val) ->
    enc_RegistryMonitorEntryIndication(Val, [<<48>>]).

enc_RegistryMonitorEntryIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RegistryKey'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute item(2)   External GCC-PROTOCOL:RegistryItem
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RegistryItem'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute owner(3)   External GCC-PROTOCOL:RegistryEntryOwner
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RegistryEntryOwner'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute modificationRights(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
owner -> encode_tags([<<131>>], [0], 1);
session -> encode_tags([<<131>>], [1], 1);
public -> encode_tags([<<131>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryMonitorEntryIndication(Tlv) ->
   dec_RegistryMonitorEntryIndication(Tlv, [16]).

dec_RegistryMonitorEntryIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key(1)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RegistryKey'(V1, [131072]),

%%-------------------------------------------------
%% attribute item(2)   External GCC-PROTOCOL:RegistryItem
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RegistryItem'(V2, [131073]),

%%-------------------------------------------------
%% attribute owner(3)   External GCC-PROTOCOL:RegistryEntryOwner
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RegistryEntryOwner'(V3, [131074]),

%%-------------------------------------------------
%% attribute modificationRights(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> owner;
1 -> session;
2 -> public;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryMonitorEntryIndication',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  RegistryAllocateHandleRequest
%%================================
enc_RegistryAllocateHandleRequest(Val) ->
    enc_RegistryAllocateHandleRequest(Val, [<<48>>]).

enc_RegistryAllocateHandleRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfHandles(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryAllocateHandleRequest(Tlv) ->
   dec_RegistryAllocateHandleRequest(Tlv, [16]).

dec_RegistryAllocateHandleRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfHandles(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 1024 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryAllocateHandleRequest',Term1,Term2},
Res1.


%%================================
%%  RegistryAllocateHandleResponse
%%================================
enc_RegistryAllocateHandleResponse(Val) ->
    enc_RegistryAllocateHandleResponse(Val, [<<48>>]).

enc_RegistryAllocateHandleResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfHandles(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute firstHandle(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
successful -> encode_tags([<<131>>], [0], 1);
noHandlesAvailable -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryAllocateHandleResponse(Tlv) ->
   dec_RegistryAllocateHandleResponse(Tlv, [16]).

dec_RegistryAllocateHandleResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfHandles(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 1024 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute firstHandle(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute result(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> successful;
1 -> noHandlesAvailable;
Default1 -> {asn1_enum,Default1}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryAllocateHandleResponse',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  RegistryResponse
%%================================
enc_RegistryResponse(Val) ->
    enc_RegistryResponse(Val, [<<48>>]).

enc_RegistryResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute primitiveType(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
registerChannel -> encode_tags([<<129>>], [0], 1);
assignToken -> encode_tags([<<129>>], [1], 1);
setParameter -> encode_tags([<<129>>], [2], 1);
retrieveEntry -> encode_tags([<<129>>], [3], 1);
deleteEntry -> encode_tags([<<129>>], [4], 1);
monitorEntry -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute key(3)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RegistryKey'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute item(4)   External GCC-PROTOCOL:RegistryItem
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_RegistryItem'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute owner(5)   External GCC-PROTOCOL:RegistryEntryOwner
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_RegistryEntryOwner'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute modificationRights(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
owner -> encode_tags([<<133>>], [0], 1);
session -> encode_tags([<<133>>], [1], 1);
public -> encode_tags([<<133>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute result(7) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case Cindex7 of
successful -> encode_tags([<<134>>], [0], 1);
belongsToOther -> encode_tags([<<134>>], [1], 1);
tooManyEntries -> encode_tags([<<134>>], [2], 1);
inconsistentType -> encode_tags([<<134>>], [3], 1);
entryNotFound -> encode_tags([<<134>>], [4], 1);
entryAlreadyExists -> encode_tags([<<134>>], [5], 1);
invalidRequester -> encode_tags([<<134>>], [6], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RegistryResponse(Tlv) ->
   dec_RegistryResponse(Tlv, [16]).

dec_RegistryResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute entityID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute primitiveType(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> registerChannel;
1 -> assignToken;
2 -> setParameter;
3 -> retrieveEntry;
4 -> deleteEntry;
5 -> monitorEntry;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute key(3)   External GCC-PROTOCOL:RegistryKey
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RegistryKey'(V3, [131074]),

%%-------------------------------------------------
%% attribute item(4)   External GCC-PROTOCOL:RegistryItem
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_RegistryItem'(V4, [131075]),

%%-------------------------------------------------
%% attribute owner(5)   External GCC-PROTOCOL:RegistryEntryOwner
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_RegistryEntryOwner'(V5, [131076]),

%%-------------------------------------------------
%% attribute modificationRights(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> owner;
1 -> session;
2 -> public;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute result(7) with type ENUMERATED
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = case decode_integer(V7, [131078]) of
0 -> successful;
1 -> belongsToOther;
2 -> tooManyEntries;
3 -> inconsistentType;
4 -> entryNotFound;
5 -> entryAlreadyExists;
6 -> invalidRequester;
Default3 -> {asn1_enum,Default3}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RegistryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.


%%================================
%%  ConductorAssignIndication
%%================================
enc_ConductorAssignIndication(Val) ->
    enc_ConductorAssignIndication(Val, [<<48>>]).

enc_ConductorAssignIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute conductingNode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConductorAssignIndication(Tlv) ->
   dec_ConductorAssignIndication(Tlv, [16]).

dec_ConductorAssignIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conductingNode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConductorAssignIndication',Term1},
Res1.


%%================================
%%  ConductorReleaseIndication
%%================================
enc_ConductorReleaseIndication(Val) ->
    enc_ConductorReleaseIndication(Val, [<<48>>]).

enc_ConductorReleaseIndication(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConductorReleaseIndication(Tlv) ->
   dec_ConductorReleaseIndication(Tlv, [16]).

dec_ConductorReleaseIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ConductorReleaseIndication'}.



%%================================
%%  ConductorPermissionAskIndication
%%================================
enc_ConductorPermissionAskIndication(Val) ->
    enc_ConductorPermissionAskIndication(Val, [<<48>>]).

enc_ConductorPermissionAskIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute grantFlag(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConductorPermissionAskIndication(Tlv) ->
   dec_ConductorPermissionAskIndication(Tlv, [16]).

dec_ConductorPermissionAskIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute grantFlag(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConductorPermissionAskIndication',Term1},
Res1.


%%================================
%%  ConductorPermissionGrantIndication
%%================================
enc_ConductorPermissionGrantIndication(Val) ->
    enc_ConductorPermissionGrantIndication(Val, [<<48>>]).

enc_ConductorPermissionGrantIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute permissionList(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConductorPermissionGrantIndication_permissionList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute waitingList(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ConductorPermissionGrantIndication_waitingList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConductorPermissionGrantIndication_permissionList
%%================================
enc_ConductorPermissionGrantIndication_permissionList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConductorPermissionGrantIndication_permissionList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConductorPermissionGrantIndication_permissionList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConductorPermissionGrantIndication_permissionList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ConductorPermissionGrantIndication_permissionList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ConductorPermissionGrantIndication_waitingList
%%================================
enc_ConductorPermissionGrantIndication_waitingList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConductorPermissionGrantIndication_waitingList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ConductorPermissionGrantIndication_waitingList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConductorPermissionGrantIndication_waitingList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ConductorPermissionGrantIndication_waitingList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ConductorPermissionGrantIndication(Tlv) ->
   dec_ConductorPermissionGrantIndication(Tlv, [16]).

dec_ConductorPermissionGrantIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute permissionList(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConductorPermissionGrantIndication_permissionList'(V1, [131072]),

%%-------------------------------------------------
%% attribute waitingList(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ConductorPermissionGrantIndication_waitingList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConductorPermissionGrantIndication',Term1,Term2},
Res1.
'dec_ConductorPermissionGrantIndication_permissionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_ConductorPermissionGrantIndication_waitingList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ConferenceTimeRemainingIndication
%%================================
enc_ConferenceTimeRemainingIndication(Val) ->
    enc_ConferenceTimeRemainingIndication(Val, [<<48>>]).

enc_ConferenceTimeRemainingIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute timeRemaining(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTimeRemainingIndication(Tlv) ->
   dec_ConferenceTimeRemainingIndication(Tlv, [16]).

dec_ConferenceTimeRemainingIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute timeRemaining(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodeID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 1001 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTimeRemainingIndication',Term1,Term2},
Res1.


%%================================
%%  ConferenceTimeInquireIndication
%%================================
enc_ConferenceTimeInquireIndication(Val) ->
    enc_ConferenceTimeInquireIndication(Val, [<<48>>]).

enc_ConferenceTimeInquireIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nodeSpecificTimeFlag(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTimeInquireIndication(Tlv) ->
   dec_ConferenceTimeInquireIndication(Tlv, [16]).

dec_ConferenceTimeInquireIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeSpecificTimeFlag(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTimeInquireIndication',Term1},
Res1.


%%================================
%%  ConferenceTimeExtendIndication
%%================================
enc_ConferenceTimeExtendIndication(Val) ->
    enc_ConferenceTimeExtendIndication(Val, [<<48>>]).

enc_ConferenceTimeExtendIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute timeToExtend(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeSpecificTimeFlag(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceTimeExtendIndication(Tlv) ->
   dec_ConferenceTimeExtendIndication(Tlv, [16]).

dec_ConferenceTimeExtendIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute timeToExtend(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodeSpecificTimeFlag(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceTimeExtendIndication',Term1,Term2},
Res1.


%%================================
%%  ConferenceAssistanceIndication
%%================================
enc_ConferenceAssistanceIndication(Val) ->
    enc_ConferenceAssistanceIndication(Val, [<<48>>]).

enc_ConferenceAssistanceIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute userData(1)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UserData'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConferenceAssistanceIndication(Tlv) ->
   dec_ConferenceAssistanceIndication(Tlv, [16]).

dec_ConferenceAssistanceIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute userData(1)   External GCC-PROTOCOL:UserData OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_UserData'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'ConferenceAssistanceIndication',Term1},
Res1.


%%================================
%%  TextMessageIndication
%%================================
enc_TextMessageIndication(Val) ->
    enc_TextMessageIndication(Val, [<<48>>]).

enc_TextMessageIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1) with type BMPString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_BMP_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TextMessageIndication(Tlv) ->
   dec_TextMessageIndication(Tlv, [16]).

dec_TextMessageIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1) with type BMPString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_BMP_string(V1, [131072]),
C1 = length(Val1),
if 0 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'TextMessageIndication',Term1},
Res1.


%%================================
%%  RosterRefreshRequest
%%================================
enc_RosterRefreshRequest(Val) ->
    enc_RosterRefreshRequest(Val, [<<48>>]).

enc_RosterRefreshRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nodeCategory(2)   External GCC-PROTOCOL:NodeCategory
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NodeCategory'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute fullRefresh(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute sendConferenceRoster(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute applicationList(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RosterRefreshRequest_applicationList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute sessionList(6) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RosterRefreshRequest_sessionList'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute nonStandardParameter(7)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NonStandardParameter'(Cindex7, [<<166>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterRefreshRequest_applicationList
%%================================
enc_RosterRefreshRequest_applicationList(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute applicationKeyList(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RosterRefreshRequest_applicationList_applicationKeyList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NonStandardParameter'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterRefreshRequest_applicationList_applicationKeyList
%%================================
enc_RosterRefreshRequest_applicationList_applicationKeyList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(H, [<<48>>]),
   'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterRefreshRequest_applicationList_applicationKeyList_SETOF
%%================================
enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute applicationProtocolKey(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NonStandardParameter'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterRefreshRequest_sessionList
%%================================
enc_RosterRefreshRequest_sessionList(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute sessionKeyList(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RosterRefreshRequest_sessionList_sessionKeyList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NonStandardParameter'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RosterRefreshRequest_sessionList_sessionKeyList
%%================================
enc_RosterRefreshRequest_sessionList_sessionKeyList(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(H, [<<48>>]),
   'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RosterRefreshRequest_sessionList_sessionKeyList_SETOF
%%================================
enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SessionKey'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NonStandardParameter'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RosterRefreshRequest(Tlv) ->
   dec_RosterRefreshRequest(Tlv, [16]).

dec_RosterRefreshRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nodeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1001 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nodeCategory(2)   External GCC-PROTOCOL:NodeCategory
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_NodeCategory'(V2, [131073]),

%%-------------------------------------------------
%% attribute fullRefresh(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute sendConferenceRoster(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_boolean(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute applicationList(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_RosterRefreshRequest_applicationList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute sessionList(6) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_RosterRefreshRequest_sessionList'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute nonStandardParameter(7)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_NonStandardParameter'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterRefreshRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.
'dec_RosterRefreshRequest_applicationList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute applicationKeyList(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RosterRefreshRequest_applicationList_applicationKeyList'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NonStandardParameter'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterRefreshRequest_applicationList',Term1,Term2},
Res1.
'dec_RosterRefreshRequest_applicationList_applicationKeyList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute applicationProtocolKey(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NonStandardParameter'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterRefreshRequest_applicationList_applicationKeyList_SETOF',Term1,Term2},
Res1.
'dec_RosterRefreshRequest_sessionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sessionKeyList(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RosterRefreshRequest_sessionList_sessionKeyList'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NonStandardParameter'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterRefreshRequest_sessionList',Term1,Term2},
Res1.
'dec_RosterRefreshRequest_sessionList_sessionKeyList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(V1, [16]) || V1 <- Tlv1].


'dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sessionKey(1)   External GCC-PROTOCOL:SessionKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SessionKey'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonStandardParameter(2)   External GCC-PROTOCOL:NonStandardParameter OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NonStandardParameter'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'RosterRefreshRequest_sessionList_sessionKeyList_SETOF',Term1,Term2},
Res1.


%%================================
%%  FunctionNotSupportedResponse
%%================================
enc_FunctionNotSupportedResponse(Val) ->
    enc_FunctionNotSupportedResponse(Val, [<<48>>]).

enc_FunctionNotSupportedResponse(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute request(1)   External GCC-PROTOCOL:RequestPDU
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RequestPDU'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_FunctionNotSupportedResponse(Tlv) ->
   dec_FunctionNotSupportedResponse(Tlv, [16]).

dec_FunctionNotSupportedResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute request(1)   External GCC-PROTOCOL:RequestPDU
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RequestPDU'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'FunctionNotSupportedResponse',Term1},
Res1.


%%================================
%%  NonStandardPDU
%%================================
enc_NonStandardPDU(Val) ->
    enc_NonStandardPDU(Val, [<<48>>]).

enc_NonStandardPDU(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute data(1)   External GCC-PROTOCOL:NonStandardParameter
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NonStandardParameter'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_NonStandardPDU(Tlv) ->
   dec_NonStandardPDU(Tlv, [16]).

dec_NonStandardPDU(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute data(1)   External GCC-PROTOCOL:NonStandardParameter
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NonStandardParameter'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
Res1 = {'NonStandardPDU',Term1},
Res1.


%%================================
%%  ConnectData
%%================================
enc_ConnectData(Val) ->
    enc_ConnectData(Val, [<<48>>]).

enc_ConnectData(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute t124Identifier(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute connectPDU(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConnectData(Tlv) ->
   dec_ConnectData(Tlv, [16]).

dec_ConnectData(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t124Identifier(1)   External GCC-PROTOCOL:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute connectPDU(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ConnectData',Term1,Term2},
Res1.


%%================================
%%  ConnectGCCPDU
%%================================
enc_ConnectGCCPDU(Val) ->
    enc_ConnectGCCPDU(Val, []).

enc_ConnectGCCPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      conferenceCreateRequest ->
         'enc_ConferenceCreateRequest'(element(2,Val), [<<160>>]);
      conferenceCreateResponse ->
         'enc_ConferenceCreateResponse'(element(2,Val), [<<161>>]);
      conferenceQueryRequest ->
         'enc_ConferenceQueryRequest'(element(2,Val), [<<162>>]);
      conferenceQueryResponse ->
         'enc_ConferenceQueryResponse'(element(2,Val), [<<163>>]);
      conferenceJoinRequest ->
         'enc_ConferenceJoinRequest'(element(2,Val), [<<164>>]);
      conferenceJoinResponse ->
         'enc_ConferenceJoinResponse'(element(2,Val), [<<165>>]);
      conferenceInviteRequest ->
         'enc_ConferenceInviteRequest'(element(2,Val), [<<166>>]);
      conferenceInviteResponse ->
         'enc_ConferenceInviteResponse'(element(2,Val), [<<167>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConnectGCCPDU(Tlv) ->
   dec_ConnectGCCPDU(Tlv, []).

dec_ConnectGCCPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'conferenceCreateRequest'
    {131072, V1} -> 
        {conferenceCreateRequest, 'dec_ConferenceCreateRequest'(V1, [])};


%% 'conferenceCreateResponse'
    {131073, V1} -> 
        {conferenceCreateResponse, 'dec_ConferenceCreateResponse'(V1, [])};


%% 'conferenceQueryRequest'
    {131074, V1} -> 
        {conferenceQueryRequest, 'dec_ConferenceQueryRequest'(V1, [])};


%% 'conferenceQueryResponse'
    {131075, V1} -> 
        {conferenceQueryResponse, 'dec_ConferenceQueryResponse'(V1, [])};


%% 'conferenceJoinRequest'
    {131076, V1} -> 
        {conferenceJoinRequest, 'dec_ConferenceJoinRequest'(V1, [])};


%% 'conferenceJoinResponse'
    {131077, V1} -> 
        {conferenceJoinResponse, 'dec_ConferenceJoinResponse'(V1, [])};


%% 'conferenceInviteRequest'
    {131078, V1} -> 
        {conferenceInviteRequest, 'dec_ConferenceInviteRequest'(V1, [])};


%% 'conferenceInviteResponse'
    {131079, V1} -> 
        {conferenceInviteResponse, 'dec_ConferenceInviteResponse'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  GCCPDU
%%================================
enc_GCCPDU(Val) ->
    enc_GCCPDU(Val, []).

enc_GCCPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      request ->
         'enc_RequestPDU'(element(2,Val), [<<160>>]);
      response ->
         'enc_ResponsePDU'(element(2,Val), [<<161>>]);
      indication ->
         'enc_IndicationPDU'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_GCCPDU(Tlv) ->
   dec_GCCPDU(Tlv, []).

dec_GCCPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'request'
    {131072, V1} -> 
        {request, 'dec_RequestPDU'(V1, [])};


%% 'response'
    {131073, V1} -> 
        {response, 'dec_ResponsePDU'(V1, [])};


%% 'indication'
    {131074, V1} -> 
        {indication, 'dec_IndicationPDU'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  RequestPDU
%%================================
enc_RequestPDU(Val) ->
    enc_RequestPDU(Val, []).

enc_RequestPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      conferenceJoinRequest ->
         'enc_ConferenceJoinRequest'(element(2,Val), [<<160>>]);
      conferenceAddRequest ->
         'enc_ConferenceAddRequest'(element(2,Val), [<<161>>]);
      conferenceLockRequest ->
         'enc_ConferenceLockRequest'(element(2,Val), [<<162>>]);
      conferenceUnlockRequest ->
         'enc_ConferenceUnlockRequest'(element(2,Val), [<<163>>]);
      conferenceTerminateRequest ->
         'enc_ConferenceTerminateRequest'(element(2,Val), [<<164>>]);
      conferenceEjectUserRequest ->
         'enc_ConferenceEjectUserRequest'(element(2,Val), [<<165>>]);
      conferenceTransferRequest ->
         'enc_ConferenceTransferRequest'(element(2,Val), [<<166>>]);
      registryRegisterChannelRequest ->
         'enc_RegistryRegisterChannelRequest'(element(2,Val), [<<167>>]);
      registryAssignTokenRequest ->
         'enc_RegistryAssignTokenRequest'(element(2,Val), [<<168>>]);
      registrySetParameterRequest ->
         'enc_RegistrySetParameterRequest'(element(2,Val), [<<169>>]);
      registryRetrieveEntryRequest ->
         'enc_RegistryRetrieveEntryRequest'(element(2,Val), [<<170>>]);
      registryDeleteEntryRequest ->
         'enc_RegistryDeleteEntryRequest'(element(2,Val), [<<171>>]);
      registryMonitorEntryRequest ->
         'enc_RegistryMonitorEntryRequest'(element(2,Val), [<<172>>]);
      registryAllocateHandleRequest ->
         'enc_RegistryAllocateHandleRequest'(element(2,Val), [<<173>>]);
      nonStandardRequest ->
         'enc_NonStandardPDU'(element(2,Val), [<<174>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_RequestPDU(Tlv) ->
   dec_RequestPDU(Tlv, []).

dec_RequestPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'conferenceJoinRequest'
    {131072, V1} -> 
        {conferenceJoinRequest, 'dec_ConferenceJoinRequest'(V1, [])};


%% 'conferenceAddRequest'
    {131073, V1} -> 
        {conferenceAddRequest, 'dec_ConferenceAddRequest'(V1, [])};


%% 'conferenceLockRequest'
    {131074, V1} -> 
        {conferenceLockRequest, 'dec_ConferenceLockRequest'(V1, [])};


%% 'conferenceUnlockRequest'
    {131075, V1} -> 
        {conferenceUnlockRequest, 'dec_ConferenceUnlockRequest'(V1, [])};


%% 'conferenceTerminateRequest'
    {131076, V1} -> 
        {conferenceTerminateRequest, 'dec_ConferenceTerminateRequest'(V1, [])};


%% 'conferenceEjectUserRequest'
    {131077, V1} -> 
        {conferenceEjectUserRequest, 'dec_ConferenceEjectUserRequest'(V1, [])};


%% 'conferenceTransferRequest'
    {131078, V1} -> 
        {conferenceTransferRequest, 'dec_ConferenceTransferRequest'(V1, [])};


%% 'registryRegisterChannelRequest'
    {131079, V1} -> 
        {registryRegisterChannelRequest, 'dec_RegistryRegisterChannelRequest'(V1, [])};


%% 'registryAssignTokenRequest'
    {131080, V1} -> 
        {registryAssignTokenRequest, 'dec_RegistryAssignTokenRequest'(V1, [])};


%% 'registrySetParameterRequest'
    {131081, V1} -> 
        {registrySetParameterRequest, 'dec_RegistrySetParameterRequest'(V1, [])};


%% 'registryRetrieveEntryRequest'
    {131082, V1} -> 
        {registryRetrieveEntryRequest, 'dec_RegistryRetrieveEntryRequest'(V1, [])};


%% 'registryDeleteEntryRequest'
    {131083, V1} -> 
        {registryDeleteEntryRequest, 'dec_RegistryDeleteEntryRequest'(V1, [])};


%% 'registryMonitorEntryRequest'
    {131084, V1} -> 
        {registryMonitorEntryRequest, 'dec_RegistryMonitorEntryRequest'(V1, [])};


%% 'registryAllocateHandleRequest'
    {131085, V1} -> 
        {registryAllocateHandleRequest, 'dec_RegistryAllocateHandleRequest'(V1, [])};


%% 'nonStandardRequest'
    {131086, V1} -> 
        {nonStandardRequest, 'dec_NonStandardPDU'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ResponsePDU
%%================================
enc_ResponsePDU(Val) ->
    enc_ResponsePDU(Val, []).

enc_ResponsePDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      conferenceJoinResponse ->
         'enc_ConferenceJoinResponse'(element(2,Val), [<<160>>]);
      conferenceAddResponse ->
         'enc_ConferenceAddResponse'(element(2,Val), [<<161>>]);
      conferenceLockResponse ->
         'enc_ConferenceLockResponse'(element(2,Val), [<<162>>]);
      conferenceUnlockResponse ->
         'enc_ConferenceUnlockResponse'(element(2,Val), [<<163>>]);
      conferenceTerminateResponse ->
         'enc_ConferenceTerminateResponse'(element(2,Val), [<<164>>]);
      conferenceEjectUserResponse ->
         'enc_ConferenceEjectUserResponse'(element(2,Val), [<<165>>]);
      conferenceTransferResponse ->
         'enc_ConferenceTransferResponse'(element(2,Val), [<<166>>]);
      registryResponse ->
         'enc_RegistryResponse'(element(2,Val), [<<167>>]);
      registryAllocateHandleResponse ->
         'enc_RegistryAllocateHandleResponse'(element(2,Val), [<<168>>]);
      functionNotSupportedResponse ->
         'enc_FunctionNotSupportedResponse'(element(2,Val), [<<169>>]);
      nonStandardResponse ->
         'enc_NonStandardPDU'(element(2,Val), [<<170>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ResponsePDU(Tlv) ->
   dec_ResponsePDU(Tlv, []).

dec_ResponsePDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'conferenceJoinResponse'
    {131072, V1} -> 
        {conferenceJoinResponse, 'dec_ConferenceJoinResponse'(V1, [])};


%% 'conferenceAddResponse'
    {131073, V1} -> 
        {conferenceAddResponse, 'dec_ConferenceAddResponse'(V1, [])};


%% 'conferenceLockResponse'
    {131074, V1} -> 
        {conferenceLockResponse, 'dec_ConferenceLockResponse'(V1, [])};


%% 'conferenceUnlockResponse'
    {131075, V1} -> 
        {conferenceUnlockResponse, 'dec_ConferenceUnlockResponse'(V1, [])};


%% 'conferenceTerminateResponse'
    {131076, V1} -> 
        {conferenceTerminateResponse, 'dec_ConferenceTerminateResponse'(V1, [])};


%% 'conferenceEjectUserResponse'
    {131077, V1} -> 
        {conferenceEjectUserResponse, 'dec_ConferenceEjectUserResponse'(V1, [])};


%% 'conferenceTransferResponse'
    {131078, V1} -> 
        {conferenceTransferResponse, 'dec_ConferenceTransferResponse'(V1, [])};


%% 'registryResponse'
    {131079, V1} -> 
        {registryResponse, 'dec_RegistryResponse'(V1, [])};


%% 'registryAllocateHandleResponse'
    {131080, V1} -> 
        {registryAllocateHandleResponse, 'dec_RegistryAllocateHandleResponse'(V1, [])};


%% 'functionNotSupportedResponse'
    {131081, V1} -> 
        {functionNotSupportedResponse, 'dec_FunctionNotSupportedResponse'(V1, [])};


%% 'nonStandardResponse'
    {131082, V1} -> 
        {nonStandardResponse, 'dec_NonStandardPDU'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  IndicationPDU
%%================================
enc_IndicationPDU(Val) ->
    enc_IndicationPDU(Val, []).

enc_IndicationPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      userIDIndication ->
         'enc_UserIDIndication'(element(2,Val), [<<160>>]);
      conferenceLockIndication ->
         'enc_ConferenceLockIndication'(element(2,Val), [<<161>>]);
      conferenceUnlockIndication ->
         'enc_ConferenceUnlockIndication'(element(2,Val), [<<162>>]);
      conferenceTerminateIndication ->
         'enc_ConferenceTerminateIndication'(element(2,Val), [<<163>>]);
      conferenceEjectUserIndication ->
         'enc_ConferenceEjectUserIndication'(element(2,Val), [<<164>>]);
      conferenceTransferIndication ->
         'enc_ConferenceTransferIndication'(element(2,Val), [<<165>>]);
      rosterUpdateIndication ->
         'enc_RosterUpdateIndication'(element(2,Val), [<<166>>]);
      applicationInvokeIndication ->
         'enc_ApplicationInvokeIndication'(element(2,Val), [<<167>>]);
      registryMonitorEntryIndication ->
         'enc_RegistryMonitorEntryIndication'(element(2,Val), [<<168>>]);
      conductorAssignIndication ->
         'enc_ConductorAssignIndication'(element(2,Val), [<<169>>]);
      conductorReleaseIndication ->
         'enc_ConductorReleaseIndication'(element(2,Val), [<<170>>]);
      conductorPermissionAskIndication ->
         'enc_ConductorPermissionAskIndication'(element(2,Val), [<<171>>]);
      conductorPermissionGrantIndication ->
         'enc_ConductorPermissionGrantIndication'(element(2,Val), [<<172>>]);
      conferenceTimeRemainingIndication ->
         'enc_ConferenceTimeRemainingIndication'(element(2,Val), [<<173>>]);
      conferenceTimeInquireIndication ->
         'enc_ConferenceTimeInquireIndication'(element(2,Val), [<<174>>]);
      conferenceTimeExtendIndication ->
         'enc_ConferenceTimeExtendIndication'(element(2,Val), [<<175>>]);
      conferenceAssistanceIndication ->
         'enc_ConferenceAssistanceIndication'(element(2,Val), [<<176>>]);
      textMessageIndication ->
         'enc_TextMessageIndication'(element(2,Val), [<<177>>]);
      nonStandardIndication ->
         'enc_NonStandardPDU'(element(2,Val), [<<178>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_IndicationPDU(Tlv) ->
   dec_IndicationPDU(Tlv, []).

dec_IndicationPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'userIDIndication'
    {131072, V1} -> 
        {userIDIndication, 'dec_UserIDIndication'(V1, [])};


%% 'conferenceLockIndication'
    {131073, V1} -> 
        {conferenceLockIndication, 'dec_ConferenceLockIndication'(V1, [])};


%% 'conferenceUnlockIndication'
    {131074, V1} -> 
        {conferenceUnlockIndication, 'dec_ConferenceUnlockIndication'(V1, [])};


%% 'conferenceTerminateIndication'
    {131075, V1} -> 
        {conferenceTerminateIndication, 'dec_ConferenceTerminateIndication'(V1, [])};


%% 'conferenceEjectUserIndication'
    {131076, V1} -> 
        {conferenceEjectUserIndication, 'dec_ConferenceEjectUserIndication'(V1, [])};


%% 'conferenceTransferIndication'
    {131077, V1} -> 
        {conferenceTransferIndication, 'dec_ConferenceTransferIndication'(V1, [])};


%% 'rosterUpdateIndication'
    {131078, V1} -> 
        {rosterUpdateIndication, 'dec_RosterUpdateIndication'(V1, [])};


%% 'applicationInvokeIndication'
    {131079, V1} -> 
        {applicationInvokeIndication, 'dec_ApplicationInvokeIndication'(V1, [])};


%% 'registryMonitorEntryIndication'
    {131080, V1} -> 
        {registryMonitorEntryIndication, 'dec_RegistryMonitorEntryIndication'(V1, [])};


%% 'conductorAssignIndication'
    {131081, V1} -> 
        {conductorAssignIndication, 'dec_ConductorAssignIndication'(V1, [])};


%% 'conductorReleaseIndication'
    {131082, V1} -> 
        {conductorReleaseIndication, 'dec_ConductorReleaseIndication'(V1, [])};


%% 'conductorPermissionAskIndication'
    {131083, V1} -> 
        {conductorPermissionAskIndication, 'dec_ConductorPermissionAskIndication'(V1, [])};


%% 'conductorPermissionGrantIndication'
    {131084, V1} -> 
        {conductorPermissionGrantIndication, 'dec_ConductorPermissionGrantIndication'(V1, [])};


%% 'conferenceTimeRemainingIndication'
    {131085, V1} -> 
        {conferenceTimeRemainingIndication, 'dec_ConferenceTimeRemainingIndication'(V1, [])};


%% 'conferenceTimeInquireIndication'
    {131086, V1} -> 
        {conferenceTimeInquireIndication, 'dec_ConferenceTimeInquireIndication'(V1, [])};


%% 'conferenceTimeExtendIndication'
    {131087, V1} -> 
        {conferenceTimeExtendIndication, 'dec_ConferenceTimeExtendIndication'(V1, [])};


%% 'conferenceAssistanceIndication'
    {131088, V1} -> 
        {conferenceAssistanceIndication, 'dec_ConferenceAssistanceIndication'(V1, [])};


%% 'textMessageIndication'
    {131089, V1} -> 
        {textMessageIndication, 'dec_TextMessageIndication'(V1, [])};


%% 'nonStandardIndication'
    {131090, V1} -> 
        {nonStandardIndication, 'dec_NonStandardPDU'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.

%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_, L} | Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L) | Acc]);
collect_parts([{3, <<Unused,Bits/binary>>} | Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T, V} | Rest], Acc) ->
    collect_parts(Rest, [V | Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3, <<Unused,Bits/binary>>} | Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits | Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc | lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H | Al]).

decode_BMP_string(Buffer, Tags) ->
    Bin = match_and_collect(Buffer, Tags),
    mk_BMP_string(binary_to_list(Bin)).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error, {asn1, {decode_boolean, Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error, {asn1, {decode_null, Val}}})
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal | ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1, Val2} =
        if
            AddedObjVal < 40 ->
                {0, AddedObjVal};
            AddedObjVal < 80 ->
                {1, AddedObjVal - 40};
            true ->
                {2, AddedObjVal - 80}
        end,
    list_to_tuple([Val1, Val2 | ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

e_object_identifier({'OBJECT IDENTIFIER', V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1, E2 | Tail]) ->
    Head = 40 * E1 + E2,
    {H, Lh} = mk_object_val(Head),
    {R, Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H | R], Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B, L} = mk_object_val(H),
    {B, Len + L}.

encode_BMP_string(BMPString, TagIn) ->
    OctetList = mk_BMP_list(BMPString),
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error, {asn1, {encode_boolean, X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes, length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error, {asn1, {encode_integer, Val}}}).

encode_integer_neg(- 1, [B1 | _T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255 | Acc]).

encode_integer_pos(0, [B | _Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255 | Acc]).

encode_length(L) when L =< 127 ->
    {[L], 1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len | Oct], Len + 1};
        true ->
            exit({error, {asn1, too_long_length_oct, Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar, LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag | Trest], BytesSoFar, LenSoFar) ->
    {Bytes2, L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag, Bytes2 | BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar, LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_ | _] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T, V}, [T]) ->
    V;
match_tags({T, V}, [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, V}], [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, _V} | _] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag, _V} = Tlv, [T | _Tt]) ->
    exit({error, {asn1, {wrong_tag, {{expected, T}, {got, Tag, Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255 | Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_BMP_list(In) ->
    mk_BMP_list(In, []).

mk_BMP_list([], List) ->
    lists:reverse(List);
mk_BMP_list([{0, 0, C, D} | T], List) ->
    mk_BMP_list(T, [D, C | List]);
mk_BMP_list([H | T], List) ->
    mk_BMP_list(T, [H, 0 | List]).

mk_BMP_string(In) ->
    mk_BMP_string(In, []).

mk_BMP_string([], US) ->
    lists:reverse(US);
mk_BMP_string([0, B | T], US) ->
    mk_BMP_string(T, [B | US]);
mk_BMP_string([C, D | T], US) ->
    mk_BMP_string(T, [{0, 0, C, D} | US]).

mk_object_val(0, Ack, Len) ->
    {Ack, Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128 | Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val], 1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).
