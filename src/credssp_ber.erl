%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.17
%% Purpose: Encoding and decoding of the types in CREDSSP.

-module('credssp_ber').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("credssp.hrl").
-asn1_info([{vsn,'5.0.17'},
            {module,'credssp_ber'},
            {options,[der,noout,{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_TSRequest/2,
enc_NegoData/2,
enc_TSCredentials/2,
enc_TSCredType/2,
enc_TSPasswordCreds/2,
enc_TSSmartCardCreds/2,
enc_TSCspDataDetail/2,
enc_TSRemoteGuardCreds/2,
enc_TSRemoteGuardPackageCred/2
]).

-export([
dec_TSRequest/2,
dec_NegoData/2,
dec_TSCredentials/2,
dec_TSCredType/2,
dec_TSPasswordCreds/2,
dec_TSSmartCardCreds/2,
dec_TSCspDataDetail/2,
dec_TSRemoteGuardCreds/2,
dec_TSRemoteGuardPackageCred/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try
   Result = decode_disp(Type, element(1, ber_decode_nif(Data))),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('TSRequest', Data) -> enc_TSRequest(Data);
encode_disp('NegoData', Data) -> enc_NegoData(Data);
encode_disp('TSCredentials', Data) -> enc_TSCredentials(Data);
encode_disp('TSCredType', Data) -> enc_TSCredType(Data);
encode_disp('TSPasswordCreds', Data) -> enc_TSPasswordCreds(Data);
encode_disp('TSSmartCardCreds', Data) -> enc_TSSmartCardCreds(Data);
encode_disp('TSCspDataDetail', Data) -> enc_TSCspDataDetail(Data);
encode_disp('TSRemoteGuardCreds', Data) -> enc_TSRemoteGuardCreds(Data);
encode_disp('TSRemoteGuardPackageCred', Data) -> enc_TSRemoteGuardPackageCred(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('TSRequest', Data) -> dec_TSRequest(Data);
decode_disp('NegoData', Data) -> dec_NegoData(Data);
decode_disp('TSCredentials', Data) -> dec_TSCredentials(Data);
decode_disp('TSCredType', Data) -> dec_TSCredType(Data);
decode_disp('TSPasswordCreds', Data) -> dec_TSPasswordCreds(Data);
decode_disp('TSSmartCardCreds', Data) -> dec_TSSmartCardCreds(Data);
decode_disp('TSCspDataDetail', Data) -> dec_TSCspDataDetail(Data);
decode_disp('TSRemoteGuardCreds', Data) -> dec_TSRemoteGuardCreds(Data);
decode_disp('TSRemoteGuardPackageCred', Data) -> dec_TSRemoteGuardPackageCred(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  TSRequest
%%================================
enc_TSRequest(Val) ->
    enc_TSRequest(Val, [<<48>>]).

enc_TSRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6} = Val,

%%-------------------------------------------------
%% attribute version(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>,<<160>>]),

%%-------------------------------------------------
%% attribute negoTokens(2)   External CREDSSP:NegoData OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NegoData'(Cindex2, [<<48>>,<<161>>])
       end,

%%-------------------------------------------------
%% attribute authInfo(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<4>>,<<162>>])
       end,

%%-------------------------------------------------
%% attribute pubKeyAuth(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<4>>,<<163>>])
       end,

%%-------------------------------------------------
%% attribute errorCode(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<2>>,<<164>>])
       end,

%%-------------------------------------------------
%% attribute clientNonce(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<4>>,<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSRequest(Tlv) ->
   dec_TSRequest(Tlv, [16]).

dec_TSRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute version(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072,2]),

%%-------------------------------------------------
%% attribute negoTokens(2)   External CREDSSP:NegoData OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NegoData'(V2, [16]), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute authInfo(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, [4]), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute pubKeyAuth(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, [4]), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute errorCode(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, [2]), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute clientNonce(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_octet_string(V6, [4]), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
Res1 = {'TSRequest',Term1,Term2,Term3,Term4,Term5,Term6},
Res1.


%%================================
%%  NegoData
%%================================
enc_NegoData(Val) ->
    enc_NegoData(Val, [<<48>>]).

enc_NegoData(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NegoData_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NegoData_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NegoData_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NegoData_SEQOF'(H, [<<48>>]),
   'enc_NegoData_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NegoData_SEQOF
%%================================
enc_NegoData_SEQOF(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute negoToken(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>,<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_NegoData(Tlv) ->
   dec_NegoData(Tlv, [16]).

dec_NegoData(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NegoData_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_NegoData_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute negoToken(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072,4]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'NegoData_SEQOF',Term1},
Res1.


%%================================
%%  TSCredentials
%%================================
enc_TSCredentials(Val) ->
    enc_TSCredentials(Val, [<<48>>]).

enc_TSCredentials(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute credType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [{password,1},{smartcard,2},{remoteguard,6}], [<<2>>,<<160>>]),

%%-------------------------------------------------
%% attribute credentials(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>,<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSCredentials(Tlv) ->
   dec_TSCredentials(Tlv, [16]).

dec_TSCredentials(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute credType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072,2]),
number2name(Val1, [{password,1},{smartcard,2},{remoteguard,6}])
end
,

%%-------------------------------------------------
%% attribute credentials(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073,4]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TSCredentials',Term1,Term2},
Res1.


%%================================
%%  TSCredType
%%================================
enc_TSCredType(Val) ->
    enc_TSCredType(Val, [<<2>>]).

enc_TSCredType(Val, TagIn) ->
encode_integer(Val, [{password,1},{smartcard,2},{remoteguard,6}], TagIn).


dec_TSCredType(Tlv) ->
   dec_TSCredType(Tlv, [2]).

dec_TSCredType(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{password,1},{smartcard,2},{remoteguard,6}])
end
.



%%================================
%%  TSPasswordCreds
%%================================
enc_TSPasswordCreds(Val) ->
    enc_TSPasswordCreds(Val, [<<48>>]).

enc_TSPasswordCreds(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute domainName(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>,<<160>>]),

%%-------------------------------------------------
%% attribute userName(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>,<<161>>]),

%%-------------------------------------------------
%% attribute password(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<4>>,<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSPasswordCreds(Tlv) ->
   dec_TSPasswordCreds(Tlv, [16]).

dec_TSPasswordCreds(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute domainName(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072,4]),

%%-------------------------------------------------
%% attribute userName(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073,4]),

%%-------------------------------------------------
%% attribute password(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074,4]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TSPasswordCreds',Term1,Term2,Term3},
Res1.


%%================================
%%  TSSmartCardCreds
%%================================
enc_TSSmartCardCreds(Val) ->
    enc_TSSmartCardCreds(Val, [<<48>>]).

enc_TSSmartCardCreds(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute pin(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>,<<160>>]),

%%-------------------------------------------------
%% attribute cspData(2)   External CREDSSP:TSCspDataDetail
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TSCspDataDetail'(Cindex2, [<<48>>,<<161>>]),

%%-------------------------------------------------
%% attribute userHint(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<4>>,<<162>>])
       end,

%%-------------------------------------------------
%% attribute domainHint(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<4>>,<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSSmartCardCreds(Tlv) ->
   dec_TSSmartCardCreds(Tlv, [16]).

dec_TSSmartCardCreds(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pin(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072,4]),

%%-------------------------------------------------
%% attribute cspData(2)   External CREDSSP:TSCspDataDetail
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TSCspDataDetail'(V2, [131073,16]),

%%-------------------------------------------------
%% attribute userHint(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, [4]), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute domainHint(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, [4]), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'TSSmartCardCreds',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  TSCspDataDetail
%%================================
enc_TSCspDataDetail(Val) ->
    enc_TSCspDataDetail(Val, [<<48>>]).

enc_TSCspDataDetail(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute keySpec(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>,<<160>>]),

%%-------------------------------------------------
%% attribute cardName(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>,<<161>>]),

%%-------------------------------------------------
%% attribute readerName(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<4>>,<<162>>]),

%%-------------------------------------------------
%% attribute containerName(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<4>>,<<163>>]),

%%-------------------------------------------------
%% attribute cspName(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<4>>,<<164>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSCspDataDetail(Tlv) ->
   dec_TSCspDataDetail(Tlv, [16]).

dec_TSCspDataDetail(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keySpec(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072,2]),

%%-------------------------------------------------
%% attribute cardName(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073,4]),

%%-------------------------------------------------
%% attribute readerName(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074,4]),

%%-------------------------------------------------
%% attribute containerName(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_octet_string(V4, [131075,4]),

%%-------------------------------------------------
%% attribute cspName(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [131076,4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'TSCspDataDetail',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  TSRemoteGuardCreds
%%================================
enc_TSRemoteGuardCreds(Val) ->
    enc_TSRemoteGuardCreds(Val, [<<48>>]).

enc_TSRemoteGuardCreds(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute logonCred(1)   External CREDSSP:TSRemoteGuardPackageCred
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TSRemoteGuardPackageCred'(Cindex1, [<<48>>,<<160>>]),

%%-------------------------------------------------
%% attribute supplementalCreds(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TSRemoteGuardCreds_supplementalCreds'(Cindex2, [<<48>>,<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TSRemoteGuardCreds_supplementalCreds
%%================================
enc_TSRemoteGuardCreds_supplementalCreds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TSRemoteGuardCreds_supplementalCreds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TSRemoteGuardCreds_supplementalCreds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TSRemoteGuardCreds_supplementalCreds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TSRemoteGuardPackageCred'(H, [<<48>>]),
   'enc_TSRemoteGuardCreds_supplementalCreds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_TSRemoteGuardCreds(Tlv) ->
   dec_TSRemoteGuardCreds(Tlv, [16]).

dec_TSRemoteGuardCreds(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute logonCred(1)   External CREDSSP:TSRemoteGuardPackageCred
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TSRemoteGuardPackageCred'(V1, [131072,16]),

%%-------------------------------------------------
%% attribute supplementalCreds(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_TSRemoteGuardCreds_supplementalCreds'(V2, [16]), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TSRemoteGuardCreds',Term1,Term2},
Res1.
'dec_TSRemoteGuardCreds_supplementalCreds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TSRemoteGuardPackageCred'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TSRemoteGuardPackageCred
%%================================
enc_TSRemoteGuardPackageCred(Val) ->
    enc_TSRemoteGuardPackageCred(Val, [<<48>>]).

enc_TSRemoteGuardPackageCred(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute packageName(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>,<<160>>]),

%%-------------------------------------------------
%% attribute credBuffer(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>,<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TSRemoteGuardPackageCred(Tlv) ->
   dec_TSRemoteGuardPackageCred(Tlv, [16]).

dec_TSRemoteGuardPackageCred(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute packageName(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072,4]),

%%-------------------------------------------------
%% attribute credBuffer(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073,4]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TSRemoteGuardPackageCred',Term1,Term2},
Res1.

%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_, L} | Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L) | Acc]);
collect_parts([{3, <<Unused,Bits/binary>>} | Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T, V} | Rest], Acc) ->
    collect_parts(Rest, [V | Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3, <<Unused,Bits/binary>>} | Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits | Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc | lists:reverse(Acc)]).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes, length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_, NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error, {asn1, {encode_integer_namednumber, Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error, {asn1, {encode_integer, Val}}}).

encode_integer_neg(- 1, [B1 | _T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255 | Acc]).

encode_integer_pos(0, [B | _Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255 | Acc]).

encode_length(L) when L =< 127 ->
    {[L], 1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len | Oct], Len + 1};
        true ->
            exit({error, {asn1, too_long_length_oct, Len}})
    end.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar, LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag | Trest], BytesSoFar, LenSoFar) ->
    {Bytes2, L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag, Bytes2 | BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar, LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_ | _] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T, V}, [T]) ->
    V;
match_tags({T, V}, [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, V}], [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, _V} | _] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag, _V} = Tlv, [T | _Tt]) ->
    exit({error, {asn1, {wrong_tag, {{expected, T}, {got, Tag, Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255 | Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal, _} ->
            NamedVal;
        _ ->
            Int
    end.
