%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.16
%% Purpose: Encoding and decoding of the types in MCS-PROTOCOL.

-module('mcsp_ber').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("mcsp.hrl").
-asn1_info([{vsn,'5.0.16'},
            {module,'MCS-PROTOCOL'},
            {options,[warnings,ber,errors,
 {cwd,"/home/alex/dev/rdp_proto"},
 {outdir,"/home/alex/dev/rdp_proto"},
 verbose,undec_rest,ber,
 {i,"."},
 {i,"/home/alex/dev/rdp_proto"}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_ChannelId/2,
enc_StaticChannelId/2,
enc_DynamicChannelId/2,
enc_UserId/2,
enc_PrivateChannelId/2,
enc_AssignedChannelId/2,
enc_TokenId/2,
enc_TokenStatus/2,
enc_DataPriority/2,
enc_Segmentation/2,
enc_DomainParameters/2,
'enc_Connect-Initial'/2,
'enc_Connect-Response'/2,
'enc_Connect-Additional'/2,
'enc_Connect-Result'/2,
enc_PlumbDomainIndication/2,
enc_ErectDomainRequest/2,
enc_ChannelAttributes/2,
enc_MergeChannelsRequest/2,
enc_MergeChannelsConfirm/2,
enc_PurgeChannelsIndication/2,
enc_TokenAttributes/2,
enc_MergeTokensRequest/2,
enc_MergeTokensConfirm/2,
enc_PurgeTokensIndication/2,
enc_DisconnectProviderUltimatum/2,
enc_RejectMCSPDUUltimatum/2,
enc_AttachUserRequest/2,
enc_AttachUserConfirm/2,
enc_DetachUserRequest/2,
enc_DetachUserIndication/2,
enc_ChannelJoinRequest/2,
enc_ChannelJoinConfirm/2,
enc_ChannelLeaveRequest/2,
enc_ChannelConveneRequest/2,
enc_ChannelConveneConfirm/2,
enc_ChannelDisbandRequest/2,
enc_ChannelDisbandIndication/2,
enc_ChannelAdmitRequest/2,
enc_ChannelAdmitIndication/2,
enc_ChannelExpelRequest/2,
enc_ChannelExpelIndication/2,
enc_SendDataRequest/2,
enc_SendDataIndication/2,
enc_UniformSendDataRequest/2,
enc_UniformSendDataIndication/2,
enc_TokenGrabRequest/2,
enc_TokenGrabConfirm/2,
enc_TokenInhibitRequest/2,
enc_TokenInhibitConfirm/2,
enc_TokenGiveRequest/2,
enc_TokenGiveIndication/2,
enc_TokenGiveResponse/2,
enc_TokenGiveConfirm/2,
enc_TokenPleaseRequest/2,
enc_TokenPleaseIndication/2,
enc_TokenReleaseRequest/2,
enc_TokenReleaseConfirm/2,
enc_TokenTestRequest/2,
enc_TokenTestConfirm/2,
enc_Reason/2,
enc_Result/2,
enc_Diagnostic/2,
enc_ConnectMCSPDU/2,
enc_DomainMCSPDU/2
]).

-export([
dec_ChannelId/2,
dec_StaticChannelId/2,
dec_DynamicChannelId/2,
dec_UserId/2,
dec_PrivateChannelId/2,
dec_AssignedChannelId/2,
dec_TokenId/2,
dec_TokenStatus/2,
dec_DataPriority/2,
dec_Segmentation/2,
dec_DomainParameters/2,
'dec_Connect-Initial'/2,
'dec_Connect-Response'/2,
'dec_Connect-Additional'/2,
'dec_Connect-Result'/2,
dec_PlumbDomainIndication/2,
dec_ErectDomainRequest/2,
dec_ChannelAttributes/2,
dec_MergeChannelsRequest/2,
dec_MergeChannelsConfirm/2,
dec_PurgeChannelsIndication/2,
dec_TokenAttributes/2,
dec_MergeTokensRequest/2,
dec_MergeTokensConfirm/2,
dec_PurgeTokensIndication/2,
dec_DisconnectProviderUltimatum/2,
dec_RejectMCSPDUUltimatum/2,
dec_AttachUserRequest/2,
dec_AttachUserConfirm/2,
dec_DetachUserRequest/2,
dec_DetachUserIndication/2,
dec_ChannelJoinRequest/2,
dec_ChannelJoinConfirm/2,
dec_ChannelLeaveRequest/2,
dec_ChannelConveneRequest/2,
dec_ChannelConveneConfirm/2,
dec_ChannelDisbandRequest/2,
dec_ChannelDisbandIndication/2,
dec_ChannelAdmitRequest/2,
dec_ChannelAdmitIndication/2,
dec_ChannelExpelRequest/2,
dec_ChannelExpelIndication/2,
dec_SendDataRequest/2,
dec_SendDataIndication/2,
dec_UniformSendDataRequest/2,
dec_UniformSendDataIndication/2,
dec_TokenGrabRequest/2,
dec_TokenGrabConfirm/2,
dec_TokenInhibitRequest/2,
dec_TokenInhibitConfirm/2,
dec_TokenGiveRequest/2,
dec_TokenGiveIndication/2,
dec_TokenGiveResponse/2,
dec_TokenGiveConfirm/2,
dec_TokenPleaseRequest/2,
dec_TokenPleaseIndication/2,
dec_TokenReleaseRequest/2,
dec_TokenReleaseConfirm/2,
dec_TokenTestRequest/2,
dec_TokenTestConfirm/2,
dec_Reason/2,
dec_Result/2,
dec_Diagnostic/2,
dec_ConnectMCSPDU/2,
dec_DomainMCSPDU/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data0) ->
try
   {Data,Rest} = ber_decode_nif(Data0),
   Result = decode_disp(Type, Data),
   {ok,Result,Rest}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ChannelId', Data) -> enc_ChannelId(Data);
encode_disp('StaticChannelId', Data) -> enc_StaticChannelId(Data);
encode_disp('DynamicChannelId', Data) -> enc_DynamicChannelId(Data);
encode_disp('UserId', Data) -> enc_UserId(Data);
encode_disp('PrivateChannelId', Data) -> enc_PrivateChannelId(Data);
encode_disp('AssignedChannelId', Data) -> enc_AssignedChannelId(Data);
encode_disp('TokenId', Data) -> enc_TokenId(Data);
encode_disp('TokenStatus', Data) -> enc_TokenStatus(Data);
encode_disp('DataPriority', Data) -> enc_DataPriority(Data);
encode_disp('Segmentation', Data) -> enc_Segmentation(Data);
encode_disp('DomainParameters', Data) -> enc_DomainParameters(Data);
encode_disp('Connect-Initial', Data) -> 'enc_Connect-Initial'(Data);
encode_disp('Connect-Response', Data) -> 'enc_Connect-Response'(Data);
encode_disp('Connect-Additional', Data) -> 'enc_Connect-Additional'(Data);
encode_disp('Connect-Result', Data) -> 'enc_Connect-Result'(Data);
encode_disp('PlumbDomainIndication', Data) -> enc_PlumbDomainIndication(Data);
encode_disp('ErectDomainRequest', Data) -> enc_ErectDomainRequest(Data);
encode_disp('ChannelAttributes', Data) -> enc_ChannelAttributes(Data);
encode_disp('MergeChannelsRequest', Data) -> enc_MergeChannelsRequest(Data);
encode_disp('MergeChannelsConfirm', Data) -> enc_MergeChannelsConfirm(Data);
encode_disp('PurgeChannelsIndication', Data) -> enc_PurgeChannelsIndication(Data);
encode_disp('TokenAttributes', Data) -> enc_TokenAttributes(Data);
encode_disp('MergeTokensRequest', Data) -> enc_MergeTokensRequest(Data);
encode_disp('MergeTokensConfirm', Data) -> enc_MergeTokensConfirm(Data);
encode_disp('PurgeTokensIndication', Data) -> enc_PurgeTokensIndication(Data);
encode_disp('DisconnectProviderUltimatum', Data) -> enc_DisconnectProviderUltimatum(Data);
encode_disp('RejectMCSPDUUltimatum', Data) -> enc_RejectMCSPDUUltimatum(Data);
encode_disp('AttachUserRequest', Data) -> enc_AttachUserRequest(Data);
encode_disp('AttachUserConfirm', Data) -> enc_AttachUserConfirm(Data);
encode_disp('DetachUserRequest', Data) -> enc_DetachUserRequest(Data);
encode_disp('DetachUserIndication', Data) -> enc_DetachUserIndication(Data);
encode_disp('ChannelJoinRequest', Data) -> enc_ChannelJoinRequest(Data);
encode_disp('ChannelJoinConfirm', Data) -> enc_ChannelJoinConfirm(Data);
encode_disp('ChannelLeaveRequest', Data) -> enc_ChannelLeaveRequest(Data);
encode_disp('ChannelConveneRequest', Data) -> enc_ChannelConveneRequest(Data);
encode_disp('ChannelConveneConfirm', Data) -> enc_ChannelConveneConfirm(Data);
encode_disp('ChannelDisbandRequest', Data) -> enc_ChannelDisbandRequest(Data);
encode_disp('ChannelDisbandIndication', Data) -> enc_ChannelDisbandIndication(Data);
encode_disp('ChannelAdmitRequest', Data) -> enc_ChannelAdmitRequest(Data);
encode_disp('ChannelAdmitIndication', Data) -> enc_ChannelAdmitIndication(Data);
encode_disp('ChannelExpelRequest', Data) -> enc_ChannelExpelRequest(Data);
encode_disp('ChannelExpelIndication', Data) -> enc_ChannelExpelIndication(Data);
encode_disp('SendDataRequest', Data) -> enc_SendDataRequest(Data);
encode_disp('SendDataIndication', Data) -> enc_SendDataIndication(Data);
encode_disp('UniformSendDataRequest', Data) -> enc_UniformSendDataRequest(Data);
encode_disp('UniformSendDataIndication', Data) -> enc_UniformSendDataIndication(Data);
encode_disp('TokenGrabRequest', Data) -> enc_TokenGrabRequest(Data);
encode_disp('TokenGrabConfirm', Data) -> enc_TokenGrabConfirm(Data);
encode_disp('TokenInhibitRequest', Data) -> enc_TokenInhibitRequest(Data);
encode_disp('TokenInhibitConfirm', Data) -> enc_TokenInhibitConfirm(Data);
encode_disp('TokenGiveRequest', Data) -> enc_TokenGiveRequest(Data);
encode_disp('TokenGiveIndication', Data) -> enc_TokenGiveIndication(Data);
encode_disp('TokenGiveResponse', Data) -> enc_TokenGiveResponse(Data);
encode_disp('TokenGiveConfirm', Data) -> enc_TokenGiveConfirm(Data);
encode_disp('TokenPleaseRequest', Data) -> enc_TokenPleaseRequest(Data);
encode_disp('TokenPleaseIndication', Data) -> enc_TokenPleaseIndication(Data);
encode_disp('TokenReleaseRequest', Data) -> enc_TokenReleaseRequest(Data);
encode_disp('TokenReleaseConfirm', Data) -> enc_TokenReleaseConfirm(Data);
encode_disp('TokenTestRequest', Data) -> enc_TokenTestRequest(Data);
encode_disp('TokenTestConfirm', Data) -> enc_TokenTestConfirm(Data);
encode_disp('Reason', Data) -> enc_Reason(Data);
encode_disp('Result', Data) -> enc_Result(Data);
encode_disp('Diagnostic', Data) -> enc_Diagnostic(Data);
encode_disp('ConnectMCSPDU', Data) -> enc_ConnectMCSPDU(Data);
encode_disp('DomainMCSPDU', Data) -> enc_DomainMCSPDU(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ChannelId', Data) -> dec_ChannelId(Data);
decode_disp('StaticChannelId', Data) -> dec_StaticChannelId(Data);
decode_disp('DynamicChannelId', Data) -> dec_DynamicChannelId(Data);
decode_disp('UserId', Data) -> dec_UserId(Data);
decode_disp('PrivateChannelId', Data) -> dec_PrivateChannelId(Data);
decode_disp('AssignedChannelId', Data) -> dec_AssignedChannelId(Data);
decode_disp('TokenId', Data) -> dec_TokenId(Data);
decode_disp('TokenStatus', Data) -> dec_TokenStatus(Data);
decode_disp('DataPriority', Data) -> dec_DataPriority(Data);
decode_disp('Segmentation', Data) -> dec_Segmentation(Data);
decode_disp('DomainParameters', Data) -> dec_DomainParameters(Data);
decode_disp('Connect-Initial', Data) -> 'dec_Connect-Initial'(Data);
decode_disp('Connect-Response', Data) -> 'dec_Connect-Response'(Data);
decode_disp('Connect-Additional', Data) -> 'dec_Connect-Additional'(Data);
decode_disp('Connect-Result', Data) -> 'dec_Connect-Result'(Data);
decode_disp('PlumbDomainIndication', Data) -> dec_PlumbDomainIndication(Data);
decode_disp('ErectDomainRequest', Data) -> dec_ErectDomainRequest(Data);
decode_disp('ChannelAttributes', Data) -> dec_ChannelAttributes(Data);
decode_disp('MergeChannelsRequest', Data) -> dec_MergeChannelsRequest(Data);
decode_disp('MergeChannelsConfirm', Data) -> dec_MergeChannelsConfirm(Data);
decode_disp('PurgeChannelsIndication', Data) -> dec_PurgeChannelsIndication(Data);
decode_disp('TokenAttributes', Data) -> dec_TokenAttributes(Data);
decode_disp('MergeTokensRequest', Data) -> dec_MergeTokensRequest(Data);
decode_disp('MergeTokensConfirm', Data) -> dec_MergeTokensConfirm(Data);
decode_disp('PurgeTokensIndication', Data) -> dec_PurgeTokensIndication(Data);
decode_disp('DisconnectProviderUltimatum', Data) -> dec_DisconnectProviderUltimatum(Data);
decode_disp('RejectMCSPDUUltimatum', Data) -> dec_RejectMCSPDUUltimatum(Data);
decode_disp('AttachUserRequest', Data) -> dec_AttachUserRequest(Data);
decode_disp('AttachUserConfirm', Data) -> dec_AttachUserConfirm(Data);
decode_disp('DetachUserRequest', Data) -> dec_DetachUserRequest(Data);
decode_disp('DetachUserIndication', Data) -> dec_DetachUserIndication(Data);
decode_disp('ChannelJoinRequest', Data) -> dec_ChannelJoinRequest(Data);
decode_disp('ChannelJoinConfirm', Data) -> dec_ChannelJoinConfirm(Data);
decode_disp('ChannelLeaveRequest', Data) -> dec_ChannelLeaveRequest(Data);
decode_disp('ChannelConveneRequest', Data) -> dec_ChannelConveneRequest(Data);
decode_disp('ChannelConveneConfirm', Data) -> dec_ChannelConveneConfirm(Data);
decode_disp('ChannelDisbandRequest', Data) -> dec_ChannelDisbandRequest(Data);
decode_disp('ChannelDisbandIndication', Data) -> dec_ChannelDisbandIndication(Data);
decode_disp('ChannelAdmitRequest', Data) -> dec_ChannelAdmitRequest(Data);
decode_disp('ChannelAdmitIndication', Data) -> dec_ChannelAdmitIndication(Data);
decode_disp('ChannelExpelRequest', Data) -> dec_ChannelExpelRequest(Data);
decode_disp('ChannelExpelIndication', Data) -> dec_ChannelExpelIndication(Data);
decode_disp('SendDataRequest', Data) -> dec_SendDataRequest(Data);
decode_disp('SendDataIndication', Data) -> dec_SendDataIndication(Data);
decode_disp('UniformSendDataRequest', Data) -> dec_UniformSendDataRequest(Data);
decode_disp('UniformSendDataIndication', Data) -> dec_UniformSendDataIndication(Data);
decode_disp('TokenGrabRequest', Data) -> dec_TokenGrabRequest(Data);
decode_disp('TokenGrabConfirm', Data) -> dec_TokenGrabConfirm(Data);
decode_disp('TokenInhibitRequest', Data) -> dec_TokenInhibitRequest(Data);
decode_disp('TokenInhibitConfirm', Data) -> dec_TokenInhibitConfirm(Data);
decode_disp('TokenGiveRequest', Data) -> dec_TokenGiveRequest(Data);
decode_disp('TokenGiveIndication', Data) -> dec_TokenGiveIndication(Data);
decode_disp('TokenGiveResponse', Data) -> dec_TokenGiveResponse(Data);
decode_disp('TokenGiveConfirm', Data) -> dec_TokenGiveConfirm(Data);
decode_disp('TokenPleaseRequest', Data) -> dec_TokenPleaseRequest(Data);
decode_disp('TokenPleaseIndication', Data) -> dec_TokenPleaseIndication(Data);
decode_disp('TokenReleaseRequest', Data) -> dec_TokenReleaseRequest(Data);
decode_disp('TokenReleaseConfirm', Data) -> dec_TokenReleaseConfirm(Data);
decode_disp('TokenTestRequest', Data) -> dec_TokenTestRequest(Data);
decode_disp('TokenTestConfirm', Data) -> dec_TokenTestConfirm(Data);
decode_disp('Reason', Data) -> dec_Reason(Data);
decode_disp('Result', Data) -> dec_Result(Data);
decode_disp('Diagnostic', Data) -> dec_Diagnostic(Data);
decode_disp('ConnectMCSPDU', Data) -> dec_ConnectMCSPDU(Data);
decode_disp('DomainMCSPDU', Data) -> dec_DomainMCSPDU(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  ChannelId
%%================================
enc_ChannelId(Val) ->
    enc_ChannelId(Val, [<<2>>]).

enc_ChannelId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_ChannelId(Tlv) ->
   dec_ChannelId(Tlv, [2]).

dec_ChannelId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  StaticChannelId
%%================================
enc_StaticChannelId(Val) ->
    enc_StaticChannelId(Val, [<<2>>]).

enc_StaticChannelId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_StaticChannelId(Tlv) ->
   dec_StaticChannelId(Tlv, [2]).

dec_StaticChannelId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DynamicChannelId
%%================================
enc_DynamicChannelId(Val) ->
    enc_DynamicChannelId(Val, [<<2>>]).

enc_DynamicChannelId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_DynamicChannelId(Tlv) ->
   dec_DynamicChannelId(Tlv, [2]).

dec_DynamicChannelId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UserId
%%================================
enc_UserId(Val) ->
    enc_UserId(Val, [<<2>>]).

enc_UserId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_UserId(Tlv) ->
   dec_UserId(Tlv, [2]).

dec_UserId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PrivateChannelId
%%================================
enc_PrivateChannelId(Val) ->
    enc_PrivateChannelId(Val, [<<2>>]).

enc_PrivateChannelId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_PrivateChannelId(Tlv) ->
   dec_PrivateChannelId(Tlv, [2]).

dec_PrivateChannelId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AssignedChannelId
%%================================
enc_AssignedChannelId(Val) ->
    enc_AssignedChannelId(Val, [<<2>>]).

enc_AssignedChannelId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_AssignedChannelId(Tlv) ->
   dec_AssignedChannelId(Tlv, [2]).

dec_AssignedChannelId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TokenId
%%================================
enc_TokenId(Val) ->
    enc_TokenId(Val, [<<2>>]).

enc_TokenId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_TokenId(Tlv) ->
   dec_TokenId(Tlv, [2]).

dec_TokenId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TokenStatus
%%================================
enc_TokenStatus(Val) ->
    enc_TokenStatus(Val, [<<10>>]).

enc_TokenStatus(Val, TagIn) ->
case Val of
notInUse -> encode_tags(TagIn, [0], 1);
selfGrabbed -> encode_tags(TagIn, [1], 1);
otherGrabbed -> encode_tags(TagIn, [2], 1);
selfInhibited -> encode_tags(TagIn, [3], 1);
otherInhibited -> encode_tags(TagIn, [4], 1);
selfRecipient -> encode_tags(TagIn, [5], 1);
selfGiving -> encode_tags(TagIn, [6], 1);
otherGiving -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_TokenStatus(Tlv) ->
   dec_TokenStatus(Tlv, [10]).

dec_TokenStatus(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DataPriority
%%================================
enc_DataPriority(Val) ->
    enc_DataPriority(Val, [<<10>>]).

enc_DataPriority(Val, TagIn) ->
case Val of
top -> encode_tags(TagIn, [0], 1);
high -> encode_tags(TagIn, [1], 1);
medium -> encode_tags(TagIn, [2], 1);
low -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_DataPriority(Tlv) ->
   dec_DataPriority(Tlv, [10]).

dec_DataPriority(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Segmentation
%%================================
enc_Segmentation(Val) ->
    enc_Segmentation(Val, [<<3>>]).

enc_Segmentation(Val, TagIn) ->
encode_named_bit_string(2, Val, [{'begin',0},{'end',1}], TagIn).


dec_Segmentation(Tlv) ->
   dec_Segmentation(Tlv, [3]).

dec_Segmentation(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{'begin',0},{'end',1}], TagIn).



%%================================
%%  DomainParameters
%%================================
enc_DomainParameters(Val) ->
    enc_DomainParameters(Val, [<<48>>]).

enc_DomainParameters(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8} = Val,

%%-------------------------------------------------
%% attribute maxChannelIds(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute maxUserIds(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute maxTokenIds(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute numPriorities(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute minThroughput(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute maxHeight(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute maxMCSPDUsize(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute protocolVersion(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_integer(Cindex8, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_DomainParameters(Tlv) ->
   dec_DomainParameters(Tlv, [16]).

dec_DomainParameters(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute maxChannelIds(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute maxUserIds(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 'MAX' ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute maxTokenIds(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [2]),
if 0 =< Val3, Val3 =< 'MAX' ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numPriorities(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [2]),
if 0 =< Val4, Val4 =< 'MAX' ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute minThroughput(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val5 = decode_integer(V5, [2]),
if 0 =< Val5, Val5 =< 'MAX' ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute maxHeight(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val6 = decode_integer(V6, [2]),
if 0 =< Val6, Val6 =< 'MAX' ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute maxMCSPDUsize(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
Val7 = decode_integer(V7, [2]),
if 0 =< Val7, Val7 =< 'MAX' ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute protocolVersion(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = begin
Val8 = decode_integer(V8, [2]),
if 0 =< Val8, Val8 =< 'MAX' ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
Res1 = {'DomainParameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
Res1.


%%================================
%%  Connect-Initial
%%================================
'enc_Connect-Initial'(Val) ->
    'enc_Connect-Initial'(Val, [<<127,101>>]).

'enc_Connect-Initial'(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7} = Val,

%%-------------------------------------------------
%% attribute callingDomainSelector(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>]),

%%-------------------------------------------------
%% attribute calledDomainSelector(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>]),

%%-------------------------------------------------
%% attribute upwardFlag(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<1>>]),

%%-------------------------------------------------
%% attribute targetParameters(4)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DomainParameters'(Cindex4, [<<48>>]),

%%-------------------------------------------------
%% attribute minimumParameters(5)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_DomainParameters'(Cindex5, [<<48>>]),

%%-------------------------------------------------
%% attribute maximumParameters(6)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_DomainParameters'(Cindex6, [<<48>>]),

%%-------------------------------------------------
%% attribute userData(7) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Initial'(Tlv) ->
   'dec_Connect-Initial'(Tlv, [65637]).

'dec_Connect-Initial'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callingDomainSelector(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [4]),

%%-------------------------------------------------
%% attribute calledDomainSelector(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [4]),

%%-------------------------------------------------
%% attribute upwardFlag(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [1]),

%%-------------------------------------------------
%% attribute targetParameters(4)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_DomainParameters'(V4, [16]),

%%-------------------------------------------------
%% attribute minimumParameters(5)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_DomainParameters'(V5, [16]),

%%-------------------------------------------------
%% attribute maximumParameters(6)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_DomainParameters'(V6, [16]),

%%-------------------------------------------------
%% attribute userData(7) with type OCTET STRING
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_octet_string(V7, [4]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
Res1 = {'Connect-Initial',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
Res1.


%%================================
%%  Connect-Response
%%================================
'enc_Connect-Response'(Val) ->
    'enc_Connect-Response'(Val, [<<127,102>>]).

'enc_Connect-Response'(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute calledConnectId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute domainParameters(3)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_DomainParameters'(Cindex3, [<<48>>]),

%%-------------------------------------------------
%% attribute userData(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Response'(Tlv) ->
   'dec_Connect-Response'(Tlv, [65638]).

'dec_Connect-Response'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute calledConnectId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute domainParameters(3)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_DomainParameters'(V3, [16]),

%%-------------------------------------------------
%% attribute userData(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_octet_string(V4, [4]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'Connect-Response',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  Connect-Additional
%%================================
'enc_Connect-Additional'(Val) ->
    'enc_Connect-Additional'(Val, [<<127,103>>]).

'enc_Connect-Additional'(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute calledConnectId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
top -> encode_tags([<<10>>], [0], 1);
high -> encode_tags([<<10>>], [1], 1);
medium -> encode_tags([<<10>>], [2], 1);
low -> encode_tags([<<10>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Additional'(Tlv) ->
   'dec_Connect-Additional'(Tlv, [65639]).

'dec_Connect-Additional'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledConnectId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataPriority(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [10]) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'Connect-Additional',Term1,Term2},
Res1.


%%================================
%%  Connect-Result
%%================================
'enc_Connect-Result'(Val) ->
    'enc_Connect-Result'(Val, [<<127,104>>]).

'enc_Connect-Result'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Result'(Tlv) ->
   'dec_Connect-Result'(Tlv, [65640]).

'dec_Connect-Result'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'Connect-Result',Term1},
Res1.


%%================================
%%  PlumbDomainIndication
%%================================
enc_PlumbDomainIndication(Val) ->
    enc_PlumbDomainIndication(Val, [<<96>>]).

enc_PlumbDomainIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute heightLimit(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_PlumbDomainIndication(Tlv) ->
   dec_PlumbDomainIndication(Tlv, [65536]).

dec_PlumbDomainIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute heightLimit(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'PlumbDomainIndication',Term1},
Res1.


%%================================
%%  ErectDomainRequest
%%================================
enc_ErectDomainRequest(Val) ->
    enc_ErectDomainRequest(Val, [<<97>>]).

enc_ErectDomainRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute subHeight(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute subInterval(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ErectDomainRequest(Tlv) ->
   dec_ErectDomainRequest(Tlv, [65537]).

dec_ErectDomainRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute subHeight(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute subInterval(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 'MAX' ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ErectDomainRequest',Term1,Term2},
Res1.


%%================================
%%  ChannelAttributes
%%================================
enc_ChannelAttributes(Val) ->
    enc_ChannelAttributes(Val, []).

enc_ChannelAttributes(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      static ->
         'enc_ChannelAttributes_static'(element(2,Val), [<<160>>]);
      userId ->
         'enc_ChannelAttributes_userId'(element(2,Val), [<<161>>]);
      private ->
         'enc_ChannelAttributes_private'(element(2,Val), [<<162>>]);
      assigned ->
         'enc_ChannelAttributes_assigned'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ChannelAttributes_static
%%================================
enc_ChannelAttributes_static(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAttributes_userId
%%================================
enc_ChannelAttributes_userId(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<1>>]),

%%-------------------------------------------------
%% attribute userId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAttributes_private
%%================================
enc_ChannelAttributes_private(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<1>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute manager(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute admitted(4) with type SET OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_ChannelAttributes_private_admitted'(Cindex4, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAttributes_private_admitted
%%================================
enc_ChannelAttributes_private_admitted(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAttributes_private_admitted_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAttributes_private_admitted_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAttributes_private_admitted_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelAttributes_private_admitted_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ChannelAttributes_assigned
%%================================
enc_ChannelAttributes_assigned(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelAttributes(Tlv) ->
   dec_ChannelAttributes(Tlv, []).

dec_ChannelAttributes(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'static'
    {131072, V1} -> 
        {static, 'dec_ChannelAttributes_static'(V1, [])};


%% 'userId'
    {131073, V1} -> 
        {userId, 'dec_ChannelAttributes_userId'(V1, [])};


%% 'private'
    {131074, V1} -> 
        {private, 'dec_ChannelAttributes_private'(V1, [])};


%% 'assigned'
    {131075, V1} -> 
        {assigned, 'dec_ChannelAttributes_assigned'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ChannelAttributes_static'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'ChannelAttributes_static',Term1},
Res1.
'dec_ChannelAttributes_userId'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [1]),

%%-------------------------------------------------
%% attribute userId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ChannelAttributes_userId',Term1,Term2},
Res1.
'dec_ChannelAttributes_private'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [1]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute manager(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute admitted(4) with type SET OF
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_ChannelAttributes_private_admitted'(V4, [17]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'ChannelAttributes_private',Term1,Term2,Term3,Term4},
Res1.
'dec_ChannelAttributes_private_admitted'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_ChannelAttributes_assigned'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'ChannelAttributes_assigned',Term1},
Res1.


%%================================
%%  MergeChannelsRequest
%%================================
enc_MergeChannelsRequest(Val) ->
    enc_MergeChannelsRequest(Val, [<<98>>]).

enc_MergeChannelsRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeChannelsRequest_mergeChannels'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeChannelsRequest_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeChannelsRequest_mergeChannels
%%================================
enc_MergeChannelsRequest_mergeChannels(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsRequest_mergeChannels_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsRequest_mergeChannels_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsRequest_mergeChannels_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChannelAttributes'(H, []),
   'enc_MergeChannelsRequest_mergeChannels_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MergeChannelsRequest_purgeChannelIds
%%================================
enc_MergeChannelsRequest_purgeChannelIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsRequest_purgeChannelIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsRequest_purgeChannelIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsRequest_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MergeChannelsRequest_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_MergeChannelsRequest(Tlv) ->
   dec_MergeChannelsRequest(Tlv, [65538]).

dec_MergeChannelsRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MergeChannelsRequest_mergeChannels'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MergeChannelsRequest_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'MergeChannelsRequest',Term1,Term2},
Res1.
'dec_MergeChannelsRequest_mergeChannels'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ChannelAttributes'(V1, []) || V1 <- Tlv1].


'dec_MergeChannelsRequest_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MergeChannelsConfirm
%%================================
enc_MergeChannelsConfirm(Val) ->
    enc_MergeChannelsConfirm(Val, [<<99>>]).

enc_MergeChannelsConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeChannelsConfirm_mergeChannels'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeChannelsConfirm_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeChannelsConfirm_mergeChannels
%%================================
enc_MergeChannelsConfirm_mergeChannels(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsConfirm_mergeChannels_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsConfirm_mergeChannels_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsConfirm_mergeChannels_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChannelAttributes'(H, []),
   'enc_MergeChannelsConfirm_mergeChannels_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MergeChannelsConfirm_purgeChannelIds
%%================================
enc_MergeChannelsConfirm_purgeChannelIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsConfirm_purgeChannelIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsConfirm_purgeChannelIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsConfirm_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MergeChannelsConfirm_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_MergeChannelsConfirm(Tlv) ->
   dec_MergeChannelsConfirm(Tlv, [65539]).

dec_MergeChannelsConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MergeChannelsConfirm_mergeChannels'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MergeChannelsConfirm_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'MergeChannelsConfirm',Term1,Term2},
Res1.
'dec_MergeChannelsConfirm_mergeChannels'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ChannelAttributes'(V1, []) || V1 <- Tlv1].


'dec_MergeChannelsConfirm_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  PurgeChannelsIndication
%%================================
enc_PurgeChannelsIndication(Val) ->
    enc_PurgeChannelsIndication(Val, [<<100>>]).

enc_PurgeChannelsIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute detachUserIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PurgeChannelsIndication_detachUserIds'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PurgeChannelsIndication_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PurgeChannelsIndication_detachUserIds
%%================================
enc_PurgeChannelsIndication_detachUserIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeChannelsIndication_detachUserIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeChannelsIndication_detachUserIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeChannelsIndication_detachUserIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_PurgeChannelsIndication_detachUserIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PurgeChannelsIndication_purgeChannelIds
%%================================
enc_PurgeChannelsIndication_purgeChannelIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeChannelsIndication_purgeChannelIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeChannelsIndication_purgeChannelIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeChannelsIndication_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_PurgeChannelsIndication_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_PurgeChannelsIndication(Tlv) ->
   dec_PurgeChannelsIndication(Tlv, [65540]).

dec_PurgeChannelsIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute detachUserIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PurgeChannelsIndication_detachUserIds'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PurgeChannelsIndication_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'PurgeChannelsIndication',Term1,Term2},
Res1.
'dec_PurgeChannelsIndication_detachUserIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_PurgeChannelsIndication_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  TokenAttributes
%%================================
enc_TokenAttributes(Val) ->
    enc_TokenAttributes(Val, []).

enc_TokenAttributes(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      grabbed ->
         'enc_TokenAttributes_grabbed'(element(2,Val), [<<160>>]);
      inhibited ->
         'enc_TokenAttributes_inhibited'(element(2,Val), [<<161>>]);
      giving ->
         'enc_TokenAttributes_giving'(element(2,Val), [<<162>>]);
      ungivable ->
         'enc_TokenAttributes_ungivable'(element(2,Val), [<<163>>]);
      given ->
         'enc_TokenAttributes_given'(element(2,Val), [<<164>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TokenAttributes_grabbed
%%================================
enc_TokenAttributes_grabbed(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TokenAttributes_inhibited
%%================================
enc_TokenAttributes_inhibited(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute inhibitors(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TokenAttributes_inhibited_inhibitors'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TokenAttributes_inhibited_inhibitors
%%================================
enc_TokenAttributes_inhibited_inhibitors(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TokenAttributes_inhibited_inhibitors_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TokenAttributes_inhibited_inhibitors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TokenAttributes_inhibited_inhibitors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_TokenAttributes_inhibited_inhibitors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TokenAttributes_giving
%%================================
enc_TokenAttributes_giving(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TokenAttributes_ungivable
%%================================
enc_TokenAttributes_ungivable(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TokenAttributes_given
%%================================
enc_TokenAttributes_given(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenAttributes(Tlv) ->
   dec_TokenAttributes(Tlv, []).

dec_TokenAttributes(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'grabbed'
    {131072, V1} -> 
        {grabbed, 'dec_TokenAttributes_grabbed'(V1, [])};


%% 'inhibited'
    {131073, V1} -> 
        {inhibited, 'dec_TokenAttributes_inhibited'(V1, [])};


%% 'giving'
    {131074, V1} -> 
        {giving, 'dec_TokenAttributes_giving'(V1, [])};


%% 'ungivable'
    {131075, V1} -> 
        {ungivable, 'dec_TokenAttributes_ungivable'(V1, [])};


%% 'given'
    {131076, V1} -> 
        {given, 'dec_TokenAttributes_given'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_TokenAttributes_grabbed'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenAttributes_grabbed',Term1,Term2},
Res1.
'dec_TokenAttributes_inhibited'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute inhibitors(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TokenAttributes_inhibited_inhibitors'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenAttributes_inhibited',Term1,Term2},
Res1.
'dec_TokenAttributes_inhibited_inhibitors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_TokenAttributes_giving'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [2]),
if 0 =< Val3, Val3 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TokenAttributes_giving',Term1,Term2,Term3},
Res1.
'dec_TokenAttributes_ungivable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenAttributes_ungivable',Term1,Term2},
Res1.
'dec_TokenAttributes_given'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenAttributes_given',Term1,Term2},
Res1.


%%================================
%%  MergeTokensRequest
%%================================
enc_MergeTokensRequest(Val) ->
    enc_MergeTokensRequest(Val, [<<101>>]).

enc_MergeTokensRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeTokensRequest_mergeTokens'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeTokensRequest_purgeTokenIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeTokensRequest_mergeTokens
%%================================
enc_MergeTokensRequest_mergeTokens(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensRequest_mergeTokens_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensRequest_mergeTokens_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensRequest_mergeTokens_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TokenAttributes'(H, []),
   'enc_MergeTokensRequest_mergeTokens_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MergeTokensRequest_purgeTokenIds
%%================================
enc_MergeTokensRequest_purgeTokenIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensRequest_purgeTokenIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensRequest_purgeTokenIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensRequest_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MergeTokensRequest_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_MergeTokensRequest(Tlv) ->
   dec_MergeTokensRequest(Tlv, [65541]).

dec_MergeTokensRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MergeTokensRequest_mergeTokens'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MergeTokensRequest_purgeTokenIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'MergeTokensRequest',Term1,Term2},
Res1.
'dec_MergeTokensRequest_mergeTokens'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TokenAttributes'(V1, []) || V1 <- Tlv1].


'dec_MergeTokensRequest_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MergeTokensConfirm
%%================================
enc_MergeTokensConfirm(Val) ->
    enc_MergeTokensConfirm(Val, [<<102>>]).

enc_MergeTokensConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeTokensConfirm_mergeTokens'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeTokensConfirm_purgeTokenIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeTokensConfirm_mergeTokens
%%================================
enc_MergeTokensConfirm_mergeTokens(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensConfirm_mergeTokens_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensConfirm_mergeTokens_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensConfirm_mergeTokens_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TokenAttributes'(H, []),
   'enc_MergeTokensConfirm_mergeTokens_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MergeTokensConfirm_purgeTokenIds
%%================================
enc_MergeTokensConfirm_purgeTokenIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensConfirm_purgeTokenIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensConfirm_purgeTokenIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensConfirm_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MergeTokensConfirm_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_MergeTokensConfirm(Tlv) ->
   dec_MergeTokensConfirm(Tlv, [65542]).

dec_MergeTokensConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MergeTokensConfirm_mergeTokens'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MergeTokensConfirm_purgeTokenIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'MergeTokensConfirm',Term1,Term2},
Res1.
'dec_MergeTokensConfirm_mergeTokens'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TokenAttributes'(V1, []) || V1 <- Tlv1].


'dec_MergeTokensConfirm_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  PurgeTokensIndication
%%================================
enc_PurgeTokensIndication(Val) ->
    enc_PurgeTokensIndication(Val, [<<103>>]).

enc_PurgeTokensIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute purgeTokenIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PurgeTokensIndication_purgeTokenIds'(Cindex1, [<<49>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PurgeTokensIndication_purgeTokenIds
%%================================
enc_PurgeTokensIndication_purgeTokenIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeTokensIndication_purgeTokenIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeTokensIndication_purgeTokenIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeTokensIndication_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_PurgeTokensIndication_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_PurgeTokensIndication(Tlv) ->
   dec_PurgeTokensIndication(Tlv, [65543]).

dec_PurgeTokensIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute purgeTokenIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PurgeTokensIndication_purgeTokenIds'(V1, [17]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'PurgeTokensIndication',Term1},
Res1.
'dec_PurgeTokensIndication_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  DisconnectProviderUltimatum
%%================================
enc_DisconnectProviderUltimatum(Val) ->
    enc_DisconnectProviderUltimatum(Val, [<<104>>]).

enc_DisconnectProviderUltimatum(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> encode_tags([<<10>>], [0], 1);
'rn-provider-initiated' -> encode_tags([<<10>>], [1], 1);
'rn-token-purged' -> encode_tags([<<10>>], [2], 1);
'rn-user-requested' -> encode_tags([<<10>>], [3], 1);
'rn-channel-purged' -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_DisconnectProviderUltimatum(Tlv) ->
   dec_DisconnectProviderUltimatum(Tlv, [65544]).

dec_DisconnectProviderUltimatum(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rn-domain-disconnected';
1 -> 'rn-provider-initiated';
2 -> 'rn-token-purged';
3 -> 'rn-user-requested';
4 -> 'rn-channel-purged';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'DisconnectProviderUltimatum',Term1},
Res1.


%%================================
%%  RejectMCSPDUUltimatum
%%================================
enc_RejectMCSPDUUltimatum(Val) ->
    enc_RejectMCSPDUUltimatum(Val, [<<105>>]).

enc_RejectMCSPDUUltimatum(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute diagnostic(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'dc-inconsistent-merge' -> encode_tags([<<10>>], [0], 1);
'dc-forbidden-PDU-downward' -> encode_tags([<<10>>], [1], 1);
'dc-forbidden-PDU-upward' -> encode_tags([<<10>>], [2], 1);
'dc-invalid-BER-encoding' -> encode_tags([<<10>>], [3], 1);
'dc-invalid-PER-encoding' -> encode_tags([<<10>>], [4], 1);
'dc-misrouted-user' -> encode_tags([<<10>>], [5], 1);
'dc-unrequested-confirm' -> encode_tags([<<10>>], [6], 1);
'dc-wrong-transport-priority' -> encode_tags([<<10>>], [7], 1);
'dc-channel-id-conflict' -> encode_tags([<<10>>], [8], 1);
'dc-token-id-conflict' -> encode_tags([<<10>>], [9], 1);
'dc-not-user-id-channel' -> encode_tags([<<10>>], [10], 1);
'dc-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'dc-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'dc-too-many-users' -> encode_tags([<<10>>], [13], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initialOctets(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RejectMCSPDUUltimatum(Tlv) ->
   dec_RejectMCSPDUUltimatum(Tlv, [65545]).

dec_RejectMCSPDUUltimatum(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute diagnostic(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'dc-inconsistent-merge';
1 -> 'dc-forbidden-PDU-downward';
2 -> 'dc-forbidden-PDU-upward';
3 -> 'dc-invalid-BER-encoding';
4 -> 'dc-invalid-PER-encoding';
5 -> 'dc-misrouted-user';
6 -> 'dc-unrequested-confirm';
7 -> 'dc-wrong-transport-priority';
8 -> 'dc-channel-id-conflict';
9 -> 'dc-token-id-conflict';
10 -> 'dc-not-user-id-channel';
11 -> 'dc-too-many-channels';
12 -> 'dc-too-many-tokens';
13 -> 'dc-too-many-users';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initialOctets(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [4]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RejectMCSPDUUltimatum',Term1,Term2},
Res1.


%%================================
%%  AttachUserRequest
%%================================
enc_AttachUserRequest(Val) ->
    enc_AttachUserRequest(Val, [<<106>>]).

enc_AttachUserRequest(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AttachUserRequest(Tlv) ->
   dec_AttachUserRequest(Tlv, [65546]).

dec_AttachUserRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'AttachUserRequest'}.



%%================================
%%  AttachUserConfirm
%%================================
enc_AttachUserConfirm(Val) ->
    enc_AttachUserConfirm(Val, [<<107>>]).

enc_AttachUserConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AttachUserConfirm(Tlv) ->
   dec_AttachUserConfirm(Tlv, [65547]).

dec_AttachUserConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{2,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'AttachUserConfirm',Term1,Term2},
Res1.


%%================================
%%  DetachUserRequest
%%================================
enc_DetachUserRequest(Val) ->
    enc_DetachUserRequest(Val, [<<108>>]).

enc_DetachUserRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> encode_tags([<<10>>], [0], 1);
'rn-provider-initiated' -> encode_tags([<<10>>], [1], 1);
'rn-token-purged' -> encode_tags([<<10>>], [2], 1);
'rn-user-requested' -> encode_tags([<<10>>], [3], 1);
'rn-channel-purged' -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DetachUserRequest_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DetachUserRequest_userIds
%%================================
enc_DetachUserRequest_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DetachUserRequest_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DetachUserRequest_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DetachUserRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_DetachUserRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_DetachUserRequest(Tlv) ->
   dec_DetachUserRequest(Tlv, [65548]).

dec_DetachUserRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rn-domain-disconnected';
1 -> 'rn-provider-initiated';
2 -> 'rn-token-purged';
3 -> 'rn-user-requested';
4 -> 'rn-channel-purged';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DetachUserRequest_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'DetachUserRequest',Term1,Term2},
Res1.
'dec_DetachUserRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  DetachUserIndication
%%================================
enc_DetachUserIndication(Val) ->
    enc_DetachUserIndication(Val, [<<109>>]).

enc_DetachUserIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> encode_tags([<<10>>], [0], 1);
'rn-provider-initiated' -> encode_tags([<<10>>], [1], 1);
'rn-token-purged' -> encode_tags([<<10>>], [2], 1);
'rn-user-requested' -> encode_tags([<<10>>], [3], 1);
'rn-channel-purged' -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DetachUserIndication_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DetachUserIndication_userIds
%%================================
enc_DetachUserIndication_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DetachUserIndication_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DetachUserIndication_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DetachUserIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_DetachUserIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_DetachUserIndication(Tlv) ->
   dec_DetachUserIndication(Tlv, [65549]).

dec_DetachUserIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rn-domain-disconnected';
1 -> 'rn-provider-initiated';
2 -> 'rn-token-purged';
3 -> 'rn-user-requested';
4 -> 'rn-channel-purged';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DetachUserIndication_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'DetachUserIndication',Term1,Term2},
Res1.
'dec_DetachUserIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ChannelJoinRequest
%%================================
enc_ChannelJoinRequest(Val) ->
    enc_ChannelJoinRequest(Val, [<<110>>]).

enc_ChannelJoinRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelJoinRequest(Tlv) ->
   dec_ChannelJoinRequest(Tlv, [65550]).

dec_ChannelJoinRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ChannelJoinRequest',Term1,Term2},
Res1.


%%================================
%%  ChannelJoinConfirm
%%================================
enc_ChannelJoinConfirm(Val) ->
    enc_ChannelJoinConfirm(Val, [<<111>>]).

enc_ChannelJoinConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute requested(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelJoinConfirm(Tlv) ->
   dec_ChannelJoinConfirm(Tlv, [65551]).

dec_ChannelJoinConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute requested(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{2,V4}|TempTlv5] ->
    {begin
Val3 = decode_integer(V4, []),
if 0 =< Val3, Val3 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'ChannelJoinConfirm',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  ChannelLeaveRequest
%%================================
enc_ChannelLeaveRequest(Val) ->
    enc_ChannelLeaveRequest(Val, [<<112>>]).

enc_ChannelLeaveRequest(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ChannelLeaveRequest_channelIds'(Cindex1, [<<49>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelLeaveRequest_channelIds
%%================================
enc_ChannelLeaveRequest_channelIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelLeaveRequest_channelIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelLeaveRequest_channelIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelLeaveRequest_channelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelLeaveRequest_channelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChannelLeaveRequest(Tlv) ->
   dec_ChannelLeaveRequest(Tlv, [65552]).

dec_ChannelLeaveRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ChannelLeaveRequest_channelIds'(V1, [17]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'ChannelLeaveRequest',Term1},
Res1.
'dec_ChannelLeaveRequest_channelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ChannelConveneRequest
%%================================
enc_ChannelConveneRequest(Val) ->
    enc_ChannelConveneRequest(Val, [<<113>>]).

enc_ChannelConveneRequest(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelConveneRequest(Tlv) ->
   dec_ChannelConveneRequest(Tlv, [65553]).

dec_ChannelConveneRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'ChannelConveneRequest',Term1},
Res1.


%%================================
%%  ChannelConveneConfirm
%%================================
enc_ChannelConveneConfirm(Val) ->
    enc_ChannelConveneConfirm(Val, [<<114>>]).

enc_ChannelConveneConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelConveneConfirm(Tlv) ->
   dec_ChannelConveneConfirm(Tlv, [65554]).

dec_ChannelConveneConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{2,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ChannelConveneConfirm',Term1,Term2,Term3},
Res1.


%%================================
%%  ChannelDisbandRequest
%%================================
enc_ChannelDisbandRequest(Val) ->
    enc_ChannelDisbandRequest(Val, [<<115>>]).

enc_ChannelDisbandRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelDisbandRequest(Tlv) ->
   dec_ChannelDisbandRequest(Tlv, [65555]).

dec_ChannelDisbandRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ChannelDisbandRequest',Term1,Term2},
Res1.


%%================================
%%  ChannelDisbandIndication
%%================================
enc_ChannelDisbandIndication(Val) ->
    enc_ChannelDisbandIndication(Val, [<<116>>]).

enc_ChannelDisbandIndication(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ChannelDisbandIndication(Tlv) ->
   dec_ChannelDisbandIndication(Tlv, [65556]).

dec_ChannelDisbandIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'ChannelDisbandIndication',Term1},
Res1.


%%================================
%%  ChannelAdmitRequest
%%================================
enc_ChannelAdmitRequest(Val) ->
    enc_ChannelAdmitRequest(Val, [<<117>>]).

enc_ChannelAdmitRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelAdmitRequest_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAdmitRequest_userIds
%%================================
enc_ChannelAdmitRequest_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAdmitRequest_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAdmitRequest_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAdmitRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelAdmitRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChannelAdmitRequest(Tlv) ->
   dec_ChannelAdmitRequest(Tlv, [65557]).

dec_ChannelAdmitRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ChannelAdmitRequest_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ChannelAdmitRequest',Term1,Term2,Term3},
Res1.
'dec_ChannelAdmitRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ChannelAdmitIndication
%%================================
enc_ChannelAdmitIndication(Val) ->
    enc_ChannelAdmitIndication(Val, [<<118>>]).

enc_ChannelAdmitIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelAdmitIndication_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAdmitIndication_userIds
%%================================
enc_ChannelAdmitIndication_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAdmitIndication_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAdmitIndication_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAdmitIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelAdmitIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChannelAdmitIndication(Tlv) ->
   dec_ChannelAdmitIndication(Tlv, [65558]).

dec_ChannelAdmitIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ChannelAdmitIndication_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ChannelAdmitIndication',Term1,Term2,Term3},
Res1.
'dec_ChannelAdmitIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ChannelExpelRequest
%%================================
enc_ChannelExpelRequest(Val) ->
    enc_ChannelExpelRequest(Val, [<<119>>]).

enc_ChannelExpelRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelExpelRequest_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelExpelRequest_userIds
%%================================
enc_ChannelExpelRequest_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelExpelRequest_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelExpelRequest_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelExpelRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelExpelRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChannelExpelRequest(Tlv) ->
   dec_ChannelExpelRequest(Tlv, [65559]).

dec_ChannelExpelRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ChannelExpelRequest_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ChannelExpelRequest',Term1,Term2,Term3},
Res1.
'dec_ChannelExpelRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ChannelExpelIndication
%%================================
enc_ChannelExpelIndication(Val) ->
    enc_ChannelExpelIndication(Val, [<<120>>]).

enc_ChannelExpelIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ChannelExpelIndication_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelExpelIndication_userIds
%%================================
enc_ChannelExpelIndication_userIds(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelExpelIndication_userIds_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelExpelIndication_userIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelExpelIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ChannelExpelIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ChannelExpelIndication(Tlv) ->
   dec_ChannelExpelIndication(Tlv, [65560]).

dec_ChannelExpelIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ChannelExpelIndication_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ChannelExpelIndication',Term1,Term2},
Res1.
'dec_ChannelExpelIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  SendDataRequest
%%================================
enc_SendDataRequest(Val) ->
    enc_SendDataRequest(Val, [<<121>>]).

enc_SendDataRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> encode_tags([<<10>>], [0], 1);
high -> encode_tags([<<10>>], [1], 1);
medium -> encode_tags([<<10>>], [2], 1);
low -> encode_tags([<<10>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_named_bit_string(2, Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_SendDataRequest(Tlv) ->
   dec_SendDataRequest(Tlv, [65561]).

dec_SendDataRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [10]) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_named_bit_string(V4, [{'begin',0},{'end',1}], [3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'SendDataRequest',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  SendDataIndication
%%================================
enc_SendDataIndication(Val) ->
    enc_SendDataIndication(Val, [<<122>>]).

enc_SendDataIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> encode_tags([<<10>>], [0], 1);
high -> encode_tags([<<10>>], [1], 1);
medium -> encode_tags([<<10>>], [2], 1);
low -> encode_tags([<<10>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_named_bit_string(2, Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_SendDataIndication(Tlv) ->
   dec_SendDataIndication(Tlv, [65562]).

dec_SendDataIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [10]) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_named_bit_string(V4, [{'begin',0},{'end',1}], [3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'SendDataIndication',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  UniformSendDataRequest
%%================================
enc_UniformSendDataRequest(Val) ->
    enc_UniformSendDataRequest(Val, [<<123>>]).

enc_UniformSendDataRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> encode_tags([<<10>>], [0], 1);
high -> encode_tags([<<10>>], [1], 1);
medium -> encode_tags([<<10>>], [2], 1);
low -> encode_tags([<<10>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_named_bit_string(2, Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_UniformSendDataRequest(Tlv) ->
   dec_UniformSendDataRequest(Tlv, [65563]).

dec_UniformSendDataRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [10]) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_named_bit_string(V4, [{'begin',0},{'end',1}], [3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'UniformSendDataRequest',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  UniformSendDataIndication
%%================================
enc_UniformSendDataIndication(Val) ->
    enc_UniformSendDataIndication(Val, [<<124>>]).

enc_UniformSendDataIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> encode_tags([<<10>>], [0], 1);
high -> encode_tags([<<10>>], [1], 1);
medium -> encode_tags([<<10>>], [2], 1);
low -> encode_tags([<<10>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_named_bit_string(2, Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_UniformSendDataIndication(Tlv) ->
   dec_UniformSendDataIndication(Tlv, [65564]).

dec_UniformSendDataIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [10]) of
0 -> top;
1 -> high;
2 -> medium;
3 -> low;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_named_bit_string(V4, [{'begin',0},{'end',1}], [3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'UniformSendDataIndication',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  TokenGrabRequest
%%================================
enc_TokenGrabRequest(Val) ->
    enc_TokenGrabRequest(Val, [<<125>>]).

enc_TokenGrabRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGrabRequest(Tlv) ->
   dec_TokenGrabRequest(Tlv, [65565]).

dec_TokenGrabRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenGrabRequest',Term1,Term2},
Res1.


%%================================
%%  TokenGrabConfirm
%%================================
enc_TokenGrabConfirm(Val) ->
    enc_TokenGrabConfirm(Val, [<<126>>]).

enc_TokenGrabConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> encode_tags([<<10>>], [0], 1);
selfGrabbed -> encode_tags([<<10>>], [1], 1);
otherGrabbed -> encode_tags([<<10>>], [2], 1);
selfInhibited -> encode_tags([<<10>>], [3], 1);
otherInhibited -> encode_tags([<<10>>], [4], 1);
selfRecipient -> encode_tags([<<10>>], [5], 1);
selfGiving -> encode_tags([<<10>>], [6], 1);
otherGiving -> encode_tags([<<10>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGrabConfirm(Tlv) ->
   dec_TokenGrabConfirm(Tlv, [65566]).

dec_TokenGrabConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [10]) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'TokenGrabConfirm',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  TokenInhibitRequest
%%================================
enc_TokenInhibitRequest(Val) ->
    enc_TokenInhibitRequest(Val, [<<127,31>>]).

enc_TokenInhibitRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenInhibitRequest(Tlv) ->
   dec_TokenInhibitRequest(Tlv, [65567]).

dec_TokenInhibitRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenInhibitRequest',Term1,Term2},
Res1.


%%================================
%%  TokenInhibitConfirm
%%================================
enc_TokenInhibitConfirm(Val) ->
    enc_TokenInhibitConfirm(Val, [<<127,32>>]).

enc_TokenInhibitConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> encode_tags([<<10>>], [0], 1);
selfGrabbed -> encode_tags([<<10>>], [1], 1);
otherGrabbed -> encode_tags([<<10>>], [2], 1);
selfInhibited -> encode_tags([<<10>>], [3], 1);
otherInhibited -> encode_tags([<<10>>], [4], 1);
selfRecipient -> encode_tags([<<10>>], [5], 1);
selfGiving -> encode_tags([<<10>>], [6], 1);
otherGiving -> encode_tags([<<10>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenInhibitConfirm(Tlv) ->
   dec_TokenInhibitConfirm(Tlv, [65568]).

dec_TokenInhibitConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [10]) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'TokenInhibitConfirm',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  TokenGiveRequest
%%================================
enc_TokenGiveRequest(Val) ->
    enc_TokenGiveRequest(Val, [<<127,33>>]).

enc_TokenGiveRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGiveRequest(Tlv) ->
   dec_TokenGiveRequest(Tlv, [65569]).

dec_TokenGiveRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [2]),
if 0 =< Val3, Val3 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TokenGiveRequest',Term1,Term2,Term3},
Res1.


%%================================
%%  TokenGiveIndication
%%================================
enc_TokenGiveIndication(Val) ->
    enc_TokenGiveIndication(Val, [<<127,34>>]).

enc_TokenGiveIndication(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGiveIndication(Tlv) ->
   dec_TokenGiveIndication(Tlv, [65570]).

dec_TokenGiveIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [2]),
if 0 =< Val3, Val3 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TokenGiveIndication',Term1,Term2,Term3},
Res1.


%%================================
%%  TokenGiveResponse
%%================================
enc_TokenGiveResponse(Val) ->
    enc_TokenGiveResponse(Val, [<<127,35>>]).

enc_TokenGiveResponse(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGiveResponse(Tlv) ->
   dec_TokenGiveResponse(Tlv, [65571]).

dec_TokenGiveResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TokenGiveResponse',Term1,Term2,Term3},
Res1.


%%================================
%%  TokenGiveConfirm
%%================================
enc_TokenGiveConfirm(Val) ->
    enc_TokenGiveConfirm(Val, [<<127,36>>]).

enc_TokenGiveConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> encode_tags([<<10>>], [0], 1);
selfGrabbed -> encode_tags([<<10>>], [1], 1);
otherGrabbed -> encode_tags([<<10>>], [2], 1);
selfInhibited -> encode_tags([<<10>>], [3], 1);
otherInhibited -> encode_tags([<<10>>], [4], 1);
selfRecipient -> encode_tags([<<10>>], [5], 1);
selfGiving -> encode_tags([<<10>>], [6], 1);
otherGiving -> encode_tags([<<10>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenGiveConfirm(Tlv) ->
   dec_TokenGiveConfirm(Tlv, [65572]).

dec_TokenGiveConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [10]) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'TokenGiveConfirm',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  TokenPleaseRequest
%%================================
enc_TokenPleaseRequest(Val) ->
    enc_TokenPleaseRequest(Val, [<<127,37>>]).

enc_TokenPleaseRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenPleaseRequest(Tlv) ->
   dec_TokenPleaseRequest(Tlv, [65573]).

dec_TokenPleaseRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenPleaseRequest',Term1,Term2},
Res1.


%%================================
%%  TokenPleaseIndication
%%================================
enc_TokenPleaseIndication(Val) ->
    enc_TokenPleaseIndication(Val, [<<127,38>>]).

enc_TokenPleaseIndication(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenPleaseIndication(Tlv) ->
   dec_TokenPleaseIndication(Tlv, [65574]).

dec_TokenPleaseIndication(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenPleaseIndication',Term1,Term2},
Res1.


%%================================
%%  TokenReleaseRequest
%%================================
enc_TokenReleaseRequest(Val) ->
    enc_TokenReleaseRequest(Val, [<<127,39>>]).

enc_TokenReleaseRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenReleaseRequest(Tlv) ->
   dec_TokenReleaseRequest(Tlv, [65575]).

dec_TokenReleaseRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenReleaseRequest',Term1,Term2},
Res1.


%%================================
%%  TokenReleaseConfirm
%%================================
enc_TokenReleaseConfirm(Val) ->
    enc_TokenReleaseConfirm(Val, [<<127,40>>]).

enc_TokenReleaseConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> encode_tags([<<10>>], [0], 1);
'rt-domain-merging' -> encode_tags([<<10>>], [1], 1);
'rt-domain-not-hierarchical' -> encode_tags([<<10>>], [2], 1);
'rt-no-such-channel' -> encode_tags([<<10>>], [3], 1);
'rt-no-such-domain' -> encode_tags([<<10>>], [4], 1);
'rt-no-such-user' -> encode_tags([<<10>>], [5], 1);
'rt-not-admitted' -> encode_tags([<<10>>], [6], 1);
'rt-other-user-id' -> encode_tags([<<10>>], [7], 1);
'rt-parameters-unacceptable' -> encode_tags([<<10>>], [8], 1);
'rt-token-not-available' -> encode_tags([<<10>>], [9], 1);
'rt-token-not-possessed' -> encode_tags([<<10>>], [10], 1);
'rt-too-many-channels' -> encode_tags([<<10>>], [11], 1);
'rt-too-many-tokens' -> encode_tags([<<10>>], [12], 1);
'rt-too-many-users' -> encode_tags([<<10>>], [13], 1);
'rt-unspecified-failure' -> encode_tags([<<10>>], [14], 1);
'rt-user-rejected' -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> encode_tags([<<10>>], [0], 1);
selfGrabbed -> encode_tags([<<10>>], [1], 1);
otherGrabbed -> encode_tags([<<10>>], [2], 1);
selfInhibited -> encode_tags([<<10>>], [3], 1);
otherInhibited -> encode_tags([<<10>>], [4], 1);
selfRecipient -> encode_tags([<<10>>], [5], 1);
selfGiving -> encode_tags([<<10>>], [6], 1);
otherGiving -> encode_tags([<<10>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenReleaseConfirm(Tlv) ->
   dec_TokenReleaseConfirm(Tlv, [65576]).

dec_TokenReleaseConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [10]) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [10]) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'TokenReleaseConfirm',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  TokenTestRequest
%%================================
enc_TokenTestRequest(Val) ->
    enc_TokenTestRequest(Val, [<<127,41>>]).

enc_TokenTestRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenTestRequest(Tlv) ->
   dec_TokenTestRequest(Tlv, [65577]).

dec_TokenTestRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TokenTestRequest',Term1,Term2},
Res1.


%%================================
%%  TokenTestConfirm
%%================================
enc_TokenTestConfirm(Val) ->
    enc_TokenTestConfirm(Val, [<<127,42>>]).

enc_TokenTestConfirm(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
notInUse -> encode_tags([<<10>>], [0], 1);
selfGrabbed -> encode_tags([<<10>>], [1], 1);
otherGrabbed -> encode_tags([<<10>>], [2], 1);
selfInhibited -> encode_tags([<<10>>], [3], 1);
otherInhibited -> encode_tags([<<10>>], [4], 1);
selfRecipient -> encode_tags([<<10>>], [5], 1);
selfGiving -> encode_tags([<<10>>], [6], 1);
otherGiving -> encode_tags([<<10>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TokenTestConfirm(Tlv) ->
   dec_TokenTestConfirm(Tlv, [65578]).

dec_TokenTestConfirm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 1 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tokenStatus(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [10]) of
0 -> notInUse;
1 -> selfGrabbed;
2 -> otherGrabbed;
3 -> selfInhibited;
4 -> otherInhibited;
5 -> selfRecipient;
6 -> selfGiving;
7 -> otherGiving;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TokenTestConfirm',Term1,Term2,Term3},
Res1.


%%================================
%%  Reason
%%================================
enc_Reason(Val) ->
    enc_Reason(Val, [<<10>>]).

enc_Reason(Val, TagIn) ->
case Val of
'rn-domain-disconnected' -> encode_tags(TagIn, [0], 1);
'rn-provider-initiated' -> encode_tags(TagIn, [1], 1);
'rn-token-purged' -> encode_tags(TagIn, [2], 1);
'rn-user-requested' -> encode_tags(TagIn, [3], 1);
'rn-channel-purged' -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_Reason(Tlv) ->
   dec_Reason(Tlv, [10]).

dec_Reason(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'rn-domain-disconnected';
1 -> 'rn-provider-initiated';
2 -> 'rn-token-purged';
3 -> 'rn-user-requested';
4 -> 'rn-channel-purged';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Result
%%================================
enc_Result(Val) ->
    enc_Result(Val, [<<10>>]).

enc_Result(Val, TagIn) ->
case Val of
'rt-successful' -> encode_tags(TagIn, [0], 1);
'rt-domain-merging' -> encode_tags(TagIn, [1], 1);
'rt-domain-not-hierarchical' -> encode_tags(TagIn, [2], 1);
'rt-no-such-channel' -> encode_tags(TagIn, [3], 1);
'rt-no-such-domain' -> encode_tags(TagIn, [4], 1);
'rt-no-such-user' -> encode_tags(TagIn, [5], 1);
'rt-not-admitted' -> encode_tags(TagIn, [6], 1);
'rt-other-user-id' -> encode_tags(TagIn, [7], 1);
'rt-parameters-unacceptable' -> encode_tags(TagIn, [8], 1);
'rt-token-not-available' -> encode_tags(TagIn, [9], 1);
'rt-token-not-possessed' -> encode_tags(TagIn, [10], 1);
'rt-too-many-channels' -> encode_tags(TagIn, [11], 1);
'rt-too-many-tokens' -> encode_tags(TagIn, [12], 1);
'rt-too-many-users' -> encode_tags(TagIn, [13], 1);
'rt-unspecified-failure' -> encode_tags(TagIn, [14], 1);
'rt-user-rejected' -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_Result(Tlv) ->
   dec_Result(Tlv, [10]).

dec_Result(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'rt-successful';
1 -> 'rt-domain-merging';
2 -> 'rt-domain-not-hierarchical';
3 -> 'rt-no-such-channel';
4 -> 'rt-no-such-domain';
5 -> 'rt-no-such-user';
6 -> 'rt-not-admitted';
7 -> 'rt-other-user-id';
8 -> 'rt-parameters-unacceptable';
9 -> 'rt-token-not-available';
10 -> 'rt-token-not-possessed';
11 -> 'rt-too-many-channels';
12 -> 'rt-too-many-tokens';
13 -> 'rt-too-many-users';
14 -> 'rt-unspecified-failure';
15 -> 'rt-user-rejected';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Diagnostic
%%================================
enc_Diagnostic(Val) ->
    enc_Diagnostic(Val, [<<10>>]).

enc_Diagnostic(Val, TagIn) ->
case Val of
'dc-inconsistent-merge' -> encode_tags(TagIn, [0], 1);
'dc-forbidden-PDU-downward' -> encode_tags(TagIn, [1], 1);
'dc-forbidden-PDU-upward' -> encode_tags(TagIn, [2], 1);
'dc-invalid-BER-encoding' -> encode_tags(TagIn, [3], 1);
'dc-invalid-PER-encoding' -> encode_tags(TagIn, [4], 1);
'dc-misrouted-user' -> encode_tags(TagIn, [5], 1);
'dc-unrequested-confirm' -> encode_tags(TagIn, [6], 1);
'dc-wrong-transport-priority' -> encode_tags(TagIn, [7], 1);
'dc-channel-id-conflict' -> encode_tags(TagIn, [8], 1);
'dc-token-id-conflict' -> encode_tags(TagIn, [9], 1);
'dc-not-user-id-channel' -> encode_tags(TagIn, [10], 1);
'dc-too-many-channels' -> encode_tags(TagIn, [11], 1);
'dc-too-many-tokens' -> encode_tags(TagIn, [12], 1);
'dc-too-many-users' -> encode_tags(TagIn, [13], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_Diagnostic(Tlv) ->
   dec_Diagnostic(Tlv, [10]).

dec_Diagnostic(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'dc-inconsistent-merge';
1 -> 'dc-forbidden-PDU-downward';
2 -> 'dc-forbidden-PDU-upward';
3 -> 'dc-invalid-BER-encoding';
4 -> 'dc-invalid-PER-encoding';
5 -> 'dc-misrouted-user';
6 -> 'dc-unrequested-confirm';
7 -> 'dc-wrong-transport-priority';
8 -> 'dc-channel-id-conflict';
9 -> 'dc-token-id-conflict';
10 -> 'dc-not-user-id-channel';
11 -> 'dc-too-many-channels';
12 -> 'dc-too-many-tokens';
13 -> 'dc-too-many-users';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ConnectMCSPDU
%%================================
enc_ConnectMCSPDU(Val) ->
    enc_ConnectMCSPDU(Val, []).

enc_ConnectMCSPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'connect-initial' ->
         'enc_Connect-Initial'(element(2,Val), [<<127,101>>]);
      'connect-response' ->
         'enc_Connect-Response'(element(2,Val), [<<127,102>>]);
      'connect-additional' ->
         'enc_Connect-Additional'(element(2,Val), [<<127,103>>]);
      'connect-result' ->
         'enc_Connect-Result'(element(2,Val), [<<127,104>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConnectMCSPDU(Tlv) ->
   dec_ConnectMCSPDU(Tlv, []).

dec_ConnectMCSPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'connect-initial'
    {65637, V1} -> 
        {'connect-initial', 'dec_Connect-Initial'(V1, [])};


%% 'connect-response'
    {65638, V1} -> 
        {'connect-response', 'dec_Connect-Response'(V1, [])};


%% 'connect-additional'
    {65639, V1} -> 
        {'connect-additional', 'dec_Connect-Additional'(V1, [])};


%% 'connect-result'
    {65640, V1} -> 
        {'connect-result', 'dec_Connect-Result'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DomainMCSPDU
%%================================
enc_DomainMCSPDU(Val) ->
    enc_DomainMCSPDU(Val, []).

enc_DomainMCSPDU(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      plumbDomainIndication ->
         'enc_PlumbDomainIndication'(element(2,Val), [<<96>>]);
      erectDomainRequest ->
         'enc_ErectDomainRequest'(element(2,Val), [<<97>>]);
      mergeChannelsRequest ->
         'enc_MergeChannelsRequest'(element(2,Val), [<<98>>]);
      mergeChannelsConfirm ->
         'enc_MergeChannelsConfirm'(element(2,Val), [<<99>>]);
      purgeChannelsIndication ->
         'enc_PurgeChannelsIndication'(element(2,Val), [<<100>>]);
      mergeTokensRequest ->
         'enc_MergeTokensRequest'(element(2,Val), [<<101>>]);
      mergeTokensConfirm ->
         'enc_MergeTokensConfirm'(element(2,Val), [<<102>>]);
      purgeTokensIndication ->
         'enc_PurgeTokensIndication'(element(2,Val), [<<103>>]);
      disconnectProviderUltimatum ->
         'enc_DisconnectProviderUltimatum'(element(2,Val), [<<104>>]);
      rejectMCSPDUUltimatum ->
         'enc_RejectMCSPDUUltimatum'(element(2,Val), [<<105>>]);
      attachUserRequest ->
         'enc_AttachUserRequest'(element(2,Val), [<<106>>]);
      attachUserConfirm ->
         'enc_AttachUserConfirm'(element(2,Val), [<<107>>]);
      detachUserRequest ->
         'enc_DetachUserRequest'(element(2,Val), [<<108>>]);
      detachUserIndication ->
         'enc_DetachUserIndication'(element(2,Val), [<<109>>]);
      channelJoinRequest ->
         'enc_ChannelJoinRequest'(element(2,Val), [<<110>>]);
      channelJoinConfirm ->
         'enc_ChannelJoinConfirm'(element(2,Val), [<<111>>]);
      channelLeaveRequest ->
         'enc_ChannelLeaveRequest'(element(2,Val), [<<112>>]);
      channelConveneRequest ->
         'enc_ChannelConveneRequest'(element(2,Val), [<<113>>]);
      channelConveneConfirm ->
         'enc_ChannelConveneConfirm'(element(2,Val), [<<114>>]);
      channelDisbandRequest ->
         'enc_ChannelDisbandRequest'(element(2,Val), [<<115>>]);
      channelDisbandIndication ->
         'enc_ChannelDisbandIndication'(element(2,Val), [<<116>>]);
      channelAdmitRequest ->
         'enc_ChannelAdmitRequest'(element(2,Val), [<<117>>]);
      channelAdmitIndication ->
         'enc_ChannelAdmitIndication'(element(2,Val), [<<118>>]);
      channelExpelRequest ->
         'enc_ChannelExpelRequest'(element(2,Val), [<<119>>]);
      channelExpelIndication ->
         'enc_ChannelExpelIndication'(element(2,Val), [<<120>>]);
      sendDataRequest ->
         'enc_SendDataRequest'(element(2,Val), [<<121>>]);
      sendDataIndication ->
         'enc_SendDataIndication'(element(2,Val), [<<122>>]);
      uniformSendDataRequest ->
         'enc_UniformSendDataRequest'(element(2,Val), [<<123>>]);
      uniformSendDataIndication ->
         'enc_UniformSendDataIndication'(element(2,Val), [<<124>>]);
      tokenGrabRequest ->
         'enc_TokenGrabRequest'(element(2,Val), [<<125>>]);
      tokenGrabConfirm ->
         'enc_TokenGrabConfirm'(element(2,Val), [<<126>>]);
      tokenInhibitRequest ->
         'enc_TokenInhibitRequest'(element(2,Val), [<<127,31>>]);
      tokenInhibitConfirm ->
         'enc_TokenInhibitConfirm'(element(2,Val), [<<127,32>>]);
      tokenGiveRequest ->
         'enc_TokenGiveRequest'(element(2,Val), [<<127,33>>]);
      tokenGiveIndication ->
         'enc_TokenGiveIndication'(element(2,Val), [<<127,34>>]);
      tokenGiveResponse ->
         'enc_TokenGiveResponse'(element(2,Val), [<<127,35>>]);
      tokenGiveConfirm ->
         'enc_TokenGiveConfirm'(element(2,Val), [<<127,36>>]);
      tokenPleaseRequest ->
         'enc_TokenPleaseRequest'(element(2,Val), [<<127,37>>]);
      tokenPleaseIndication ->
         'enc_TokenPleaseIndication'(element(2,Val), [<<127,38>>]);
      tokenReleaseRequest ->
         'enc_TokenReleaseRequest'(element(2,Val), [<<127,39>>]);
      tokenReleaseConfirm ->
         'enc_TokenReleaseConfirm'(element(2,Val), [<<127,40>>]);
      tokenTestRequest ->
         'enc_TokenTestRequest'(element(2,Val), [<<127,41>>]);
      tokenTestConfirm ->
         'enc_TokenTestConfirm'(element(2,Val), [<<127,42>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_DomainMCSPDU(Tlv) ->
   dec_DomainMCSPDU(Tlv, []).

dec_DomainMCSPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'plumbDomainIndication'
    {65536, V1} -> 
        {plumbDomainIndication, 'dec_PlumbDomainIndication'(V1, [])};


%% 'erectDomainRequest'
    {65537, V1} -> 
        {erectDomainRequest, 'dec_ErectDomainRequest'(V1, [])};


%% 'mergeChannelsRequest'
    {65538, V1} -> 
        {mergeChannelsRequest, 'dec_MergeChannelsRequest'(V1, [])};


%% 'mergeChannelsConfirm'
    {65539, V1} -> 
        {mergeChannelsConfirm, 'dec_MergeChannelsConfirm'(V1, [])};


%% 'purgeChannelsIndication'
    {65540, V1} -> 
        {purgeChannelsIndication, 'dec_PurgeChannelsIndication'(V1, [])};


%% 'mergeTokensRequest'
    {65541, V1} -> 
        {mergeTokensRequest, 'dec_MergeTokensRequest'(V1, [])};


%% 'mergeTokensConfirm'
    {65542, V1} -> 
        {mergeTokensConfirm, 'dec_MergeTokensConfirm'(V1, [])};


%% 'purgeTokensIndication'
    {65543, V1} -> 
        {purgeTokensIndication, 'dec_PurgeTokensIndication'(V1, [])};


%% 'disconnectProviderUltimatum'
    {65544, V1} -> 
        {disconnectProviderUltimatum, 'dec_DisconnectProviderUltimatum'(V1, [])};


%% 'rejectMCSPDUUltimatum'
    {65545, V1} -> 
        {rejectMCSPDUUltimatum, 'dec_RejectMCSPDUUltimatum'(V1, [])};


%% 'attachUserRequest'
    {65546, V1} -> 
        {attachUserRequest, 'dec_AttachUserRequest'(V1, [])};


%% 'attachUserConfirm'
    {65547, V1} -> 
        {attachUserConfirm, 'dec_AttachUserConfirm'(V1, [])};


%% 'detachUserRequest'
    {65548, V1} -> 
        {detachUserRequest, 'dec_DetachUserRequest'(V1, [])};


%% 'detachUserIndication'
    {65549, V1} -> 
        {detachUserIndication, 'dec_DetachUserIndication'(V1, [])};


%% 'channelJoinRequest'
    {65550, V1} -> 
        {channelJoinRequest, 'dec_ChannelJoinRequest'(V1, [])};


%% 'channelJoinConfirm'
    {65551, V1} -> 
        {channelJoinConfirm, 'dec_ChannelJoinConfirm'(V1, [])};


%% 'channelLeaveRequest'
    {65552, V1} -> 
        {channelLeaveRequest, 'dec_ChannelLeaveRequest'(V1, [])};


%% 'channelConveneRequest'
    {65553, V1} -> 
        {channelConveneRequest, 'dec_ChannelConveneRequest'(V1, [])};


%% 'channelConveneConfirm'
    {65554, V1} -> 
        {channelConveneConfirm, 'dec_ChannelConveneConfirm'(V1, [])};


%% 'channelDisbandRequest'
    {65555, V1} -> 
        {channelDisbandRequest, 'dec_ChannelDisbandRequest'(V1, [])};


%% 'channelDisbandIndication'
    {65556, V1} -> 
        {channelDisbandIndication, 'dec_ChannelDisbandIndication'(V1, [])};


%% 'channelAdmitRequest'
    {65557, V1} -> 
        {channelAdmitRequest, 'dec_ChannelAdmitRequest'(V1, [])};


%% 'channelAdmitIndication'
    {65558, V1} -> 
        {channelAdmitIndication, 'dec_ChannelAdmitIndication'(V1, [])};


%% 'channelExpelRequest'
    {65559, V1} -> 
        {channelExpelRequest, 'dec_ChannelExpelRequest'(V1, [])};


%% 'channelExpelIndication'
    {65560, V1} -> 
        {channelExpelIndication, 'dec_ChannelExpelIndication'(V1, [])};


%% 'sendDataRequest'
    {65561, V1} -> 
        {sendDataRequest, 'dec_SendDataRequest'(V1, [])};


%% 'sendDataIndication'
    {65562, V1} -> 
        {sendDataIndication, 'dec_SendDataIndication'(V1, [])};


%% 'uniformSendDataRequest'
    {65563, V1} -> 
        {uniformSendDataRequest, 'dec_UniformSendDataRequest'(V1, [])};


%% 'uniformSendDataIndication'
    {65564, V1} -> 
        {uniformSendDataIndication, 'dec_UniformSendDataIndication'(V1, [])};


%% 'tokenGrabRequest'
    {65565, V1} -> 
        {tokenGrabRequest, 'dec_TokenGrabRequest'(V1, [])};


%% 'tokenGrabConfirm'
    {65566, V1} -> 
        {tokenGrabConfirm, 'dec_TokenGrabConfirm'(V1, [])};


%% 'tokenInhibitRequest'
    {65567, V1} -> 
        {tokenInhibitRequest, 'dec_TokenInhibitRequest'(V1, [])};


%% 'tokenInhibitConfirm'
    {65568, V1} -> 
        {tokenInhibitConfirm, 'dec_TokenInhibitConfirm'(V1, [])};


%% 'tokenGiveRequest'
    {65569, V1} -> 
        {tokenGiveRequest, 'dec_TokenGiveRequest'(V1, [])};


%% 'tokenGiveIndication'
    {65570, V1} -> 
        {tokenGiveIndication, 'dec_TokenGiveIndication'(V1, [])};


%% 'tokenGiveResponse'
    {65571, V1} -> 
        {tokenGiveResponse, 'dec_TokenGiveResponse'(V1, [])};


%% 'tokenGiveConfirm'
    {65572, V1} -> 
        {tokenGiveConfirm, 'dec_TokenGiveConfirm'(V1, [])};


%% 'tokenPleaseRequest'
    {65573, V1} -> 
        {tokenPleaseRequest, 'dec_TokenPleaseRequest'(V1, [])};


%% 'tokenPleaseIndication'
    {65574, V1} -> 
        {tokenPleaseIndication, 'dec_TokenPleaseIndication'(V1, [])};


%% 'tokenReleaseRequest'
    {65575, V1} -> 
        {tokenReleaseRequest, 'dec_TokenReleaseRequest'(V1, [])};


%% 'tokenReleaseConfirm'
    {65576, V1} -> 
        {tokenReleaseConfirm, 'dec_TokenReleaseConfirm'(V1, [])};


%% 'tokenTestRequest'
    {65577, V1} -> 
        {tokenTestRequest, 'dec_TokenTestRequest'(V1, [])};


%% 'tokenTestConfirm'
    {65578, V1} -> 
        {tokenTestConfirm, 'dec_TokenTestConfirm'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.

%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_, L} | Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L) | Acc]);
collect_parts([{3, <<Unused,Bits/binary>>} | Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T, V} | Rest], Acc) ->
    collect_parts(Rest, [V | Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3, <<Unused,Bits/binary>>} | Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits | Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc | lists:reverse(Acc)]).

decode_bitstring2(1, Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7, B6, B5, B4, B3, B2, B1, B0], 8 - Unused);
decode_bitstring2(Len, Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7, B6, B5, B4, B3, B2, B1, B0 |
     decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B | BitList],
                     [{Name, No} | NamedNumberList],
                     No, Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList, NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList, NamedNumberList,
                                 No + 1,
                                 [Name | Result])
    end;
decode_bitstring_NNL([1 | BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList,
                         No + 1,
                         [{bit, No} | Result]);
decode_bitstring_NNL([0 | BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error, {asn1, {decode_boolean, Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

do_encode_named_bit_string(Size,
                           [FirstVal | RestVal],
                           NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len, Unused, OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused | OctetList], Len + 1).

encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused, Octet} = unused_bitlist(Val, 7, 0),
    {1, Unused, [Octet]}.

encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack, Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len, 0, Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused, Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1, Unused, [Ack, Val]}.

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error, {asn1, {encode_boolean, X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes, length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error, {asn1, {encode_integer, Val}}}).

encode_integer_neg(- 1, [B1 | _T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255 | Acc]).

encode_integer_pos(0, [B | _Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255 | Acc]).

encode_length(L) when L =< 127 ->
    {[L], 1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len | Oct], Len + 1};
        true ->
            exit({error, {asn1, too_long_length_oct, Len}})
    end.

encode_named_bit_string(C, [H | _] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(C, Bits, NamedBitList, TagIn);
encode_named_bit_string(C, [{bit, _} | _] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(C, Bits, NamedBitList, TagIn);
encode_named_bit_string(C, [], _NamedBitList, TagIn) ->
    encode_unnamed_bit_string(C, <<>>, TagIn);
encode_named_bit_string(C, Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(C, Bits, TagIn).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar, LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag | Trest], BytesSoFar, LenSoFar) ->
    {Bytes2, L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag, Bytes2 | BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar, LenSoFar}.

encode_unnamed_bit_string(MaxBits, Bits, TagIn) ->
    NumBits = bit_size(Bits),
    Unused = (8 - NumBits band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    if
        NumBits > MaxBits ->
            exit({error,
                  {asn1,
                   {bitstring_length,
                    {{was, NumBits}, {maximum, MaxBits}}}}});
        true ->
            encode_tags(TagIn, Bin, byte_size(Bin))
    end.

get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0 | make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_ | _] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T, V}, [T]) ->
    V;
match_tags({T, V}, [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, V}], [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, _V} | _] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag, _V} = Tlv, [T | _Tt]) ->
    exit({error, {asn1, {wrong_tag, {{expected, T}, {got, Tag, Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255 | Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

unused_bitlist([], Trail, Ack) ->
    {Trail + 1, Ack};
unused_bitlist([Bit | Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
